{"version":3,"file":"extensions_dicom-pdf_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAFA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtFA;AAEA;AAIA;AAEA;AA2DA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACtEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAAA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1DA;AAMA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-pdf/src/getSopClassHandlerModule.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-pdf/src/id.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-pdf/src/index.tsx"],"sourcesContent":["import { SOPClassHandlerId } from './id';\nimport { utils, classes } from '@ohif/core';\n\nconst { ImageSet } = classes;\n\nconst SOP_CLASS_UIDS = {\n  ENCAPSULATED_PDF: '1.2.840.10008.5.1.4.1.1.104.1',\n};\n\nconst sopClassUids = Object.values(SOP_CLASS_UIDS);\n\nconst _getDisplaySetsFromSeries = (\n  instances,\n  servicesManager,\n  extensionManager\n) => {\n  const dataSource = extensionManager.getActiveDataSource()[0];\n  return instances.map(instance => {\n    const { Modality, SOPInstanceUID, EncapsulatedDocument } = instance;\n    const {\n      SeriesDescription = 'PDF',\n      MIMETypeOfEncapsulatedDocument,\n    } = instance;\n    const {\n      SeriesNumber,\n      SeriesDate,\n      SeriesInstanceUID,\n      StudyInstanceUID,\n      SOPClassUID,\n    } = instance;\n    const pdfUrl = dataSource.retrieve.directURL({\n      instance,\n      tag: 'EncapsulatedDocument',\n      defaultType: MIMETypeOfEncapsulatedDocument || 'application/pdf',\n      singlepart: 'pdf',\n    });\n\n    const displaySet = {\n      //plugin: id,\n      Modality,\n      displaySetInstanceUID: utils.guid(),\n      SeriesDescription,\n      SeriesNumber,\n      SeriesDate,\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      StudyInstanceUID,\n      SOPClassHandlerId,\n      SOPClassUID,\n      referencedImages: null,\n      measurements: null,\n      pdfUrl,\n      instances: [instance],\n      thumbnailSrc: dataSource.retrieve.directURL({\n        instance,\n        defaultPath: '/thumbnail',\n        defaultType: 'image/jpeg',\n        tag: 'Absent',\n      }),\n      isDerivedDisplaySet: true,\n      isLoaded: false,\n      sopClassUids,\n      numImageFrames: 0,\n      numInstances: 1,\n      instance,\n    };\n    return displaySet;\n  });\n};\n\nexport default function getSopClassHandlerModule({\n  servicesManager,\n  extensionManager,\n}) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(\n      instances,\n      servicesManager,\n      extensionManager\n    );\n  };\n\n  return [\n    {\n      name: 'dicom-pdf',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.dicom-pdf`;\n\nexport { id, SOPClassHandlerId };\n","import React from 'react';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport { id } from './id.js';\n\nconst Component = React.lazy(() => {\n  return import(\n    /* webpackPrefetch: true */ './viewports/OHIFCornerstonePdfViewport'\n  );\n});\n\nconst OHIFCornerstonePdfViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n *\n */\nconst dicomPDFExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n  /**\n   *\n   *\n   * @param {object} [configuration={}]\n   * @param {object|array} [configuration.csToolsConfig] - Passed directly to `initCornerstoneTools`\n   */\n  getViewportModule({ servicesManager, extensionManager }) {\n    const ExtendedOHIFCornerstonePdfViewport = props => {\n      return (\n        <OHIFCornerstonePdfViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          {...props}\n        />\n      );\n    };\n\n    return [\n      { name: 'dicom-pdf', component: ExtendedOHIFCornerstonePdfViewport },\n    ];\n  },\n  // getCommandsModule({ servicesManager }) {\n  //   return {\n  //     definitions: {\n  //       setToolActive: {\n  //         commandFn: () => null,\n  //         storeContexts: [],\n  //         options: {},\n  //       },\n  //     },\n  //     defaultContext: 'ACTIVE_VIEWPORT::PDF',\n  // };\n  // },\n  getSopClassHandlerModule,\n};\n\nexport default dicomPDFExtension;\n"],"names":[],"sourceRoot":""}