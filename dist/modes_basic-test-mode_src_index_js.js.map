{"version":3,"file":"modes_basic-test-mode_src_index_js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AAWA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3NA;AAEA;AAMA;AAQA;AAMA;AAMA;AAKA;AAOA;AAYA;AAiKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AC5NA;AAMA;AAIA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnOA;AAkEA;AA+EA;AAuEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACxNA;AACA;AAIA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAroBA;AAQA;AAYA;AAYA;AACA;AACA;AAQA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["file:////Users/smartxx/xV/DICOM/Viewers/modes/basic-test-mode/src/id.js","file:////Users/smartxx/xV/DICOM/Viewers/modes/basic-test-mode/src/index.js","file:////Users/smartxx/xV/DICOM/Viewers/modes/basic-test-mode/src/initToolGroups.js","file:////Users/smartxx/xV/DICOM/Viewers/modes/basic-test-mode/src/toolbarButtons.js"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { hotkeys } from '@ohif/core';\nimport toolbarButtons from './toolbarButtons.js';\nimport { id } from './id.js';\nimport initToolGroups from './initToolGroups.js';\n\n// Allow this mode by excluding non-imaging modalities such as SR, SEG\n// Also, SM is not a simple imaging modalities, so exclude it.\nconst NON_IMAGE_MODALITIES = ['SM', 'ECG', 'SR', 'SEG'];\n\nconst ohif = {\n  layout: '@ohif/extension-default.layoutTemplateModule.viewerLayout',\n  sopClassHandler: '@ohif/extension-default.sopClassHandlerModule.stack',\n  thumbnailList: '@ohif/extension-default.panelModule.seriesList',\n};\n\nconst tracked = {\n  measurements:\n    '@ohif/extension-measurement-tracking.panelModule.trackedMeasurements',\n  thumbnailList: '@ohif/extension-measurement-tracking.panelModule.seriesList',\n  viewport:\n    '@ohif/extension-measurement-tracking.viewportModule.cornerstone-tracked',\n};\n\nconst dicomsr = {\n  sopClassHandler:\n    '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr',\n  viewport: '@ohif/extension-cornerstone-dicom-sr.viewportModule.dicom-sr',\n};\n\nconst dicomvideo = {\n  sopClassHandler:\n    '@ohif/extension-dicom-video.sopClassHandlerModule.dicom-video',\n  viewport: '@ohif/extension-dicom-video.viewportModule.dicom-video',\n};\n\nconst dicompdf = {\n  sopClassHandler: '@ohif/extension-dicom-pdf.sopClassHandlerModule.dicom-pdf',\n  viewport: '@ohif/extension-dicom-pdf.viewportModule.dicom-pdf',\n};\n\nconst dicomSeg = {\n  sopClassHandler:\n    '@ohif/extension-cornerstone-dicom-seg.sopClassHandlerModule.dicom-seg',\n  viewport: '@ohif/extension-cornerstone-dicom-seg.viewportModule.dicom-seg',\n  panel: '@ohif/extension-cornerstone-dicom-seg.panelModule.panelSegmentation',\n};\n\nconst extensionDependencies = {\n  // Can derive the versions at least process.env.from npm_package_version\n  '@ohif/extension-default': '^3.0.0',\n  '@ohif/extension-cornerstone': '^3.0.0',\n  '@ohif/extension-measurement-tracking': '^3.0.0',\n  '@ohif/extension-cornerstone-dicom-sr': '^3.0.0',\n  '@ohif/extension-cornerstone-dicom-seg': '^3.0.0',\n  '@ohif/extension-dicom-pdf': '^3.0.1',\n  '@ohif/extension-dicom-video': '^3.0.1',\n  '@ohif/extension-test': '^0.0.1',\n};\n\nfunction modeFactory() {\n  return {\n    // TODO: We're using this as a route segment\n    // We should not be.\n    id,\n    routeName: 'basic-test',\n    displayName: 'Basic Test Mode',\n    /**\n     * Lifecycle hooks\n     */\n    onModeEnter: ({ servicesManager, extensionManager, commandsManager }) => {\n      const {\n        measurementService,\n        toolbarService,\n        toolGroupService,\n        customizationService,\n      } = servicesManager.services;\n\n      measurementService.clearMeasurements();\n\n      // Init Default and SR ToolGroups\n      initToolGroups(extensionManager, toolGroupService, commandsManager);\n\n      // init customizations\n      customizationService.addModeCustomizations([\n        '@ohif/extension-test.customizationModule.custom-context-menu',\n      ]);\n\n      let unsubscribe;\n\n      const activateTool = () => {\n        toolbarService.recordInteraction({\n          groupId: 'WindowLevel',\n          itemId: 'WindowLevel',\n          interactionType: 'tool',\n          commands: [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'WindowLevel',\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n        });\n\n        // We don't need to reset the active tool whenever a viewport is getting\n        // added to the toolGroup.\n        unsubscribe();\n      };\n\n      // Since we only have one viewport for the basic cs3d mode and it has\n      // only one hanging protocol, we can just use the first viewport\n      ({ unsubscribe } = toolGroupService.subscribe(\n        toolGroupService.EVENTS.VIEWPORT_ADDED,\n        activateTool\n      ));\n\n      toolbarService.init(extensionManager);\n      toolbarService.addButtons(toolbarButtons);\n      toolbarService.createButtonSection('primary', [\n        'MeasurementTools',\n        'Zoom',\n        'WindowLevel',\n        'Pan',\n        'Capture',\n        'Layout',\n        'MPR',\n        'Crosshairs',\n        'MoreTools',\n      ]);\n    },\n    onModeExit: ({ servicesManager }) => {\n      const {\n        toolGroupService,\n        syncGroupService,\n        segmentationService,\n        cornerstoneViewportService,\n      } = servicesManager.services;\n\n      toolGroupService.destroy();\n      syncGroupService.destroy();\n      segmentationService.destroy();\n      cornerstoneViewportService.destroy();\n    },\n    validationTags: {\n      study: [],\n      series: [],\n    },\n\n    isValidMode: function({ modalities }) {\n      const modalities_list = modalities.split('\\\\');\n\n      // Exclude non-image modalities\n      return !!modalities_list.filter(\n        modality => NON_IMAGE_MODALITIES.indexOf(modality) === -1\n      ).length;\n    },\n    routes: [\n      {\n        path: 'basic-test',\n        /*init: ({ servicesManager, extensionManager }) => {\n          //defaultViewerRouteInit\n        },*/\n        layoutTemplate: () => {\n          return {\n            id: ohif.layout,\n            props: {\n              leftPanels: [tracked.thumbnailList],\n              rightPanels: [dicomSeg.panel, tracked.measurements],\n              // rightPanelDefaultClosed: true, // optional prop to start with collapse panels\n              viewports: [\n                {\n                  namespace: tracked.viewport,\n                  displaySetsToDisplay: [ohif.sopClassHandler],\n                },\n                {\n                  namespace: dicomsr.viewport,\n                  displaySetsToDisplay: [dicomsr.sopClassHandler],\n                },\n                {\n                  namespace: dicomvideo.viewport,\n                  displaySetsToDisplay: [dicomvideo.sopClassHandler],\n                },\n                {\n                  namespace: dicompdf.viewport,\n                  displaySetsToDisplay: [dicompdf.sopClassHandler],\n                },\n                {\n                  namespace: dicomSeg.viewport,\n                  displaySetsToDisplay: [dicomSeg.sopClassHandler],\n                },\n              ],\n            },\n          };\n        },\n      },\n    ],\n    extensions: extensionDependencies,\n    // Default protocol gets self-registered by default in the init\n    hangingProtocol: 'default',\n    // Order is important in sop class handlers when two handlers both use\n    // the same sop class under different situations.  In that case, the more\n    // general handler needs to come last.  For this case, the dicomvideo must\n    // come first to remove video transfer syntax before ohif uses images\n    sopClassHandlers: [\n      dicomvideo.sopClassHandler,\n      dicomSeg.sopClassHandler,\n      ohif.sopClassHandler,\n      dicompdf.sopClassHandler,\n      dicomsr.sopClassHandler,\n    ],\n    hotkeys: {\n      // Don't store the hotkeys for basic-test-mode under the same key\n      // because they get customized by tests\n      name: 'basic-test-hotkeys',\n      hotkeys: [...hotkeys.defaults.hotkeyBindings],\n    },\n  };\n}\n\nconst mode = {\n  id,\n  modeFactory,\n  extensionDependencies,\n};\n\nexport default mode;\n","function initDefaultToolGroup(\n  extensionManager,\n  toolGroupService,\n  commandsManager,\n  toolGroupId\n) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.tools'\n  );\n\n  const { toolNames, Enums } = utilityModule.exports;\n\n  const tools = {\n    active: [\n      {\n        toolName: toolNames.WindowLevel,\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n      {\n        toolName: toolNames.Pan,\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\n      },\n      {\n        toolName: toolNames.Zoom,\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\n      },\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\n    ],\n    passive: [\n      { toolName: toolNames.Length },\n      { toolName: toolNames.ArrowAnnotate },\n      { toolName: toolNames.Bidirectional },\n      { toolName: toolNames.DragProbe },\n      { toolName: toolNames.EllipticalROI },\n      { toolName: toolNames.CircleROI },\n      { toolName: toolNames.RectangleROI },\n      { toolName: toolNames.StackScroll },\n      { toolName: toolNames.Angle },\n      { toolName: toolNames.Magnify },\n      { toolName: toolNames.SegmentationDisplay },\n    ],\n    // enabled\n    // disabled\n    disabled: [{ toolName: toolNames.ReferenceLines }],\n  };\n\n  const toolsConfig = {\n    [toolNames.ArrowAnnotate]: {\n      getTextCallback: (callback, eventDetails) =>\n        commandsManager.runCommand('arrowTextCallback', {\n          callback,\n          eventDetails,\n        }),\n\n      changeTextCallback: (data, eventDetails, callback) =>\n        commandsManager.runCommand('arrowTextCallback', {\n          callback,\n          data,\n          eventDetails,\n        }),\n    },\n  };\n\n  toolGroupService.createToolGroupAndAddTools(toolGroupId, tools, toolsConfig);\n}\n\nfunction initSRToolGroup(extensionManager, toolGroupService, commandsManager) {\n  const SRUtilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone-dicom-sr.utilityModule.tools'\n  );\n\n  const CS3DUtilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.tools'\n  );\n\n  const { toolNames: SRToolNames } = SRUtilityModule.exports;\n  const { toolNames, Enums } = CS3DUtilityModule.exports;\n  const tools = {\n    active: [\n      {\n        toolName: toolNames.WindowLevel,\n        bindings: [\n          {\n            mouseButton: Enums.MouseBindings.Primary,\n          },\n        ],\n      },\n      {\n        toolName: toolNames.Pan,\n        bindings: [\n          {\n            mouseButton: Enums.MouseBindings.Auxiliary,\n          },\n        ],\n      },\n      {\n        toolName: toolNames.Zoom,\n        bindings: [\n          {\n            mouseButton: Enums.MouseBindings.Secondary,\n          },\n        ],\n      },\n      {\n        toolName: toolNames.StackScrollMouseWheel,\n        bindings: [],\n      },\n    ],\n    passive: [\n      { toolName: SRToolNames.SRLength },\n      { toolName: SRToolNames.SRArrowAnnotate },\n      { toolName: SRToolNames.SRBidirectional },\n      { toolName: SRToolNames.SREllipticalROI },\n      { toolName: SRToolNames.SRCircleROI },\n    ],\n    enabled: [\n      {\n        toolName: SRToolNames.DICOMSRDisplay,\n        bindings: [],\n      },\n    ],\n    // disabled\n  };\n\n  const toolsConfig = {\n    [toolNames.ArrowAnnotate]: {\n      getTextCallback: (callback, eventDetails) =>\n        commandsManager.runCommand('arrowTextCallback', {\n          callback,\n          eventDetails,\n        }),\n\n      changeTextCallback: (data, eventDetails, callback) =>\n        commandsManager.runCommand('arrowTextCallback', {\n          callback,\n          data,\n          eventDetails,\n        }),\n    },\n  };\n\n  const toolGroupId = 'SRToolGroup';\n  toolGroupService.createToolGroupAndAddTools(toolGroupId, tools, toolsConfig);\n}\n\nfunction initMPRToolGroup(extensionManager, toolGroupService, commandsManager) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.tools'\n  );\n\n  const { toolNames, Enums } = utilityModule.exports;\n\n  const tools = {\n    active: [\n      {\n        toolName: toolNames.WindowLevel,\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n      {\n        toolName: toolNames.Pan,\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\n      },\n      {\n        toolName: toolNames.Zoom,\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\n      },\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\n    ],\n    passive: [\n      { toolName: toolNames.Length },\n      { toolName: toolNames.ArrowAnnotate },\n      { toolName: toolNames.Bidirectional },\n      { toolName: toolNames.DragProbe },\n      { toolName: toolNames.EllipticalROI },\n      { toolName: toolNames.CircleROI },\n      { toolName: toolNames.RectangleROI },\n      { toolName: toolNames.StackScroll },\n      { toolName: toolNames.Angle },\n      { toolName: toolNames.SegmentationDisplay },\n    ],\n    disabled: [\n      { toolName: toolNames.Crosshairs },\n      { toolName: toolNames.ReferenceLines },\n    ],\n\n    // enabled\n    // disabled\n  };\n\n  const toolsConfig = {\n    [toolNames.Crosshairs]: {\n      viewportIndicators: false,\n      autoPan: {\n        enabled: false,\n        panSize: 10,\n      },\n    },\n    [toolNames.ArrowAnnotate]: {\n      getTextCallback: (callback, eventDetails) =>\n        commandsManager.runCommand('arrowTextCallback', {\n          callback,\n          eventDetails,\n        }),\n\n      changeTextCallback: (data, eventDetails, callback) =>\n        commandsManager.runCommand('arrowTextCallback', {\n          callback,\n          data,\n          eventDetails,\n        }),\n    },\n  };\n\n  toolGroupService.createToolGroupAndAddTools('mpr', tools, toolsConfig);\n}\n\nfunction initToolGroups(extensionManager, toolGroupService, commandsManager) {\n  initDefaultToolGroup(\n    extensionManager,\n    toolGroupService,\n    commandsManager,\n    'default'\n  );\n  initSRToolGroup(extensionManager, toolGroupService, commandsManager);\n  initMPRToolGroup(extensionManager, toolGroupService, commandsManager);\n}\n\nexport default initToolGroups;\n","// TODO: torn, can either bake this here; or have to create a whole new button type\n// Only ways that you can pass in a custom React component for render :l\nimport {\n  // ExpandableToolbarButton,\n  // ListMenu,\n  WindowLevelMenuItem,\n} from '@ohif/ui';\nimport { defaults } from '@ohif/core';\n\nconst { windowLevelPresets } = defaults;\n/**\n *\n * @param {*} type - 'tool' | 'action' | 'toggle'\n * @param {*} id\n * @param {*} icon\n * @param {*} label\n */\nfunction _createButton(type, id, icon, label, commands, tooltip, uiType) {\n  return {\n    id,\n    icon,\n    label,\n    type,\n    commands,\n    tooltip,\n    uiType,\n  };\n}\n\nfunction _createCommands(commandName, toolName, toolGroupIds) {\n  return toolGroupIds.map(toolGroupId => ({\n    /* It's a command that is being run when the button is clicked. */\n    commandName,\n    commandOptions: {\n      toolName,\n      toolGroupId,\n    },\n    context: 'CORNERSTONE',\n  }));\n}\n\nconst _createActionButton = _createButton.bind(null, 'action');\nconst _createToggleButton = _createButton.bind(null, 'toggle');\nconst _createToolButton = _createButton.bind(null, 'tool');\n\n/**\n *\n * @param {*} preset - preset number (from above import)\n * @param {*} title\n * @param {*} subtitle\n */\nfunction _createWwwcPreset(preset, title, subtitle) {\n  return {\n    id: preset.toString(),\n    title,\n    subtitle,\n    type: 'action',\n    commands: [\n      {\n        commandName: 'setWindowLevel',\n        commandOptions: {\n          ...windowLevelPresets[preset],\n        },\n        context: 'CORNERSTONE',\n      },\n    ],\n  };\n}\n\nconst toolbarButtons = [\n  // Measurement\n  {\n    id: 'MeasurementTools',\n    type: 'ohif.splitButton',\n    props: {\n      groupId: 'MeasurementTools',\n      isRadio: true, // ?\n      // Switch?\n      primary: _createToolButton(\n        'Length',\n        'tool-length',\n        'Length',\n        [\n          {\n            commandName: 'setToolActive',\n            commandOptions: {\n              toolName: 'Length',\n            },\n            context: 'CORNERSTONE',\n          },\n          {\n            commandName: 'setToolActive',\n            commandOptions: {\n              toolName: 'SRLength',\n              toolGroupId: 'SRToolGroup',\n            },\n            // we can use the setToolActive command for this from Cornerstone commandsModule\n            context: 'CORNERSTONE',\n          },\n        ],\n        'Length'\n      ),\n      secondary: {\n        icon: 'chevron-down',\n        label: '',\n        isActive: true,\n        tooltip: 'More Measure Tools',\n      },\n      items: [\n        _createToolButton(\n          'Length',\n          'tool-length',\n          'Length',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'Length',\n              },\n              context: 'CORNERSTONE',\n            },\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'SRLength',\n                toolGroupId: 'SRToolGroup',\n              },\n              // we can use the setToolActive command for this from Cornerstone commandsModule\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Length Tool'\n        ),\n        _createToolButton(\n          'Bidirectional',\n          'tool-bidirectional',\n          'Bidirectional',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'Bidirectional',\n              },\n              context: 'CORNERSTONE',\n            },\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'SRBidirectional',\n                toolGroupId: 'SRToolGroup',\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Bidirectional Tool'\n        ),\n        _createToolButton(\n          'ArrowAnnotate',\n          'tool-annotate',\n          'Annotation',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'ArrowAnnotate',\n              },\n              context: 'CORNERSTONE',\n            },\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'SRArrowAnnotate',\n                toolGroupId: 'SRToolGroup',\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Arrow Annotate'\n        ),\n        _createToolButton(\n          'EllipticalROI',\n          'tool-elipse',\n          'Ellipse',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'EllipticalROI',\n              },\n              context: 'CORNERSTONE',\n            },\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'SREllipticalROI',\n                toolGroupId: 'SRToolGroup',\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Ellipse Tool'\n        ),\n        _createToolButton(\n          'CircleROI',\n          'tool-circle',\n          'Circle',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'CircleROI',\n              },\n              context: 'CORNERSTONE',\n            },\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'SRCircleROI',\n                toolGroupId: 'SRToolGroup',\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Circle Tool'\n        ),\n      ],\n    },\n  },\n  // Zoom..\n  {\n    id: 'Zoom',\n    type: 'ohif.radioGroup',\n    props: {\n      type: 'tool',\n      icon: 'tool-zoom',\n      label: 'Zoom',\n      commands: [\n        {\n          commandName: 'setToolActive',\n          commandOptions: {\n            toolName: 'Zoom',\n          },\n          context: 'CORNERSTONE',\n        },\n      ],\n    },\n  },\n  // Window Level + Presets...\n  {\n    id: 'WindowLevel',\n    type: 'ohif.splitButton',\n    props: {\n      groupId: 'WindowLevel',\n      primary: _createToolButton(\n        'WindowLevel',\n        'tool-window-level',\n        'Window Level',\n        [\n          {\n            commandName: 'setToolActive',\n            commandOptions: {\n              toolName: 'WindowLevel',\n            },\n            context: 'CORNERSTONE',\n          },\n        ],\n        'Window Level'\n      ),\n      secondary: {\n        icon: 'chevron-down',\n        label: 'W/L Manual',\n        isActive: true,\n        tooltip: 'W/L Presets',\n      },\n      isAction: true, // ?\n      renderer: WindowLevelMenuItem,\n      items: [\n        _createWwwcPreset(1, 'Soft tissue', '400 / 40'),\n        _createWwwcPreset(2, 'Lung', '1500 / -600'),\n        _createWwwcPreset(3, 'Liver', '150 / 90'),\n        _createWwwcPreset(4, 'Bone', '2500 / 480'),\n        _createWwwcPreset(5, 'Brain', '80 / 40'),\n      ],\n    },\n  },\n  // Pan...\n  {\n    id: 'Pan',\n    type: 'ohif.radioGroup',\n    props: {\n      type: 'tool',\n      icon: 'tool-move',\n      label: 'Pan',\n      commands: [\n        {\n          commandName: 'setToolActive',\n          commandOptions: {\n            toolName: 'Pan',\n          },\n          context: 'CORNERSTONE',\n        },\n      ],\n    },\n  },\n  {\n    id: 'Capture',\n    type: 'ohif.action',\n    props: {\n      icon: 'tool-capture',\n      label: 'Capture',\n      type: 'action',\n      commands: [\n        {\n          commandName: 'showDownloadViewportModal',\n          commandOptions: {},\n          context: 'CORNERSTONE',\n        },\n      ],\n    },\n  },\n  {\n    id: 'Layout',\n    type: 'ohif.splitButton',\n    props: {\n      groupId: 'LayoutTools',\n      isRadio: false,\n      primary: {\n        id: 'Layout',\n        type: 'action',\n        uiType: 'ohif.layoutSelector',\n        icon: 'tool-layout',\n        label: 'Grid Layout',\n        props: {\n          rows: 4,\n          columns: 4,\n          commands: [\n            {\n              commandName: 'setLayout',\n              commandOptions: {},\n              context: 'CORNERSTONE',\n            },\n          ],\n        },\n      },\n      secondary: {\n        icon: 'chevron-down',\n        label: '',\n        isActive: true,\n        tooltip: 'Hanging Protocols',\n      },\n      items: [\n        {\n          id: '2x2',\n          type: 'action',\n          label: '2x2',\n          commands: [\n            {\n              commandName: 'setHangingProtocol',\n              commandOptions: {\n                protocolId: '@ohif/mnGrid',\n                stageId: '2x2',\n              },\n              context: 'DEFAULT',\n            },\n          ],\n        },\n        {\n          id: '3x1',\n          type: 'action',\n          label: '3x1',\n          commands: [\n            {\n              commandName: 'setHangingProtocol',\n              commandOptions: {\n                protocolId: '@ohif/mnGrid',\n                stageId: '3x1',\n              },\n              context: 'DEFAULT',\n            },\n          ],\n        },\n        {\n          id: '2x1',\n          type: 'action',\n          label: '2x1',\n          commands: [\n            {\n              commandName: 'setHangingProtocol',\n              commandOptions: {\n                protocolId: '@ohif/mnGrid',\n                stageId: '2x1',\n              },\n              context: 'DEFAULT',\n            },\n          ],\n        },\n        {\n          id: '1x1',\n          type: 'action',\n          label: '1x1',\n          commands: [\n            {\n              commandName: 'setHangingProtocol',\n              commandOptions: {\n                protocolId: '@ohif/mnGrid',\n                stageId: '1x1',\n              },\n              context: 'DEFAULT',\n            },\n          ],\n        },\n      ],\n    },\n  },\n  {\n    id: 'MPR',\n    type: 'ohif.action',\n    props: {\n      type: 'toggle',\n      icon: 'icon-mpr',\n      label: 'MPR',\n      commands: [\n        {\n          commandName: 'toggleHangingProtocol',\n          commandOptions: {\n            protocolId: 'mpr',\n          },\n          context: 'DEFAULT',\n        },\n      ],\n    },\n  },\n  {\n    id: 'Crosshairs',\n    type: 'ohif.radioGroup',\n    props: {\n      type: 'tool',\n      icon: 'tool-crosshair',\n      label: 'Crosshairs',\n      commands: [\n        {\n          commandName: 'setToolActive',\n          commandOptions: {\n            toolGroupId: 'mpr',\n            toolName: 'Crosshairs',\n          },\n          context: 'CORNERSTONE',\n        },\n      ],\n    },\n  },\n  // More...\n  {\n    id: 'MoreTools',\n    type: 'ohif.splitButton',\n    props: {\n      isRadio: true, // ?\n      groupId: 'MoreTools',\n      primary: _createActionButton(\n        'Reset',\n        'tool-reset',\n        'Reset View',\n        [\n          {\n            commandName: 'resetViewport',\n            commandOptions: {},\n            context: 'CORNERSTONE',\n          },\n        ],\n        'Reset'\n      ),\n      secondary: {\n        icon: 'chevron-down',\n        label: '',\n        isActive: true,\n        tooltip: 'More Tools',\n      },\n      items: [\n        _createActionButton(\n          'Reset',\n          'tool-reset',\n          'Reset View',\n          [\n            {\n              commandName: 'resetViewport',\n              commandOptions: {},\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Reset'\n        ),\n        _createActionButton(\n          'rotate-right',\n          'tool-rotate-right',\n          'Rotate Right',\n          [\n            {\n              commandName: 'rotateViewportCW',\n              commandOptions: {},\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Rotate +90'\n        ),\n        _createActionButton(\n          'flip-horizontal',\n          'tool-flip-horizontal',\n          'Flip Horizontally',\n          [\n            {\n              commandName: 'flipViewportHorizontal',\n              commandOptions: {},\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Flip Horizontal'\n        ),\n        _createToggleButton('StackImageSync', 'link', 'Stack Image Sync', [\n          {\n            commandName: 'toggleStackImageSync',\n            commandOptions: {},\n            context: 'CORNERSTONE',\n          },\n        ]),\n        _createToggleButton(\n          'ReferenceLines',\n          'tool-referenceLines', // change this with the new icon\n          'Reference Lines',\n          [\n            {\n              commandName: 'toggleReferenceLines',\n              commandOptions: {},\n              context: 'CORNERSTONE',\n            },\n          ]\n        ),\n        _createToolButton(\n          'StackScroll',\n          'tool-stack-scroll',\n          'Stack Scroll',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'StackScroll',\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Stack Scroll'\n        ),\n        _createActionButton(\n          'invert',\n          'tool-invert',\n          'Invert',\n          [\n            {\n              commandName: 'invertViewport',\n              commandOptions: {},\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Invert Colors'\n        ),\n        _createToolButton(\n          'Probe',\n          'tool-probe',\n          'Probe',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'DragProbe',\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Probe'\n        ),\n        _createToggleButton(\n          'cine',\n          'tool-cine',\n          'Cine',\n          [\n            {\n              commandName: 'toggleCine',\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Cine'\n        ),\n        _createToolButton(\n          'Angle',\n          'tool-angle',\n          'Angle',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'Angle',\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Angle'\n        ),\n        _createToolButton(\n          'Magnify',\n          'tool-magnify',\n          'Magnify',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'Magnify',\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Magnify'\n        ),\n        _createToolButton(\n          'Rectangle',\n          'tool-rectangle',\n          'Rectangle',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'RectangleROI',\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n          'Rectangle'\n        ),\n        _createActionButton(\n          'TagBrowser',\n          'list-bullets',\n          'Dicom Tag Browser',\n          [\n            {\n              commandName: 'openDICOMTagViewer',\n              commandOptions: {},\n              context: 'DEFAULT',\n            },\n          ],\n          'Dicom Tag Browser'\n        ),\n      ],\n    },\n  },\n];\n\nexport default toolbarButtons;\n"],"names":[],"sourceRoot":""}