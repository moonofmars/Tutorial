{"version":3,"file":"modes_microscopy_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAEA;AAEA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxIA;AAQA;AAIA;AAMA;AAKA;AAUA;AAiGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/KA;AAWA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["file:////Users/smartxx/xV/DICOM/Viewers/modes/microscopy/src/id.js","file:////Users/smartxx/xV/DICOM/Viewers/modes/microscopy/src/index.tsx","file:////Users/smartxx/xV/DICOM/Viewers/modes/microscopy/src/toolbarButtons.js"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { hotkeys } from '@ohif/core';\n\nimport { id } from './id';\nimport toolbarButtons from './toolbarButtons';\n\nconst ohif = {\n  layout: '@ohif/extension-default.layoutTemplateModule.viewerLayout',\n  sopClassHandler: '@ohif/extension-default.sopClassHandlerModule.stack',\n  hangingProtocols: '@ohif/extension-default.hangingProtocolModule.default',\n  leftPanel: '@ohif/extension-default.panelModule.seriesList',\n  rightPanel: '@ohif/extension-default.panelModule.measure',\n};\n\nexport const cornerstone = {\n  viewport: '@ohif/extension-cornerstone.viewportModule.cornerstone',\n};\n\nconst dicomvideo = {\n  sopClassHandler:\n    '@ohif/extension-dicom-video.sopClassHandlerModule.dicom-video',\n  viewport: '@ohif/extension-dicom-video.viewportModule.dicom-video',\n};\n\nconst dicompdf = {\n  sopClassHandler: '@ohif/extension-dicom-pdf.sopClassHandlerModule.dicom-pdf',\n  viewport: '@ohif/extension-dicom-pdf.viewportModule.dicom-pdf',\n};\n\nconst extensionDependencies = {\n  // Can derive the versions at least process.env.from npm_package_version\n  '@ohif/extension-default': '^3.0.0',\n  '@ohif/extension-cornerstone': '^3.0.0',\n  '@ohif/extension-cornerstone-dicom-sr': '^3.0.0',\n  '@ohif/extension-dicom-pdf': '^3.0.1',\n  '@ohif/extension-dicom-video': '^3.0.1',\n  '@ohif/extension-dicom-microscopy': '^3.0.0',\n};\n\nfunction modeFactory() {\n  return {\n    // TODO: We're using this as a route segment\n    // We should not be.\n    id,\n    routeName: 'microscopy',\n    displayName: 'Microscopy',\n\n    /**\n     * Lifecycle hooks\n     */\n    onModeEnter: ({ servicesManager, extensionManager, commandsManager }) => {\n      const { toolbarService } = servicesManager.services;\n\n      toolbarService.init(extensionManager);\n      toolbarService.addButtons(toolbarButtons);\n      toolbarService.createButtonSection('primary', [\n        'MeasurementTools',\n        'dragPan',\n      ]);\n    },\n\n    onModeExit: ({ servicesManager }) => {\n      const { toolbarService } = servicesManager.services;\n\n      toolbarService.reset();\n    },\n\n    validationTags: {\n      study: [],\n      series: [],\n    },\n\n    isValidMode: ({ modalities }) => {\n      const modalities_list = modalities.split('\\\\');\n\n      // Slide Microscopy and ECG modality not supported by basic mode yet\n      return modalities_list.includes('SM');\n    },\n\n    routes: [\n      {\n        path: 'microscopy',\n        /*init: ({ servicesManager, extensionManager }) => {\n          //defaultViewerRouteInit\n        },*/\n        layoutTemplate: ({ location, servicesManager }) => {\n          return {\n            id: ohif.layout,\n            props: {\n              leftPanels: [ohif.leftPanel],\n              leftPanelDefaultClosed: true, // we have problem with rendering thumbnails for microscopy images\n              rightPanelDefaultClosed: true, // we do not have the save microscopy measurements yet\n              rightPanels: [\n                '@ohif/extension-dicom-microscopy.panelModule.measure',\n              ],\n              viewports: [\n                {\n                  namespace:\n                    '@ohif/extension-dicom-microscopy.viewportModule.microscopy-dicom',\n                  displaySetsToDisplay: [\n                    '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler',\n                    '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler',\n                  ],\n                },\n                {\n                  namespace: dicomvideo.viewport,\n                  displaySetsToDisplay: [dicomvideo.sopClassHandler],\n                },\n                {\n                  namespace: dicompdf.viewport,\n                  displaySetsToDisplay: [dicompdf.sopClassHandler],\n                },\n              ],\n            },\n          };\n        },\n      },\n    ],\n    extensions: extensionDependencies,\n    hangingProtocols: [ohif.hangingProtocols],\n    hangingProtocol: ['default'],\n\n    // Order is important in sop class handlers when two handlers both use\n    // the same sop class under different situations.  In that case, the more\n    // general handler needs to come last.  For this case, the dicomvideo must\n    // come first to remove video transfer syntax before ohif uses images\n    sopClassHandlers: [\n      '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler',\n      '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler',\n      dicomvideo.sopClassHandler,\n      dicompdf.sopClassHandler,\n    ],\n    hotkeys: [...hotkeys.defaults.hotkeyBindings],\n  };\n}\n\nconst mode = {\n  id,\n  modeFactory,\n  extensionDependencies,\n};\n\nexport default mode;\n","// TODO: torn, can either bake this here; or have to create a whole new button type\n/**\n *\n * @param {*} type - 'tool' | 'action' | 'toggle'\n * @param {*} id\n * @param {*} icon\n * @param {*} label\n */\nfunction _createButton(type, id, icon, label, commands, tooltip) {\n  return {\n    id,\n    icon,\n    label,\n    type,\n    commands,\n    tooltip,\n  };\n}\n\nconst _createActionButton = _createButton.bind(null, 'action');\nconst _createToggleButton = _createButton.bind(null, 'toggle');\nconst _createToolButton = _createButton.bind(null, 'tool');\n\nconst toolbarButtons = [\n  // Measurement\n  {\n    id: 'MeasurementTools',\n    type: 'ohif.splitButton',\n    props: {\n      groupId: 'MeasurementTools',\n      isRadio: true, // ?\n      // Switch?\n      primary: _createToolButton(\n        'line',\n        'tool-length',\n        'Line',\n        [\n          {\n            commandName: 'setToolActive',\n            commandOptions: {\n              toolName: 'line',\n            },\n            context: 'MICROSCOPY',\n          },\n        ],\n        'Line'\n      ),\n      secondary: {\n        icon: 'chevron-down',\n        label: '',\n        isActive: true,\n        tooltip: 'More Measure Tools',\n      },\n      items: [\n        _createToolButton(\n          'line',\n          'tool-length',\n          'Line',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'line',\n              },\n              context: 'MICROSCOPY',\n            },\n          ],\n          'Line Tool'\n        ),\n        _createToolButton(\n          'point',\n          'tool-point',\n          'Point',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'point',\n              },\n              context: 'MICROSCOPY',\n            },\n          ],\n          'Point Tool'\n        ),\n        _createToolButton(\n          'polygon',\n          'tool-polygon',\n          'Polygon',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'polygon',\n              },\n              context: 'MICROSCOPY',\n            },\n          ],\n          'Polygon Tool'\n        ),\n        _createToolButton(\n          'circle',\n          'tool-circle',\n          'Circle',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'circle',\n              },\n              context: 'MICROSCOPY',\n            },\n          ],\n          'Circle Tool'\n        ),\n        _createToolButton(\n          'box',\n          'tool-rectangle',\n          'Box',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'box',\n              },\n              context: 'MICROSCOPY',\n            },\n          ],\n          'Box Tool'\n        ),\n        _createToolButton(\n          'freehandpolygon',\n          'tool-freehand-polygon',\n          'Freehand Polygon',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'freehandpolygon',\n              },\n              context: 'MICROSCOPY',\n            },\n          ],\n          'Freehand Polygon Tool'\n        ),\n        _createToolButton(\n          'freehandline',\n          'tool-freehand-line',\n          'Freehand Line',\n          [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: 'freehandline',\n              },\n              context: 'MICROSCOPY',\n            },\n          ],\n          'Freehand Line Tool'\n        ),\n      ],\n    },\n  },\n  // Pan...\n  {\n    id: 'dragPan',\n    type: 'ohif.radioGroup',\n    props: {\n      type: 'tool',\n      icon: 'tool-move',\n      label: 'Pan',\n      commands: [\n        {\n          commandName: 'setToolActive',\n          commandOptions: {\n            toolName: 'dragPan',\n          },\n          context: 'MICROSCOPY',\n        },\n      ],\n    },\n  },\n];\n\nexport default toolbarButtons;\n"],"names":[],"sourceRoot":""}