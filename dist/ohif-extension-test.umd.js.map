{"version":3,"file":"dist/ohif-extension-test.umd.js","mappings":"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","sources":["webpack://ohif-extension-test/webpack/universalModuleDefinition","webpack://ohif-extension-test/webpack/bootstrap","webpack://ohif-extension-test/webpack/runtime/define property getters","webpack://ohif-extension-test/webpack/runtime/hasOwnProperty shorthand","webpack://ohif-extension-test/./id.js","webpack://ohif-extension-test/./custom-context-menu/codingValues.ts","webpack://ohif-extension-test/./custom-context-menu/contextMenuCodeItem.ts","webpack://ohif-extension-test/./custom-context-menu/findingsContextMenu.ts","webpack://ohif-extension-test/./custom-attribute/sameAs.ts","webpack://ohif-extension-test/./custom-attribute/numberOfDisplaySets.ts","webpack://ohif-extension-test/./custom-attribute/maxNumImageFrames.ts","webpack://ohif-extension-test/./index.tsx","webpack://ohif-extension-test/./getCustomizationModule.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ohif-extension-test\"] = factory();\n\telse\n\t\troot[\"ohif-extension-test\"] = factory();\n})(globalThis, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","/**\n * Coding values is a map of simple string coding values to a set of\n * attributes associated with the coding value.\n *\n * The simple string is in the format `<codingSchemeDesignator>:<codingValue>`\n * That allows extracting the DICOM attributes from the designator/value, and\n * allows for passing around the simple string.\n * The additional attributes contained in the object include:\n *       * text - this is the coding scheme text display value, and may be language specific\n *       * type - this defines a named type, typically 'site'.  Different names can be used\n *                to allow setting different findingSites values in order to define a hierarchy.\n *       * color - used to apply annotation color\n * It is also possible to define additional attributes here, used by custom\n * extensions.\n *\n * See https://dicom.nema.org/medical/dicom/current/output/html/part16.html\n * for definitions of SCT and other code values.\n */\nconst codingValues = {\n  id: 'codingValues',\n\n  // Sites\n  'SCT:69536005': {\n    text: 'Head',\n    type: 'site',\n  },\n  'SCT:45048000': {\n    text: 'Neck',\n    type: 'site',\n  },\n  'SCT:818981001': {\n    text: 'Abdomen',\n    type: 'site',\n  },\n  'SCT:816092008': {\n    text: 'Pelvis',\n    type: 'site',\n  },\n\n  // Findings\n  'SCT:371861004': {\n    text: 'Mild intimal coronary irregularities',\n    color: 'green',\n  },\n  'SCT:194983005': {\n    text: 'Aortic insufficiency',\n    color: 'darkred',\n  },\n  'SCT:399232001': {\n    text: '2-chamber',\n  },\n  'SCT:103340004': {\n    text: 'SAX',\n  },\n  'SCT:91134007': {\n    text: 'MV',\n  },\n  'SCT:122972007': {\n    text: 'PV',\n  },\n\n  // Orientations\n  'SCT:24422004': {\n    text: 'Axial',\n    color: '#000000',\n    type: 'orientation',\n  },\n  'SCT:81654009': {\n    text: 'Coronal',\n    color: '#000000',\n    type: 'orientation',\n  },\n  'SCT:30730003': {\n    text: 'Sagittal',\n    color: '#000000',\n    type: 'orientation',\n  },\n};\n\nexport default codingValues;\n","const codeMenuItem = {\n  id: '@ohif/contextMenuAnnotationCode',\n\n  /** Applies the code value setup for this item */\n  transform: function (customizationService) {\n    const { code: codeRef } = this;\n    if (!codeRef) throw new Error(`item ${this} has no code ref`);\n    const codingValues = customizationService.get('codingValues');\n    const code = codingValues[codeRef];\n    return {\n      ...this,\n      codeRef,\n      code: { ref: codeRef, ...code },\n      label: code.text,\n      commands: [\n        {\n          commandName: 'updateMeasurement',\n        },\n      ],\n    };\n  },\n};\n\nexport default codeMenuItem;\n","const findingsContextMenu = {\n  id: 'measurementsContextMenu',\n  customizationType: 'ohif.contextMenu',\n  menus: [\n    {\n      id: 'forExistingMeasurement',\n      // selector restricts context menu to when there is nearbyToolData\n      selector: ({ nearbyToolData }) => !!nearbyToolData,\n      items: [\n        {\n          customizationType: 'ohif.contextSubMenu',\n          label: 'Site',\n          actionType: 'ShowSubMenu',\n          subMenu: 'siteSelectionSubMenu',\n        },\n        {\n          customizationType: 'ohif.contextSubMenu',\n          label: 'Finding',\n          actionType: 'ShowSubMenu',\n          subMenu: 'findingSelectionSubMenu',\n        },\n        {\n          // customizationType is implicit here in the configuration setup\n          label: 'Delete Measurement',\n          commands: [\n            {\n              commandName: 'deleteMeasurement',\n            },\n          ],\n        },\n        {\n          label: 'Add Label',\n          commands: [\n            {\n              commandName: 'setMeasurementLabel',\n            },\n          ],\n        },\n\n        // The example below shows how to include a delegating sub-menu,\n        // Only available on the @ohif/mnGrid hanging protocol\n        // To demonstrate, select the 3x1 layout from the protocol menu\n        // and right click on a measurement.\n        {\n          label: 'IncludeSubMenu',\n          selector: ({ protocol }) => protocol?.id === '@ohif/mnGrid',\n          delegating: true,\n          subMenu: 'orientationSelectionSubMenu',\n        },\n      ],\n    },\n\n    {\n      id: 'orientationSelectionSubMenu',\n      selector: ({ nearbyToolData }) => false,\n      items: [\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:24422004',\n        },\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:81654009',\n        },\n      ],\n    },\n\n    {\n      id: 'findingSelectionSubMenu',\n      selector: ({ nearbyToolData }) => false,\n      items: [\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:371861004',\n        },\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:194983005',\n        },\n      ],\n    },\n\n    {\n      id: 'siteSelectionSubMenu',\n      selector: ({ nearbyToolData }) => !!nearbyToolData,\n      items: [\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:69536005',\n        },\n        {\n          customizationType: '@ohif/contextMenuAnnotationCode',\n          code: 'SCT:45048000',\n        },\n      ],\n    },\n  ],\n};\n\nexport default findingsContextMenu;\n","/**\n * This function extracts an attribute from the already matched display sets, and\n * compares it to the attribute in the current display set, and indicates if they match.\n * From 'this', it uses:\n *    `sameAttribute` as the attribute name to look for\n *    `sameDisplaySetId` as the display set id to look for\n * From `options`, it looks for \n */\nexport default function (displaySet, options) {\n  const { sameAttribute, sameDisplaySetId } = this;\n  if( !sameAttribute ) {\n    console.log(\"sameAttribute not defined in\", this);\n    return `sameAttribute not defined in ${this.id}`;\n  }\n  if( !sameDisplaySetId ) {\n    console.log(\"sameDisplaySetId not defined in\", this);\n    return `sameDisplaySetId not defined in ${this.id}`;\n  }\n  const { displaySetMatchDetails, displaySets } = options;\n  const match = displaySetMatchDetails.get(sameDisplaySetId);\n  if( !match ) {\n    console.log(\"No match for display set\", sameDisplaySetId);\n    return false;\n  }\n  const { displaySetInstanceUID } = match;\n  const altDisplaySet = displaySets.find(it => it.displaySetInstanceUID==displaySetInstanceUID);\n  if( !altDisplaySet ) {\n    console.log(\"No display set found with\", displaySetInstanceUID, \"in\", displaySets);\n    return false;\n  }\n  const testValue = altDisplaySet[sameAttribute];\n  return testValue===displaySet[sameAttribute];\n}","export default (study, extraData) => extraData?.displaySets?.length;","export default (study, extraData) => Math.max(...(extraData?.displaySets?.map?.(ds => (ds.numImageFrames ?? 0))) || [0]);","import { Types } from '@ohif/core';\n\nimport { id } from './id';\n\nimport getCustomizationModule from './getCustomizationModule';\n// import {setViewportZoomPan, storeViewportZoomPan } from './custom-viewport/setViewportZoomPan';\nimport sameAs from './custom-attribute/sameAs';\nimport numberOfDisplaySets from './custom-attribute/numberOfDisplaySets';\nimport maxNumImageFrames from './custom-attribute/maxNumImageFrames';\n\n/**\n * The test extension provides additional behaviour for testing various\n * customizations and settings for OHIF.\n */\nconst testExtension: Types.Extensions.Extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n\n  /** Register additional behaviour:\n   *   * HP custom attribute seriesDescriptions to retrieve an array of all series descriptions\n   *   * HP custom attribute numberOfDisplaySets to retrieve the number of display sets\n   *   * HP custom attribute numberOfDisplaySetsWithImages to retrieve the number of display sets containing images\n   *   * HP custom attribute to return a boolean true, when the attribute sameAttribute has the same\n   *     value as another series description in an already matched display set selector named with the value\n   *     in `sameDisplaySetId`\n   */\n  preRegistration: ({ servicesManager }: Types.Extensions.ExtensionParams) => {\n    const { hangingProtocolService } = servicesManager.services;\n    hangingProtocolService.addCustomAttribute(\n      'numberOfDisplaySets',\n      'Number of displays sets',\n      numberOfDisplaySets\n    );\n    hangingProtocolService.addCustomAttribute(\n      'maxNumImageFrames',\n      'Maximum of number of image frames',\n      maxNumImageFrames\n    );\n    hangingProtocolService.addCustomAttribute(\n      'sameAs',\n      'Match an attribute in an existing display set',\n      sameAs\n    );\n  },\n\n  /** Registers some customizations */\n  getCustomizationModule,\n};\n\nexport default testExtension;\n","import {\n  codingValues,\n  contextMenuCodeItem,\n  findingsContextMenu,\n} from './custom-context-menu';\n\nexport default function getCustomizationModule() {\n  return [\n    {\n      name: 'custom-context-menu',\n      value: [codingValues, contextMenuCodeItem, findingsContextMenu],\n    },\n  ];\n}\n"],"names":["root","factory","exports","module","define","amd","globalThis","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","id","packageJson","text","type","color","transform","customizationService","code","codeRef","this","Error","ref","label","commands","commandName","customizationType","menus","selector","_ref","nearbyToolData","items","actionType","subMenu","_ref2","protocol","delegating","_ref3","_ref4","_ref5","displaySet","options","sameAttribute","sameDisplaySetId","console","log","displaySetMatchDetails","displaySets","match","displaySetInstanceUID","altDisplaySet","find","it","study","extraData","length","Math","max","map","ds","numImageFrames","preRegistration","servicesManager","hangingProtocolService","services","addCustomAttribute","numberOfDisplaySets","maxNumImageFrames","sameAs","getCustomizationModule","name","value","codingValues","contextMenuCodeItem","findingsContextMenu"],"sourceRoot":""}