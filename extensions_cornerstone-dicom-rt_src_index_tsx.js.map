{"version":3,"file":"extensions_cornerstone-dicom-rt_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzMA;AAEA;AAEA;AA6FA;AA2CA;AAmCA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AC9LA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAAA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvDA;AAMA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AAEA;AAKA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAGA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;;AAIA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AAEA;AACA;AAKA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzUA;AAAA;AACA;AAEA;AAyGA;AA0HA;AAWA;AASA;AAqCA;AAaA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["file:////Users/smartxx/xV/DICOM/Viewers/extensions/cornerstone-dicom-rt/src/getSopClassHandlerModule.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/cornerstone-dicom-rt/src/id.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/cornerstone-dicom-rt/src/index.tsx","file:////Users/smartxx/xV/DICOM/Viewers/extensions/cornerstone-dicom-rt/src/loadRTStruct.js"],"sourcesContent":["import { utils } from '@ohif/core';\n\nimport { SOPClassHandlerId } from './id';\nimport loadRTStruct from './loadRTStruct';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.481.3'];\n\nlet loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager,\n  extensionManager\n) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'RTSTRUCT',\n    loading: false,\n    isReconstructable: false, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    structureSet: null,\n    sopClassUids,\n    instance,\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  let referencedSeriesSequence = instance.ReferencedSeriesSequence;\n  if (\n    instance.ReferencedFrameOfReferenceSequence &&\n    !instance.ReferencedSeriesSequence\n  ) {\n    instance.ReferencedSeriesSequence = _deriveReferencedSeriesSequenceFromFrameOfReferenceSequence(\n      instance.ReferencedFrameOfReferenceSequence\n    );\n    referencedSeriesSequence = instance.ReferencedSeriesSequence;\n  }\n\n  if (!referencedSeriesSequence) {\n    throw new Error('ReferencedSeriesSequence is missing for the RTSTRUCT');\n  }\n\n  const referencedSeries = referencedSeriesSequence[0];\n\n  displaySet.referencedImages =\n    instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  displaySet.getReferenceDisplaySet = () => {\n    const { DisplaySetService } = servicesManager.services;\n    const referencedDisplaySets = DisplaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced DisplaySet is missing for the RT');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID =\n      referencedDisplaySet.displaySetInstanceUID;\n\n    return referencedDisplaySet;\n  };\n\n  displaySet.load = ({ headers }) =>\n    _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(rtDisplaySet, servicesManager, extensionManager, headers) {\n  const { SOPInstanceUID } = rtDisplaySet;\n  const { segmentationService } = servicesManager.services;\n  if (\n    (rtDisplaySet.loading || rtDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExistsInCache(rtDisplaySet, segmentationService)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  rtDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (!rtDisplaySet.structureSet) {\n      const structureSet = await loadRTStruct(\n        extensionManager,\n        rtDisplaySet,\n        rtDisplaySet.getReferenceDisplaySet(),\n        headers\n      );\n\n      rtDisplaySet.structureSet = structureSet;\n    }\n\n    const suppressEvents = true;\n    segmentationService\n      .createSegmentationForRTDisplaySet(rtDisplaySet, null, suppressEvents)\n      .then(() => {\n        rtDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        rtDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nfunction _deriveReferencedSeriesSequenceFromFrameOfReferenceSequence(\n  ReferencedFrameOfReferenceSequence\n) {\n  const ReferencedSeriesSequence = [];\n\n  ReferencedFrameOfReferenceSequence.forEach(referencedFrameOfReference => {\n    const { RTReferencedStudySequence } = referencedFrameOfReference;\n\n    RTReferencedStudySequence.forEach(rtReferencedStudy => {\n      const { RTReferencedSeriesSequence } = rtReferencedStudy;\n\n      RTReferencedSeriesSequence.forEach(rtReferencedSeries => {\n        const ReferencedInstanceSequence = [];\n        const { ContourImageSequence, SeriesInstanceUID } = rtReferencedSeries;\n\n        ContourImageSequence.forEach(contourImage => {\n          ReferencedInstanceSequence.push({\n            ReferencedSOPInstanceUID: contourImage.ReferencedSOPInstanceUID,\n            ReferencedSOPClassUID: contourImage.ReferencedSOPClassUID,\n          });\n        });\n\n        const referencedSeries = {\n          SeriesInstanceUID,\n          ReferencedInstanceSequence,\n        };\n\n        ReferencedSeriesSequence.push(referencedSeries);\n      });\n    });\n  });\n\n  return ReferencedSeriesSequence;\n}\n\nfunction _segmentationExistsInCache(rtDisplaySet, segmentationService) {\n  // Todo: fix this\n  return false;\n  // This should be abstracted with the CornerstoneCacheService\n  const rtContourId = rtDisplaySet.displaySetInstanceUID;\n  const contour = segmentationService.getContour(rtContourId);\n\n  return contour !== undefined;\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  return [\n    {\n      name: 'dicom-rt',\n      sopClassUids,\n      getDisplaySetsFromSeries: instances => {\n        return _getDisplaySetsFromSeries(\n          instances,\n          servicesManager,\n          extensionManager\n        );\n      },\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-rt';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { id } from './id';\nimport React from 'react';\nimport { Types } from '@ohif/core';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\n\nconst Component = React.lazy(() => {\n  return import(\n    /* webpackPrefetch: true */ './viewports/OHIFCornerstoneRTViewport'\n  );\n});\n\nconst OHIFCornerstoneRTViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension: Types.Extensions.Extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getViewportModule({\n    servicesManager,\n    extensionManager,\n  }: Types.Extensions.ExtensionParams) {\n    const ExtendedOHIFCornerstoneRTViewport = props => {\n      return (\n        <OHIFCornerstoneRTViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-rt', component: ExtendedOHIFCornerstoneRTViewport }];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n};\n\nexport default extension;\n","import dcmjs from 'dcmjs';\nconst { DicomMessage, DicomMetaDictionary } = dcmjs.data;\nconst dicomlab2RGB = dcmjs.data.Colors.dicomlab2RGB;\n\nasync function checkAndLoadContourData(instance, datasource) {\n  if (!instance || !instance.ROIContourSequence) {\n    return Promise.reject('Invalid instance object or ROIContourSequence');\n  }\n\n  const promisesMap = new Map();\n\n  for (const ROIContour of instance.ROIContourSequence) {\n    const referencedROINumber = ROIContour.ReferencedROINumber;\n    if (!ROIContour || !ROIContour.ContourSequence) {\n      promisesMap.set(referencedROINumber, [Promise.resolve([])]);\n      continue;\n    }\n\n    for (const Contour of ROIContour.ContourSequence) {\n      if (!Contour || !Contour.ContourData) {\n        return Promise.reject('Invalid Contour or ContourData');\n      }\n\n      const contourData = Contour.ContourData;\n\n      if (Array.isArray(contourData)) {\n        promisesMap.has(referencedROINumber)\n          ? promisesMap\n              .get(referencedROINumber)\n              .push(Promise.resolve(contourData))\n          : promisesMap.set(referencedROINumber, [\n              Promise.resolve(contourData),\n            ]);\n      } else if (contourData && contourData.BulkDataURI) {\n        const bulkDataURI = contourData.BulkDataURI;\n\n        if (\n          !datasource ||\n          !datasource.retrieve ||\n          !datasource.retrieve.bulkDataURI\n        ) {\n          return Promise.reject(\n            'Invalid datasource object or retrieve function'\n          );\n        }\n\n        const bulkDataPromise = datasource.retrieve.bulkDataURI({\n          BulkDataURI: bulkDataURI,\n          StudyInstanceUID: instance.StudyInstanceUID,\n          SeriesInstanceUID: instance.SeriesInstanceUID,\n          SOPInstanceUID: instance.SOPInstanceUID,\n        });\n\n        promisesMap.has(referencedROINumber)\n          ? promisesMap.get(referencedROINumber).push(bulkDataPromise)\n          : promisesMap.set(referencedROINumber, [bulkDataPromise]);\n      } else {\n        return Promise.reject(`Invalid ContourData: ${contourData}`);\n      }\n    }\n  }\n\n  const resolvedPromisesMap = new Map();\n  for (const [key, promiseArray] of promisesMap.entries()) {\n    resolvedPromisesMap.set(key, await Promise.allSettled(promiseArray));\n  }\n\n  instance.ROIContourSequence.forEach(ROIContour => {\n    try {\n      const referencedROINumber = ROIContour.ReferencedROINumber;\n      const resolvedPromises = resolvedPromisesMap.get(referencedROINumber);\n\n      if (ROIContour.ContourSequence) {\n        ROIContour.ContourSequence.forEach((Contour, index) => {\n          const promise = resolvedPromises[index];\n          if (promise.status === 'fulfilled') {\n            if (\n              Array.isArray(promise.value) &&\n              promise.value.every(Number.isFinite)\n            ) {\n              // If promise.value is already an array of numbers, use it directly\n              Contour.ContourData = promise.value;\n            } else {\n              // If the resolved promise value is a byte array (Blob), it needs to be decoded\n              const uint8Array = new Uint8Array(promise.value);\n              const textDecoder = new TextDecoder();\n              const dataUint8Array = textDecoder.decode(uint8Array);\n              if (\n                typeof dataUint8Array === 'string' &&\n                dataUint8Array.includes('\\\\')\n              ) {\n                Contour.ContourData = dataUint8Array\n                  .split('\\\\')\n                  .map(parseFloat);\n              } else {\n                Contour.ContourData = [];\n              }\n            }\n          } else {\n            console.error(promise.reason);\n          }\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  });\n}\n\nexport default async function loadRTStruct(\n  extensionManager,\n  rtStructDisplaySet,\n  referencedDisplaySet,\n  headers\n) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n  const dataSource = extensionManager.getActiveDataSource()[0];\n  const { bulkDataURI } = dataSource.getConfig?.() || {};\n\n  const { dicomLoaderService } = utilityModule.exports;\n  const imageIdSopInstanceUidPairs = _getImageIdSopInstanceUidPairsForDisplaySet(\n    referencedDisplaySet\n  );\n\n  // Set here is loading is asynchronous.\n  // If this function throws its set back to false.\n  rtStructDisplaySet.isLoaded = true;\n  let instance = rtStructDisplaySet.instance;\n\n  if (!bulkDataURI || !bulkDataURI.enabled) {\n    const segArrayBuffer = await dicomLoaderService.findDicomDataPromise(\n      rtStructDisplaySet,\n      null,\n      headers\n    );\n\n    const dicomData = DicomMessage.readFile(segArrayBuffer);\n    const rtStructDataset = DicomMetaDictionary.naturalizeDataset(\n      dicomData.dict\n    );\n    rtStructDataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n    instance = rtStructDataset;\n  } else {\n    await checkAndLoadContourData(instance, dataSource);\n  }\n\n  const {\n    StructureSetROISequence,\n    ROIContourSequence,\n    RTROIObservationsSequence,\n  } = instance;\n\n  // Define our structure set entry and add it to the rtstruct module state.\n  const structureSet = {\n    StructureSetLabel: instance.StructureSetLabel,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    ROIContours: [],\n    visible: true,\n  };\n\n  for (let i = 0; i < ROIContourSequence.length; i++) {\n    const ROIContour = ROIContourSequence[i];\n    const { ContourSequence } = ROIContour;\n\n    if (!ContourSequence) {\n      continue;\n    }\n\n    const isSupported = false;\n\n    const ContourSequenceArray = _toArray(ContourSequence);\n\n    const contourPoints = [];\n    for (let c = 0; c < ContourSequenceArray.length; c++) {\n      const {\n        ContourImageSequence,\n        ContourData,\n        NumberOfContourPoints,\n        ContourGeometricType,\n      } = ContourSequenceArray[c];\n\n      const sopInstanceUID = ContourImageSequence.ReferencedSOPInstanceUID;\n      const imageId = _getImageId(imageIdSopInstanceUidPairs, sopInstanceUID);\n\n      if (!imageId) {\n        continue;\n      }\n      let isSupported = false;\n\n      const points = [];\n      for (let p = 0; p < NumberOfContourPoints * 3; p += 3) {\n        points.push({\n          x: ContourData[p],\n          y: ContourData[p + 1],\n          z: ContourData[p + 2],\n        });\n      }\n\n      switch (ContourGeometricType) {\n        case 'CLOSED_PLANAR':\n        case 'OPEN_PLANAR':\n        case 'POINT':\n          isSupported = true;\n\n          break;\n        default:\n          continue;\n      }\n\n      contourPoints.push({\n        numberOfPoints: NumberOfContourPoints,\n        points,\n        type: ContourGeometricType,\n        isSupported,\n      });\n    }\n\n    _setROIContourMetadata(\n      structureSet,\n      StructureSetROISequence,\n      RTROIObservationsSequence,\n      ROIContour,\n      contourPoints,\n      isSupported\n    );\n  }\n  return structureSet;\n}\n\nconst _getImageId = (imageIdSopInstanceUidPairs, sopInstanceUID) => {\n  const imageIdSopInstanceUidPairsEntry = imageIdSopInstanceUidPairs.find(\n    imageIdSopInstanceUidPairsEntry =>\n      imageIdSopInstanceUidPairsEntry.sopInstanceUID === sopInstanceUID\n  );\n\n  return imageIdSopInstanceUidPairsEntry\n    ? imageIdSopInstanceUidPairsEntry.imageId\n    : null;\n};\n\nfunction _getImageIdSopInstanceUidPairsForDisplaySet(referencedDisplaySet) {\n  return referencedDisplaySet.images.map(image => {\n    return {\n      imageId: image.imageId,\n      sopInstanceUID: image.SOPInstanceUID,\n    };\n  });\n}\n\nfunction _setROIContourMetadata(\n  structureSet,\n  StructureSetROISequence,\n  RTROIObservationsSequence,\n  ROIContour,\n  contourPoints,\n  isSupported\n) {\n  const StructureSetROI = StructureSetROISequence.find(\n    structureSetROI =>\n      structureSetROI.ROINumber === ROIContour.ReferencedROINumber\n  );\n\n  const ROIContourData = {\n    ROINumber: StructureSetROI.ROINumber,\n    ROIName: StructureSetROI.ROIName,\n    ROIGenerationAlgorithm: StructureSetROI.ROIGenerationAlgorithm,\n    ROIDescription: StructureSetROI.ROIDescription,\n    isSupported,\n    contourPoints,\n    visible: true,\n  };\n\n  _setROIContourDataColor(ROIContour, ROIContourData);\n\n  if (RTROIObservationsSequence) {\n    // If present, add additional RTROIObservations metadata.\n    _setROIContourRTROIObservations(\n      ROIContourData,\n      RTROIObservationsSequence,\n      ROIContour.ReferencedROINumber\n    );\n  }\n\n  structureSet.ROIContours.push(ROIContourData);\n}\n\nfunction _setROIContourDataColor(ROIContour, ROIContourData) {\n  let { ROIDisplayColor, RecommendedDisplayCIELabValue } = ROIContour;\n\n  if (!ROIDisplayColor && RecommendedDisplayCIELabValue) {\n    // If ROIDisplayColor is absent, try using the RecommendedDisplayCIELabValue color.\n    ROIDisplayColor = dicomlab2RGB(RecommendedDisplayCIELabValue);\n  }\n\n  if (ROIDisplayColor) {\n    ROIContourData.colorArray = [...ROIDisplayColor];\n  }\n}\n\nfunction _setROIContourRTROIObservations(\n  ROIContourData,\n  RTROIObservationsSequence,\n  ROINumber\n) {\n  const RTROIObservations = RTROIObservationsSequence.find(\n    RTROIObservations => RTROIObservations.ReferencedROINumber === ROINumber\n  );\n\n  if (RTROIObservations) {\n    // Deep copy so we don't keep the reference to the dcmjs dataset entry.\n    const {\n      ObservationNumber,\n      ROIObservationDescription,\n      RTROIInterpretedType,\n      ROIInterpreter,\n    } = RTROIObservations;\n\n    ROIContourData.RTROIObservations = {\n      ObservationNumber,\n      ROIObservationDescription,\n      RTROIInterpretedType,\n      ROIInterpreter,\n    };\n  }\n}\n\nfunction _toArray(objOrArray) {\n  return Array.isArray(objOrArray) ? objOrArray : [objOrArray];\n}\n"],"names":[],"sourceRoot":""}