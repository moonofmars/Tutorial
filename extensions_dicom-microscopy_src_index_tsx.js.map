{"version":3,"file":"extensions_dicom-microscopy_src_index_tsx.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AAEA;AAMA;AAOA;AAMA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;;AAEA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAFA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxIA;AAEA;AAIA;AAGA;AAyBA;AAqFA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AC7HA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AAIA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAFA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjIA;AAEA;AAIA;AAGA;AAuGA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClHA;AAEA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAOA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;AAEA;AACA;AAEA;AAAA;AAAA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAMA;AALA;AACA;AAIA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAwBA;AAAA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3YA;AACA;AAEA;AAaA;AAuCA;AAgVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACvZA;AACA;AAEA;AAQA;AAPA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhMA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAQA;AAPA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtCA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAJA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAHA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AA3FA;AA2FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1GA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBA;AACA;AAAA;AATA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAQA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAKA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlmBA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA2lBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlnBA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AAEA;AAIA;AAIA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApeA;AA6BA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC/CA;;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAMA;AAFA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/LA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAJA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7DA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAFA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAIA;AAIA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzMA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACXA;;AAEA;AACA;;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxGA;AAkCA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAEA;AAIA;AAIA;AACA;AAKA;AACA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AAEA;AACA;AAEA;;AAGA;AACA;AAKA;AAEA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAMA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAMA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzMA;AAIA;AA2CA;AAyIA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC7LA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/CA;AAIA;AAIA;AAKA;AAKA;AAYA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;ACAA","sources":["file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/DicomMicroscopySRSopClassHandler.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/DicomMicroscopySopClassHandler.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/components/MicroscopyPanel/MicroscopyPanel.tsx","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/getCommandsModule.ts","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/getPanelModule.tsx","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/id.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/index.tsx","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/services/MicroscopyService.ts","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/tools/viewerManager.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/DEVICE_OBSERVER_UID.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/RoiAnnotation.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/areaOfPolygon.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/callInputDialog.tsx","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/constructSR.ts","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/coordinateFormatScoord3d2Geometry.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/dcmCodeValues.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/getSourceDisplaySet.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/loadSR.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/saveByteArray.ts","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/styles.js","file:////Users/smartxx/xV/DICOM/Viewers/extensions/dicom-microscopy/src/utils/toArray.js","file:///ignored%7C/Users/smartxx/xV/DICOM/Viewers/node_modules/seedrandom%7Ccrypto"],"sourcesContent":["import OHIF, { DicomMetadataStore } from '@ohif/core';\nimport loadSR from './utils/loadSR';\nimport toArray from './utils/toArray';\nimport DCM_CODE_VALUES from './utils/dcmCodeValues';\nimport getSourceDisplaySet from './utils/getSourceDisplaySet';\n\nconst { utils } = OHIF;\n\nconst SOP_CLASS_UIDS = {\n  COMPREHENSIVE_3D_SR: '1.2.840.10008.5.1.4.1.1.88.34',\n};\n\nconst SOPClassHandlerId =\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler';\n\nfunction _getReferencedFrameOfReferenceUID(naturalizedDataset) {\n  const { ContentSequence } = naturalizedDataset;\n\n  const imagingMeasurementsContentItem = ContentSequence.find(\n    ci =>\n      ci.ConceptNameCodeSequence.CodeValue ===\n      DCM_CODE_VALUES.IMAGING_MEASUREMENTS\n  );\n\n  const firstMeasurementGroupContentItem = toArray(\n    imagingMeasurementsContentItem.ContentSequence\n  ).find(\n    ci =>\n      ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP\n  );\n\n  const imageRegionContentItem = toArray(\n    firstMeasurementGroupContentItem.ContentSequence\n  ).find(\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\n  );\n\n  return imageRegionContentItem.ReferencedFrameOfReferenceUID;\n}\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager,\n  extensionManager\n) {\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  const { displaySetService, microscopyService } = servicesManager.services;\n\n  const instance = instances[0];\n\n  // TODO ! Consumption of DICOMMicroscopySRSOPClassHandler to a derived dataset or normal dataset?\n  // TOOD -> Easy to swap this to a \"non-derived\" displaySet, but unfortunately need to put it in a different extension.\n  const naturalizedDataset = DicomMetadataStore.getSeries(\n    instance.StudyInstanceUID,\n    instance.SeriesInstanceUID\n  ).instances[0];\n  const ReferencedFrameOfReferenceUID = _getReferencedFrameOfReferenceUID(\n    naturalizedDataset\n  );\n\n  const {\n    FrameOfReferenceUID,\n    SeriesDescription,\n    ContentDate,\n    ContentTime,\n    SeriesNumber,\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SOPClassUID,\n  } = instance;\n\n  const displaySet = {\n    plugin: 'microscopy',\n    Modality: 'SR',\n    altImageText: 'Microscopy SR',\n    displaySetInstanceUID: utils.guid(),\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    ReferencedFrameOfReferenceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    SeriesDescription,\n    // Map the content date/time to the series date/time, these are only used for filtering.\n    SeriesDate: ContentDate,\n    SeriesTime: ContentTime,\n    SeriesNumber,\n    instance,\n    metadata: naturalizedDataset,\n    isDerived: true,\n    isLoading: false,\n    isLoaded: false,\n    loadError: false,\n  };\n\n  displaySet.load = function(referencedDisplaySet) {\n    return loadSR(microscopyService, displaySet, referencedDisplaySet).catch(\n      error => {\n        displaySet.isLoaded = false;\n        displaySet.loadError = true;\n        throw new Error(error);\n      }\n    );\n  };\n\n  displaySet.getSourceDisplaySet = function() {\n    let allDisplaySets = [];\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\n    studyMetadata.series.forEach(series => {\n      const displaySets = displaySetService.getDisplaySetsForSeries(\n        series.SeriesInstanceUID\n      );\n      allDisplaySets = allDisplaySets.concat(displaySets);\n    });\n    return getSourceDisplaySet(allDisplaySets, displaySet);\n  };\n\n  return [displaySet];\n}\n\nexport default function getDicomMicroscopySRSopClassHandler({\n  servicesManager,\n  extensionManager,\n}) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(\n      instances,\n      servicesManager,\n      extensionManager\n    );\n  };\n\n  return {\n    name: 'DicomMicroscopySRSopClassHandler',\n    sopClassUids: [SOP_CLASS_UIDS.COMPREHENSIVE_3D_SR],\n    getDisplaySetsFromSeries,\n  };\n}\n","import OHIF from '@ohif/core';\n\nconst { utils } = OHIF;\n\nconst SOP_CLASS_UIDS = {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.6',\n};\n\nconst SOPClassHandlerId =\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler';\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager,\n  extensionManager\n) {\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  const instance = instances[0];\n\n  let singleFrameInstance = instance;\n  let currentFrames = +singleFrameInstance.NumberOfFrames || 1;\n  for (const instanceI of instances) {\n    const framesI = +instanceI.NumberOfFrames || 1;\n    if (framesI < currentFrames) {\n      singleFrameInstance = instanceI;\n      currentFrames = framesI;\n    }\n  }\n  let imageIdForThumbnail = null;\n  if (singleFrameInstance) {\n    if (currentFrames == 1) {\n      // Not all DICOM server implementations support thumbnail service,\n      // So if we have a single-frame image, we will prefer it.\n      imageIdForThumbnail = singleFrameInstance.imageId;\n    }\n    if (!imageIdForThumbnail) {\n      // use the thumbnail service provided by DICOM server\n      const dataSource = extensionManager.getActiveDataSource()[0];\n      imageIdForThumbnail = dataSource.getImageIdsForInstance({\n        instance: singleFrameInstance,\n        thumbnail: true,\n      });\n    }\n  }\n\n  const {\n    FrameOfReferenceUID,\n    SeriesDescription,\n    ContentDate,\n    ContentTime,\n    SeriesNumber,\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SOPClassUID,\n  } = instance;\n\n  instances = instances.map(inst => {\n    // NOTE: According to DICOM standard a series should have a FrameOfReferenceUID\n    // When the Microscopy file was built by certain tool from multiple image files,\n    // each instance's FrameOfReferenceUID is sometimes different.\n    // Even though this means the file was not well formatted DICOM VL Whole Slide Microscopy Image,\n    // the case is so often, so let's override this value manually here.\n    //\n    // https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.4.html#sect_C.7.4.1.1.1\n\n    inst.FrameOfReferenceUID = instance.FrameOfReferenceUID;\n\n    return inst;\n  });\n\n  const othersFrameOfReferenceUID = instances\n    .filter(v => v)\n    .map(inst => inst.FrameOfReferenceUID)\n    .filter((value, index, array) => array.indexOf(value) === index);\n  if (othersFrameOfReferenceUID.length > 1) {\n    console.warn(\n      'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\n      othersFrameOfReferenceUID\n    );\n  }\n\n  const displaySet = {\n    plugin: 'microscopy',\n    Modality: 'SM',\n    altImageText: 'Microscopy',\n    displaySetInstanceUID: utils.guid(),\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    FrameOfReferenceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    SeriesDescription: SeriesDescription || 'Microscopy Data',\n    // Map ContentDate/Time to SeriesTime for series list sorting.\n    SeriesDate: ContentDate,\n    SeriesTime: ContentTime,\n    SeriesNumber,\n    firstInstance: singleFrameInstance, // top level instance in the image Pyramid\n    instance,\n    numImageFrames: 0,\n    numInstances: 1,\n    imageIdForThumbnail, // thumbnail image\n    others: instances, // all other level instances in the image Pyramid\n    othersFrameOfReferenceUID,\n  };\n\n  return [displaySet];\n}\n\nexport default function getDicomMicroscopySopClassHandler({\n  servicesManager,\n  extensionManager,\n}) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(\n      instances,\n      servicesManager,\n      extensionManager\n    );\n  };\n\n  return {\n    name: 'DicomMicroscopySopClassHandler',\n    sopClassUids: [SOP_CLASS_UIDS.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE],\n    getDisplaySetsFromSeries,\n  };\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ServicesManager,\n  ExtensionManager,\n  CommandsManager,\n  DicomMetadataStore,\n} from '@ohif/core';\nimport { MeasurementTable, Icon, ButtonGroup, Button } from '@ohif/ui';\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { EVENTS as MicroscopyEvents } from '../../services/MicroscopyService';\nimport dcmjs from 'dcmjs';\nimport styles from '../../utils/styles';\nimport callInputDialog from '../../utils/callInputDialog';\nimport constructSR from '../../utils/constructSR';\nimport { saveByteArray } from '../../utils/saveByteArray';\n\nlet saving = false;\nconst { datasetToBuffer } = dcmjs.data;\n\nconst formatArea = area => {\n  let mult = 1;\n  let unit = 'mm';\n  if (area > 1000000) {\n    unit = 'm';\n    mult = 1 / 1000000;\n  } else if (area < 1) {\n    unit = 'μm';\n    mult = 1000000;\n  }\n  return `${(area * mult).toFixed(2)} ${unit}²`;\n};\n\nconst formatLength = (length, unit) => {\n  let mult = 1;\n  if (unit == 'km' || (!unit && length > 1000000)) {\n    unit = 'km';\n    mult = 1 / 1000000;\n  } else if (unit == 'm' || (!unit && length > 1000)) {\n    unit = 'm';\n    mult = 1 / 1000;\n  } else if (unit == 'μm' || (!unit && length < 1)) {\n    unit = 'μm';\n    mult = 1000;\n  } else if (unit && unit != 'mm') {\n    throw new Error(`Unknown length unit ${unit}`);\n  } else {\n    unit = 'mm';\n  }\n  return `${(length * mult).toFixed(2)} ${unit}`;\n};\n\ninterface IMicroscopyPanelProps extends WithTranslation {\n  viewports: PropTypes.array;\n  activeViewportIndex: PropTypes.number;\n\n  //\n  onSaveComplete?: PropTypes.func; // callback when successfully saved annotations\n  onRejectComplete?: PropTypes.func; // callback when rejected annotations\n\n  //\n  servicesManager: ServicesManager;\n  extensionManager: ExtensionManager;\n  commandsManager: CommandsManager;\n}\n\n/**\n * Microscopy Measurements Panel Component\n *\n * @param props\n * @returns\n */\nfunction MicroscopyPanel(props: IMicroscopyPanelProps) {\n  const { microscopyService } = props.servicesManager.services;\n\n  const [studyInstanceUID, setStudyInstanceUID] = useState(\n    null as string | null\n  );\n  const [roiAnnotations, setRoiAnnotations] = useState([] as any[]);\n  const [selectedAnnotation, setSelectedAnnotation] = useState(null as any);\n  const { servicesManager, extensionManager } = props;\n\n  const { uiDialogService, displaySetService } = servicesManager.services;\n\n  useEffect(() => {\n    const viewport = props.viewports[props.activeViewportIndex];\n    if (viewport.displaySetInstanceUIDs[0]) {\n      const displaySet = displaySetService.getDisplaySetByUID(\n        viewport.displaySetInstanceUIDs[0]\n      );\n      if (displaySet) {\n        setStudyInstanceUID(displaySet.StudyInstanceUID);\n      }\n    }\n  }, [props.viewports, props.activeViewportIndex]);\n\n  useEffect(() => {\n    const onAnnotationUpdated = () => {\n      const roiAnnotations = microscopyService.getAnnotationsForStudy(\n        studyInstanceUID\n      );\n      setRoiAnnotations(roiAnnotations);\n    };\n\n    const onAnnotationSelected = () => {\n      const selectedAnnotation = microscopyService.getSelectedAnnotation();\n      setSelectedAnnotation(selectedAnnotation);\n    };\n\n    const onAnnotationRemoved = () => {\n      onAnnotationUpdated();\n    };\n\n    const {\n      unsubscribe: unsubscribeAnnotationUpdated,\n    } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_UPDATED,\n      onAnnotationUpdated\n    );\n    const {\n      unsubscribe: unsubscribeAnnotationSelected,\n    } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_SELECTED,\n      onAnnotationSelected\n    );\n    const {\n      unsubscribe: unsubscribeAnnotationRemoved,\n    } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_REMOVED,\n      onAnnotationRemoved\n    );\n    onAnnotationUpdated();\n    onAnnotationSelected();\n\n    // on unload unsubscribe from events\n    return () => {\n      unsubscribeAnnotationUpdated();\n      unsubscribeAnnotationSelected();\n      unsubscribeAnnotationRemoved();\n    };\n  }, [studyInstanceUID]);\n\n  /**\n   * On clicking \"Save Annotations\" button, prompt an input modal for the\n   * new series' description, and continue to save.\n   *\n   * @returns\n   */\n  const promptSave = () => {\n    const annotations = microscopyService.getAnnotationsForStudy(\n      studyInstanceUID\n    );\n\n    if (!annotations || saving) {\n      return;\n    }\n\n    callInputDialog({\n      uiDialogService,\n      title: 'Enter description of the Series',\n      defaultValue: '',\n      callback: (value: string, action: string) => {\n        switch (action) {\n          case 'save': {\n            saveFunction(value);\n          }\n        }\n      },\n    });\n  };\n\n  const getAllDisplaySets = (studyMetadata: any) => {\n    let allDisplaySets = [] as any[];\n    studyMetadata.series.forEach((series: any) => {\n      const displaySets = displaySetService.getDisplaySetsForSeries(\n        series.SeriesInstanceUID\n      );\n      allDisplaySets = allDisplaySets.concat(displaySets);\n    });\n    return allDisplaySets;\n  };\n\n  /**\n   * Save annotations as a series\n   *\n   * @param SeriesDescription - series description\n   * @returns\n   */\n  const saveFunction = async (SeriesDescription: string) => {\n    const dataSource = extensionManager.getActiveDataSource()[0];\n    const { onSaveComplete } = props;\n    const annotations = microscopyService.getAnnotationsForStudy(\n      studyInstanceUID\n    );\n\n    saving = true;\n\n    // There is only one viewer possible for one study,\n    // Since once study contains multiple resolution levels (series) of one whole\n    // Slide image.\n\n    const studyMetadata = DicomMetadataStore.getStudy(studyInstanceUID);\n    const displaySets = getAllDisplaySets(studyMetadata);\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\n\n    // Get the next available series number after 4700.\n\n    const dsWithMetadata = displaySets.filter(\n      ds =>\n        ds.metadata &&\n        ds.metadata.SeriesNumber &&\n        typeof ds.metadata.SeriesNumber === 'number'\n    );\n\n    // Generate next series number\n    const seriesNumbers = dsWithMetadata.map(ds => ds.metadata.SeriesNumber);\n    const maxSeriesNumber = Math.max(...seriesNumbers, 4700);\n    const SeriesNumber = maxSeriesNumber + 1;\n\n    const { instance: metadata } = smDisplaySet;\n\n    // construct SR dataset\n    const dataset = constructSR(\n      metadata,\n      { SeriesDescription, SeriesNumber },\n      annotations\n    );\n\n    // Save in DICOM format\n    try {\n      if (dataSource) {\n        if (dataSource.wadoRoot == 'saveDicom') {\n          // download as DICOM file\n          const part10Buffer = datasetToBuffer(dataset);\n          saveByteArray(part10Buffer, `sr-microscopy.dcm`);\n        } else {\n          // Save into Web Data source\n          const { StudyInstanceUID } = dataset;\n          await dataSource.store.dicom(dataset);\n          if (StudyInstanceUID) {\n            dataSource.deleteStudyMetadataPromise(StudyInstanceUID);\n          }\n        }\n        onSaveComplete({\n          title: 'SR Saved',\n          meassage: 'Measurements downloaded successfully',\n          type: 'success',\n        });\n      } else {\n        console.error('Server unspecified');\n      }\n    } catch (error) {\n      onSaveComplete({\n        title: 'SR Save Failed',\n        message: error.message || error.toString(),\n        type: 'error',\n      });\n    } finally {\n      saving = false;\n    }\n  };\n\n  /**\n   * On clicking \"Reject annotations\" button\n   */\n  const onDeleteCurrentSRHandler = async () => {\n    try {\n      const activeViewport = props.viewports[props.activeViewportIndex];\n      const { StudyInstanceUID } = activeViewport;\n\n      // TODO: studies?\n      const study = DicomMetadataStore.getStudy(StudyInstanceUID);\n\n      const lastDerivedDisplaySet = study.derivedDisplaySets.sort(\n        (ds1: any, ds2: any) => {\n          const dateTime1 = Number(`${ds1.SeriesDate}${ds1.SeriesTime}`);\n          const dateTime2 = Number(`${ds2.SeriesDate}${ds2.SeriesTime}`);\n          return dateTime1 > dateTime2;\n        }\n      )[study.derivedDisplaySets.length - 1];\n\n      // TODO: use dataSource.reject.dicom()\n      // await DICOMSR.rejectMeasurements(\n      //   study.wadoRoot,\n      //   lastDerivedDisplaySet.StudyInstanceUID,\n      //   lastDerivedDisplaySet.SeriesInstanceUID\n      // );\n      props.onRejectComplete({\n        title: 'Report rejected',\n        message: 'Latest report rejected successfully',\n        type: 'success',\n      });\n    } catch (error) {\n      props.onRejectComplete({\n        title: 'Failed to reject report',\n        message: error.message,\n        type: 'error',\n      });\n    }\n  };\n\n  /**\n   * Handler for clicking event of an annotation item.\n   *\n   * @param param0\n   */\n  const onMeasurementItemClickHandler = ({ uid }: { uid: string }) => {\n    const roiAnnotation = microscopyService.getAnnotation(uid);\n    microscopyService.selectAnnotation(roiAnnotation);\n    microscopyService.focusAnnotation(roiAnnotation, props.activeViewportIndex);\n  };\n\n  /**\n   * Handler for \"Edit\" action of an annotation item\n   * @param param0\n   */\n  const onMeasurementItemEditHandler = ({\n    uid,\n    isActive,\n  }: {\n    uid: string;\n    isActive: boolean;\n  }) => {\n    props.commandsManager.runCommand('setLabel', { uid }, 'MICROSCOPY');\n  };\n\n  // Convert ROI annotations managed by microscopyService into our\n  // own format for display\n  const data = roiAnnotations.map((roiAnnotation, index) => {\n    const label = roiAnnotation.getDetailedLabel();\n    const area = roiAnnotation.getArea();\n    const length = roiAnnotation.getLength();\n    const shortAxisLength = roiAnnotation.roiGraphic.properties.shortAxisLength;\n    const isSelected: boolean = selectedAnnotation === roiAnnotation;\n\n    // other events\n    const { uid } = roiAnnotation;\n\n    // display text\n    const displayText = [];\n\n    if (area !== undefined) {\n      displayText.push(formatArea(area));\n    } else if (length !== undefined) {\n      displayText.push(\n        shortAxisLength\n          ? `${formatLength(length, 'μm')} x ${formatLength(\n              shortAxisLength,\n              'μm'\n            )}`\n          : `${formatLength(length, 'μm')}`\n      );\n    }\n\n    // convert to measurementItem format compatible with <MeasurementTable /> component\n    return {\n      uid,\n      index,\n      label,\n      isActive: isSelected,\n      displayText,\n      roiAnnotation,\n    };\n  });\n\n  const disabled = data.length === 0;\n\n  return (\n    <>\n      <div\n        className=\"overflow-x-hidden overflow-y-auto ohif-scrollbar\"\n        data-cy={'measurements-panel'}\n      >\n        <MeasurementTable\n          title=\"Measurements\"\n          servicesManager={props.servicesManager}\n          data={data}\n          onClick={onMeasurementItemClickHandler}\n          onEdit={onMeasurementItemEditHandler}\n        />\n      </div>\n      <div className=\"flex justify-center p-4\">\n        <ButtonGroup color=\"black\" size=\"inherit\">\n          {/* Let's hide the save button for now, as export SR for SM is a proof of concept */}\n          {/*{promptSave && (\n            <Button\n              className=\"px-2 py-2 text-base\"\n              size=\"initial\"\n              variant={disabled ? 'disabled' : 'outlined'}\n              color=\"black\"\n              border=\"primaryActive\"\n              onClick={promptSave}\n            >\n              {props.t('Create Report')}\n            </Button>\n          )} */}\n          {/* <Button\n            className=\"px-2 py-2 text-base\"\n            onClick={onDeleteCurrentSRHandler}\n          >\n            {props.t('Reject latest report')}\n          </Button> */}\n        </ButtonGroup>\n      </div>\n    </>\n  );\n}\n\nconst connectedMicroscopyPanel = withTranslation(['MicroscopyTable', 'Common'])(\n  MicroscopyPanel\n);\n\nexport default connectedMicroscopyPanel;\n","import { ServicesManager, CommandsManager, ExtensionManager } from '@ohif/core';\nimport styles from './utils/styles';\nimport callInputDialog from './utils/callInputDialog';\n\nexport default function getCommandsModule({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n}: {\n  servicesManager: ServicesManager;\n  commandsManager: CommandsManager;\n  extensionManager: ExtensionManager;\n}) {\n  const {\n    viewportGridService,\n    uiDialogService,\n    microscopyService,\n  } = servicesManager.services;\n\n  const actions = {\n    // Measurement tool commands:\n    deleteMeasurement: ({ uid }) => {\n      if (uid) {\n        const roiAnnotation = microscopyService.getAnnotation(uid);\n        if (roiAnnotation) microscopyService.removeAnnotation(roiAnnotation);\n      }\n    },\n\n    setLabel: ({ uid }) => {\n      const roiAnnotation = microscopyService.getAnnotation(uid);\n\n      callInputDialog({\n        uiDialogService,\n        defaultValue: '',\n        callback: (value: string, action: string) => {\n          switch (action) {\n            case 'save': {\n              roiAnnotation.setLabel(value);\n              microscopyService.triggerRelabel(roiAnnotation);\n            }\n          }\n        },\n      });\n    },\n\n    setToolActive: ({ toolName, toolGroupId = 'MICROSCOPY' }) => {\n      const dragPanOnMiddle = [\n        'dragPan',\n        {\n          bindings: {\n            mouseButtons: ['middle'],\n          },\n        },\n      ];\n      const dragZoomOnRight = [\n        'dragZoom',\n        {\n          bindings: {\n            mouseButtons: ['right'],\n          },\n        },\n      ];\n      if (\n        [\n          'line',\n          'box',\n          'circle',\n          'point',\n          'polygon',\n          'freehandpolygon',\n          'freehandline',\n        ].indexOf(toolName) >= 0\n      ) {\n        // TODO: read from configuration\n        let options = {\n          geometryType: toolName,\n          vertexEnabled: true,\n          styleOptions: styles.default,\n          bindings: {\n            mouseButtons: ['left'],\n          },\n        } as any;\n        if ('line' === toolName) {\n          options.minPoints = 2;\n          options.maxPoints = 2;\n        } else if ('point' === toolName) {\n          delete options.styleOptions;\n          delete options.vertexEnabled;\n        }\n\n        microscopyService.activateInteractions([\n          ['draw', options],\n          dragPanOnMiddle,\n          dragZoomOnRight,\n        ]);\n      } else if (toolName == 'dragPan') {\n        microscopyService.activateInteractions([\n          [\n            'dragPan',\n            {\n              bindings: {\n                mouseButtons: ['left', 'middle'],\n              },\n            },\n          ],\n          dragZoomOnRight,\n        ]);\n      } else {\n        microscopyService.activateInteractions([\n          [\n            toolName,\n            {\n              bindings: {\n                mouseButtons: ['left'],\n              },\n            },\n          ],\n          dragPanOnMiddle,\n          dragZoomOnRight,\n        ]);\n      }\n    },\n\n    incrementActiveViewport: () => {\n      const { activeViewportIndex, viewports } = viewportGridService.getState();\n      const nextViewportIndex = (activeViewportIndex + 1) % viewports.length;\n      viewportGridService.setActiveViewportIndex(nextViewportIndex);\n    },\n    decrementActiveViewport: () => {\n      const { activeViewportIndex, viewports } = viewportGridService.getState();\n      const nextViewportIndex =\n        (activeViewportIndex - 1 + viewports.length) % viewports.length;\n      viewportGridService.setActiveViewportIndex(nextViewportIndex);\n    },\n\n    toggleOverlays: () => {\n      // overlay\n      const overlays = document.getElementsByClassName(\n        'microscopy-viewport-overlay'\n      );\n      let onoff = false; // true if this will toggle on\n      for (let i = 0; i < overlays.length; i++) {\n        if (i === 0) onoff = overlays.item(0).classList.contains('hidden');\n        overlays.item(i).classList.toggle('hidden');\n      }\n\n      // overview\n      const { activeViewportIndex, viewports } = viewportGridService.getState();\n      microscopyService.toggleOverviewMap(activeViewportIndex);\n    },\n    toggleAnnotations: () => {\n      microscopyService.toggleROIsVisibility();\n    },\n  };\n\n  const definitions = {\n    deleteMeasurement: {\n      commandFn: actions.deleteMeasurement,\n      storeContexts: [] as any[],\n      options: {},\n    },\n    setLabel: {\n      commandFn: actions.setLabel,\n      storeContexts: [] as any[],\n      options: {},\n    },\n    setToolActive: {\n      commandFn: actions.setToolActive,\n      storeContexts: [] as any[],\n      options: {},\n    },\n    incrementActiveViewport: {\n      commandFn: actions.incrementActiveViewport,\n      storeContexts: [] as any[],\n    },\n    decrementActiveViewport: {\n      commandFn: actions.decrementActiveViewport,\n      storeContexts: [] as any[],\n    },\n    toggleOverlays: {\n      commandFn: actions.toggleOverlays,\n      storeContexts: [] as any[],\n      options: {},\n    },\n    toggleAnnotations: {\n      commandFn: actions.toggleAnnotations,\n      storeContexts: [] as any[],\n      options: {},\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'MICROSCOPY',\n  };\n}\n","import React from 'react';\nimport { ServicesManager, CommandsManager, ExtensionManager } from '@ohif/core';\nimport { useViewportGrid } from '@ohif/ui';\nimport MicroscopyPanel from './components/MicroscopyPanel/MicroscopyPanel';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\n\nexport default function getPanelModule({\n  commandsManager,\n  extensionManager,\n  servicesManager,\n}: {\n  servicesManager: ServicesManager;\n  commandsManager: CommandsManager;\n  extensionManager: ExtensionManager;\n}) {\n  const wrappedMeasurementPanel = () => {\n    const [\n      { activeViewportIndex, viewports },\n      viewportGridService,\n    ] = useViewportGrid();\n\n    return (\n      <MicroscopyPanel\n        viewports={viewports}\n        activeViewportIndex={activeViewportIndex}\n        onSaveComplete={() => {}}\n        onRejectComplete={() => {}}\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n      />\n    );\n  };\n\n  return [\n    {\n      name: 'measure',\n      iconName: 'tab-linear',\n      iconLabel: 'Measure',\n      label: 'Measurements',\n      secondaryLabel: 'Measurements',\n      component: wrappedMeasurementPanel,\n    },\n  ];\n}\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { id } from './id';\nimport React, { Suspense } from 'react';\nimport getPanelModule from './getPanelModule';\nimport getCommandsModule from './getCommandsModule';\n\nimport { useViewportGrid } from '@ohif/ui';\nimport getDicomMicroscopySopClassHandler from './DicomMicroscopySopClassHandler';\nimport getDicomMicroscopySRSopClassHandler from './DicomMicroscopySRSopClassHandler';\nimport MicroscopyService from './services/MicroscopyService';\n\nconst Component = React.lazy(() => {\n  return import('./DicomMicroscopyViewport');\n});\n\nconst MicroscopyViewport = props => {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nexport default {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n\n  async preRegistration({\n    servicesManager,\n    commandsManager,\n    configuration = {},\n    appConfig,\n  }) {\n    servicesManager.registerService(\n      MicroscopyService.REGISTRATION(servicesManager)\n    );\n  },\n\n  /**\n   * ViewportModule should provide a list of viewports that will be available in OHIF\n   * for Modes to consume and use in the viewports. Each viewport is defined by\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\n   * that is provided by the Cornerstone extension in OHIF.\n   */\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n    /**\n     *\n     * @param props {*}\n     * @param props.displaySets\n     * @param props.viewportIndex\n     * @param props.viewportLabel\n     * @param props.dataSource\n     * @param props.viewportOptions\n     * @param props.displaySetOptions\n     * @returns\n     */\n    const ExtendedMicroscopyViewport = props => {\n      const { viewportOptions } = props;\n\n      const [viewportGrid, viewportGridService] = useViewportGrid();\n      const { viewports, activeViewportIndex } = viewportGrid;\n\n      return (\n        <MicroscopyViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          activeViewportIndex={activeViewportIndex}\n          setViewportActive={(viewportIndex: number) => {\n            viewportGridService.setActiveViewportIndex(viewportIndex);\n          }}\n          viewportData={viewportOptions}\n          {...props}\n        />\n      );\n    };\n\n    return [\n      {\n        name: 'microscopy-dicom',\n        component: ExtendedMicroscopyViewport,\n      },\n    ];\n  },\n\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule({\n    servicesManager,\n    commandsManager,\n    extensionManager,\n  }) {\n    return [\n      getDicomMicroscopySopClassHandler({\n        servicesManager,\n        extensionManager,\n      }),\n      getDicomMicroscopySRSopClassHandler({\n        servicesManager,\n        extensionManager,\n      }),\n    ];\n  },\n\n  getPanelModule,\n\n  getCommandsModule,\n};\n","import ViewerManager, { EVENTS as ViewerEvents } from '../tools/viewerManager';\nimport RoiAnnotation, {\n  EVENTS as AnnotationEvents,\n} from '../utils/RoiAnnotation';\nimport styles from '../utils/styles';\nimport { DicomMetadataStore, PubSubService } from '@ohif/core';\n\nconst EVENTS = {\n  ANNOTATION_UPDATED: 'annotationUpdated',\n  ANNOTATION_SELECTED: 'annotationSelected',\n  ANNOTATION_REMOVED: 'annotationRemoved',\n  RELABEL: 'relabel',\n  DELETE: 'delete',\n};\n\n/**\n * MicroscopyService is responsible to manage multiple third-party API's\n * microscopy viewers expose methods to manage the interaction with these\n * viewers and handle their ROI graphics to create, remove and modify the\n * ROI annotations relevant to the application\n */\nexport default class MicroscopyService extends PubSubService {\n  public static REGISTRATION = serviceManager => {\n    return {\n      name: 'microscopyService',\n      altName: 'MicroscopyService',\n      create: ({ configuration = {} }) => {\n        return new MicroscopyService(serviceManager);\n      },\n    };\n  };\n\n  serviceManager: any;\n\n  managedViewers = new Set();\n  roiUids = new Set();\n  annotations = {};\n  selectedAnnotation = null;\n  pendingFocus = false;\n\n  constructor(serviceManager) {\n    super(EVENTS);\n    this.serviceManager = serviceManager;\n    this._onRoiAdded = this._onRoiAdded.bind(this);\n    this._onRoiModified = this._onRoiModified.bind(this);\n    this._onRoiRemoved = this._onRoiRemoved.bind(this);\n    this._onRoiUpdated = this._onRoiUpdated.bind(this);\n    this._onRoiSelected = this._onRoiSelected.bind(this);\n    this.isROIsVisible = true;\n  }\n\n  /**\n   * Cleares all the annotations and managed viewers, setting the manager state\n   * to its initial state\n   */\n  clear() {\n    this.managedViewers.forEach(managedViewer => managedViewer.destroy());\n    this.managedViewers.clear();\n    for (var key in this.annotations) {\n      delete this.annotations[key];\n    }\n\n    this.roiUids.clear();\n    this.selectedAnnotation = null;\n    this.pendingFocus = false;\n  }\n\n  clearAnnotations() {\n    Object.keys(this.annotations).forEach(uid => {\n      this.removeAnnotation(this.annotations[uid]);\n    });\n  }\n\n  /**\n   * Observes when a ROI graphic is added, creating the correspondent annotation\n   * with the current graphic and view state.\n   * Creates a subscription for label updating for the created annotation and\n   * publishes an ANNOTATION_UPDATED event when it happens.\n   * Also triggers the relabel process after the graphic is placed.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiAdded(data) {\n    const { roiGraphic, managedViewer, label } = data;\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\n    const viewState = managedViewer.getViewState();\n\n    const roiAnnotation = new RoiAnnotation(\n      roiGraphic,\n      studyInstanceUID,\n      seriesInstanceUID,\n      '',\n      viewState\n    );\n\n    this.roiUids.add(roiGraphic.uid);\n    this.annotations[roiGraphic.uid] = roiAnnotation;\n\n    roiAnnotation.subscribe(AnnotationEvents.LABEL_UPDATED, () => {\n      this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, roiAnnotation);\n    });\n\n    if (label !== undefined) {\n      roiAnnotation.setLabel(label);\n    } else {\n      const onRelabel = item =>\n        managedViewer.updateROIProperties({\n          uid: roiGraphic.uid,\n          properties: { label: item.label, finding: item.finding },\n        });\n      this.triggerRelabel(roiAnnotation, true, onRelabel);\n    }\n  }\n\n  /**\n   * Observes when a ROI graphic is modified, updating the correspondent\n   * annotation with the current graphic and view state.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The modified ROI graphic object\n   */\n  _onRoiModified(data) {\n    const { roiGraphic, managedViewer } = data;\n    const roiAnnotation = this.getAnnotation(roiGraphic.uid);\n    if (!roiAnnotation) return;\n    roiAnnotation.setRoiGraphic(roiGraphic);\n    roiAnnotation.setViewState(managedViewer.getViewState());\n  }\n\n  /**\n   * Observes when a ROI graphic is removed, reflecting the removal in the\n   * annotations' state.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The removed ROI graphic object\n   */\n  _onRoiRemoved(data) {\n    const { roiGraphic } = data;\n    this.roiUids.delete(roiGraphic.uid);\n    this.annotations[roiGraphic.uid].destroy();\n    delete this.annotations[roiGraphic.uid];\n    this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiGraphic);\n  }\n\n  /**\n   * Observes any changes on ROI graphics and synchronize all the managed\n   * viewers to reflect those changes.\n   * Also publishes an ANNOTATION_UPDATED event to notify the subscribers.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiUpdated(data) {\n    const { roiGraphic, managedViewer } = data;\n    this.synchronizeViewers(managedViewer);\n    this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, this.getAnnotation(roiGraphic.uid));\n  }\n\n  /**\n   * Observes when an ROI is selected.\n   * Also publishes an ANNOTATION_SELECTED event to notify the subscribers.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiSelected(data) {\n    const { roiGraphic } = data;\n    const selectedAnnotation = this.getAnnotation(roiGraphic.uid);\n    if (selectedAnnotation && selectedAnnotation !== this.getSelectedAnnotation()) {\n      if (this.selectedAnnotation) this.clearSelection();\n      this.selectedAnnotation = selectedAnnotation;\n      this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, selectedAnnotation);\n    }\n  }\n\n  /**\n   * Creates the subscriptions for the managed viewer being added\n   *\n   * @param {ViewerManager} managedViewer The viewer being added\n   */\n  _addManagedViewerSubscriptions(managedViewer) {\n    managedViewer._roiAddedSubscription = managedViewer.subscribe(ViewerEvents.ADDED, this._onRoiAdded);\n    managedViewer._roiModifiedSubscription = managedViewer.subscribe(ViewerEvents.MODIFIED, this._onRoiModified);\n    managedViewer._roiRemovedSubscription = managedViewer.subscribe(ViewerEvents.REMOVED, this._onRoiRemoved);\n    managedViewer._roiUpdatedSubscription = managedViewer.subscribe(ViewerEvents.UPDATED, this._onRoiUpdated);\n    managedViewer._roiSelectedSubscription = managedViewer.subscribe(ViewerEvents.UPDATED, this._onRoiSelected);\n  }\n\n  /**\n   * Removes the subscriptions for the managed viewer being removed\n   *\n   * @param {ViewerManager} managedViewer The viewer being removed\n   */\n  _removeManagedViewerSubscriptions(managedViewer) {\n    managedViewer._roiAddedSubscription && managedViewer._roiAddedSubscription.unsubscribe();\n    managedViewer._roiModifiedSubscription && managedViewer._roiModifiedSubscription.unsubscribe();\n    managedViewer._roiRemovedSubscription && managedViewer._roiRemovedSubscription.unsubscribe();\n    managedViewer._roiUpdatedSubscription && managedViewer._roiUpdatedSubscription.unsubscribe();\n    managedViewer._roiSelectedSubscription && managedViewer._roiSelectedSubscription.unsubscribe();\n\n    managedViewer._roiAddedSubscription = null;\n    managedViewer._roiModifiedSubscription = null;\n    managedViewer._roiRemovedSubscription = null;\n    managedViewer._roiUpdatedSubscription = null;\n    managedViewer._roiSelectedSubscription = null;\n  }\n\n  /**\n   * Returns the managed viewers that are displaying the image with the given\n   * study and series UIDs\n   *\n   * @param {String} studyInstanceUID UID for the study\n   * @param {String} seriesInstanceUID UID for the series\n   *\n   * @returns {Array} The managed viewers for the given series UID\n   */\n  _getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID) {\n    const filter = managedViewer =>\n      managedViewer.studyInstanceUID === studyInstanceUID &&\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\n    return Array.from(this.managedViewers).filter(filter);\n  }\n\n  /**\n   * Returns the managed viewers that are displaying the image with the given\n   * study UID\n   *\n   * @param {String} studyInstanceUID UID for the study\n   *\n   * @returns {Array} The managed viewers for the given series UID\n   */\n  getManagedViewersForStudy(studyInstanceUID) {\n    const filter = managedViewer =>\n      managedViewer.studyInstanceUID === studyInstanceUID;\n    return Array.from(this.managedViewers).filter(filter);\n  }\n\n  /**\n   * Restores the created annotations for the viewer being added\n   *\n   * @param {ViewerManager} managedViewer The viewer being added\n   */\n  _restoreAnnotations(managedViewer) {\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\n    const annotations = this.getAnnotationsForSeries(\n      studyInstanceUID,\n      seriesInstanceUID\n    );\n    annotations.forEach(roiAnnotation => {\n      managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\n    });\n  }\n\n  /**\n   * Creates a managed viewer instance for the given thrid-party API's viewer.\n   * Restores existing annotations for the given study/series.\n   * Adds event subscriptions for the viewer being added.\n   * Focuses the selected annotation when the viewer is being loaded into the\n   * active viewport.\n   *\n   * @param {Object} viewer Third-party viewer API's object to be managed\n   * @param {Number} viewportIndex The index of the viewport to load the viewer\n   * @param {HTMLElement} container The DOM element where it will be renderd\n   * @param {String} studyInstanceUID The study UID of the loaded image\n   * @param {String} seriesInstanceUID The series UID of the loaded image\n   * @param {Array} displaySets All displaySets related to the same StudyInstanceUID\n   *\n   * @returns {ViewerManager} managed viewer\n   */\n  addViewer(\n    viewer,\n    viewportIndex,\n    container,\n    studyInstanceUID,\n    seriesInstanceUID\n  ) {\n    const managedViewer = new ViewerManager(\n      viewer,\n      viewportIndex,\n      container,\n      studyInstanceUID,\n      seriesInstanceUID\n    );\n\n    this._restoreAnnotations(managedViewer);\n    viewer._manager = managedViewer;\n    this.managedViewers.add(managedViewer);\n\n    // this._potentiallyLoadSR(studyInstanceUID, displaySets);\n    this._addManagedViewerSubscriptions(managedViewer);\n\n    if (this.pendingFocus) {\n      this.pendingFocus = false;\n      this.focusAnnotation(this.selectedAnnotation, viewportIndex);\n    }\n\n    return managedViewer;\n  }\n\n  _potentiallyLoadSR(StudyInstanceUID, displaySets) {\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\n\n    const { FrameOfReferenceUID, othersFrameOfReferenceUID } = smDisplaySet;\n\n    if (!studyMetadata) {\n      return;\n    }\n\n    let derivedDisplaySets = FrameOfReferenceUID\n      ? displaySets.filter(\n          ds =>\n            ds.ReferencedFrameOfReferenceUID === FrameOfReferenceUID ||\n            // sometimes each depth instance has the different FrameOfReferenceID\n            othersFrameOfReferenceUID.includes(ds.ReferencedFrameOfReferenceUID)\n        )\n      : [];\n\n    if (!derivedDisplaySets.length) {\n      return;\n    }\n\n    derivedDisplaySets = derivedDisplaySets.filter(ds => ds.Modality === 'SR');\n\n    if (derivedDisplaySets.some(ds => ds.isLoaded === true)) {\n      // Don't auto load\n      return;\n    }\n\n    // find most recent and load it.\n    let recentDateTime = 0;\n    let recentDisplaySet = derivedDisplaySets[0];\n\n    derivedDisplaySets.forEach(ds => {\n      const dateTime = Number(`${ds.SeriesDate}${ds.SeriesTime}`);\n      if (dateTime > recentDateTime) {\n        recentDateTime = dateTime;\n        recentDisplaySet = ds;\n      }\n    });\n\n    recentDisplaySet.isLoading = true;\n\n    recentDisplaySet.load(smDisplaySet);\n  }\n\n  /**\n   * Removes the given third-party viewer API's object from the managed viewers\n   * and cleares all its event subscriptions\n   *\n   * @param {Object} viewer Third-party viewer API's object to be removed\n   */\n  removeViewer(viewer) {\n    const managedViewer = viewer._manager;\n\n    this._removeManagedViewerSubscriptions(managedViewer);\n    managedViewer.destroy();\n    this.managedViewers.delete(managedViewer);\n  }\n\n  /**\n   * Toggle ROIs visibility\n   */\n  toggleROIsVisibility() {\n    this.isROIsVisible ? this.hideROIs() : this.showROIs;\n    this.isROIsVisible = !this.isROIsVisible;\n  }\n\n  /**\n   * Hide all ROIs\n   */\n  hideROIs() {\n    this.managedViewers.forEach(mv => mv.hideROIs());\n  }\n\n  /** Show all ROIs */\n  showROIs() {\n    this.managedViewers.forEach(mv => mv.showROIs());\n  }\n\n  /**\n   * Returns a RoiAnnotation instance for the given ROI UID\n   *\n   * @param {String} uid UID of the annotation\n   *\n   * @returns {RoiAnnotation} The RoiAnnotation instance found for the given UID\n   */\n  getAnnotation(uid) {\n    return this.annotations[uid];\n  }\n\n  /**\n   * Returns all the RoiAnnotation instances being managed\n   *\n   * @returns {Array} All RoiAnnotation instances\n   */\n  getAnnotations() {\n    const annotations = [];\n    Object.keys(this.annotations).forEach(uid => {\n      annotations.push(this.getAnnotation(uid));\n    });\n    return annotations;\n  }\n\n  /**\n   * Returns the RoiAnnotation instances registered with the given study UID\n   *\n   * @param {String} studyInstanceUID UID for the study\n   */\n  getAnnotationsForStudy(studyInstanceUID) {\n    const filter = a => a.studyInstanceUID === studyInstanceUID;\n    return this.getAnnotations().filter(filter);\n  }\n\n  /**\n   * Returns the RoiAnnotation instances registered with the given study and\n   * series UIDs\n   *\n   * @param {String} studyInstanceUID UID for the study\n   * @param {String} seriesInstanceUID UID for the series\n   */\n  getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID) {\n    const filter = annotation =>\n      annotation.studyInstanceUID === studyInstanceUID &&\n      annotation.seriesInstanceUID === seriesInstanceUID;\n    return this.getAnnotations().filter(filter);\n  }\n\n  /**\n   * Returns the selected RoiAnnotation instance or null if none is selected\n   *\n   * @returns {RoiAnnotation} The selected RoiAnnotation instance\n   */\n  getSelectedAnnotation() {\n    return this.selectedAnnotation;\n  }\n\n  /**\n   * Clear current RoiAnnotation selection\n   */\n  clearSelection() {\n    if (this.selectedAnnotation) {\n      this.setROIStyle(this.selectedAnnotation.uid, {\n        stroke: {\n          color: '#00ff00',\n        },\n      });\n    }\n    this.selectedAnnotation = null;\n  }\n\n  /**\n   * Selects the given RoiAnnotation instance, publishing an ANNOTATION_SELECTED\n   * event to notify all the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be selected\n   */\n  selectAnnotation(roiAnnotation) {\n    if (this.selectedAnnotation) this.clearSelection();\n\n    this.selectedAnnotation = roiAnnotation;\n    this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, roiAnnotation);\n    this.setROIStyle(roiAnnotation.uid, styles.active);\n  }\n\n  /**\n   * Toggles overview map\n   *\n   * @param viewportIndex The active viewport index\n   * @returns {void}\n   */\n  toggleOverviewMap(viewportIndex) {\n    const managedViewers = Array.from(this.managedViewers);\n    const managedViewer = managedViewers.find(\n      mv => mv.viewportIndex === viewportIndex\n    );\n    if (managedViewer) {\n      managedViewer.toggleOverviewMap();\n    }\n  }\n\n  /**\n   * Removes a RoiAnnotation instance from the managed annotations and reflects\n   * its removal on all third-party viewers being managed\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be removed\n   */\n  removeAnnotation(roiAnnotation) {\n    const { uid, studyInstanceUID, seriesInstanceUID } = roiAnnotation;\n    const filter = managedViewer =>\n      managedViewer.studyInstanceUID === studyInstanceUID &&\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\n\n    const managedViewers = Array.from(this.managedViewers).filter(filter);\n\n    managedViewers.forEach(managedViewer =>\n      managedViewer.removeRoiGraphic(uid)\n    );\n\n    if (this.annotations[uid]) {\n      this.roiUids.delete(uid);\n      this.annotations[uid].destroy();\n      delete this.annotations[uid];\n\n      this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiAnnotation);\n    }\n  }\n\n  /**\n   * Focus the given RoiAnnotation instance by changing the OpenLayers' Map view\n   * state of the managed viewer with the given viewport index.\n   * If the image for the given annotation is not yet loaded into the viewport,\n   * it will set a pendingFocus flag to true in order to perform the focus when\n   * the managed viewer instance is created.\n   *\n   * @param {RoiAnnotation} roiAnnotation RoiAnnotation instance to be focused\n   * @param {Number} viewportIndex Index of the viewport to focus\n   */\n  focusAnnotation(roiAnnotation, viewportIndex) {\n    const filter = mv => mv.viewportIndex === viewportIndex;\n    const managedViewer = Array.from(this.managedViewers).find(filter);\n    if (managedViewer) {\n      managedViewer.setViewStateByExtent(roiAnnotation);\n    } else {\n      this.pendingFocus = true;\n    }\n  }\n\n  /**\n   * Synchronize the ROI graphics for all the managed viewers that has the same\n   * series UID of the given managed viewer\n   *\n   * @param {ViewerManager} baseManagedViewer Reference managed viewer\n   */\n  synchronizeViewers(baseManagedViewer) {\n    const { studyInstanceUID, seriesInstanceUID } = baseManagedViewer;\n    const managedViewers = this._getManagedViewersForSeries(\n      studyInstanceUID,\n      seriesInstanceUID\n    );\n\n    // Prevent infinite loops arrising from updates.\n    managedViewers.forEach(managedViewer =>\n      this._removeManagedViewerSubscriptions(managedViewer)\n    );\n\n    managedViewers.forEach(managedViewer => {\n      if (managedViewer === baseManagedViewer) {\n        return;\n      }\n\n      const annotations = this.getAnnotationsForSeries(\n        studyInstanceUID,\n        seriesInstanceUID\n      );\n      managedViewer.clearRoiGraphics();\n      annotations.forEach(roiAnnotation => {\n        managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\n      });\n    });\n\n    managedViewers.forEach(managedViewer =>\n      this._addManagedViewerSubscriptions(managedViewer)\n    );\n  }\n\n  /**\n   * Activates interactions across all the viewers being managed\n   *\n   * @param {Array} interactions interactions\n   */\n  activateInteractions(interactions) {\n    this.managedViewers.forEach(mv => mv.activateInteractions(interactions));\n    this.activeInteractions = interactions;\n  }\n\n  /**\n   * Triggers the relabelling process for the given RoiAnnotation instance, by\n   * publishing the RELABEL event to notify the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be relabelled\n   * @param {boolean} newAnnotation Whether the annotation is newly drawn (so it deletes on cancel).\n   */\n  triggerRelabel(roiAnnotation, newAnnotation = false, onRelabel) {\n    if (!onRelabel) {\n      onRelabel = ({ label }) =>\n        this.managedViewers.forEach(mv =>\n          mv.updateROIProperties({\n            uid: roiAnnotation.uid,\n            properties: { label },\n          })\n        );\n    }\n\n    this._broadcastEvent(EVENTS.RELABEL, {\n      roiAnnotation,\n      deleteCallback: () => this.removeAnnotation(roiAnnotation),\n      successCallback: onRelabel,\n      newAnnotation,\n    });\n  }\n\n  /**\n   * Triggers the deletion process for the given RoiAnnotation instance, by\n   * publishing the DELETE event to notify the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be deleted\n   */\n  triggerDelete(roiAnnotation) {\n    this._broadcastEvent(EVENTS.DELETE, roiAnnotation);\n  }\n\n  /**\n   * Set ROI style for all managed viewers\n   *\n   * @param {string} uid The ROI uid that will be styled\n   * @param {object} styleOptions - Style options\n   * @param {object*} styleOptions.stroke - Style options for the outline of the geometry\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\n   * @param {number} styleOptions.stroke.width - Width of the outline\n   * @param {object*} styleOptions.fill - Style options for body the geometry\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\n   * @param {object*} styleOptions.image - Style options for image\n   */\n  setROIStyle(uid, styleOptions) {\n    this.managedViewers.forEach(mv => mv.setROIStyle(uid, styleOptions));\n  }\n}\n\nexport { EVENTS };\n","import coordinateFormatScoord3d2Geometry from '../utils/coordinateFormatScoord3d2Geometry';\nimport styles from '../utils/styles';\n\nimport { PubSubService } from '@ohif/core';\n\n// Events from the third-party viewer\nconst ApiEvents = {\n  /** Triggered when a ROI was added. */\n  ROI_ADDED: 'dicommicroscopyviewer_roi_added',\n  /** Triggered when a ROI was modified. */\n  ROI_MODIFIED: 'dicommicroscopyviewer_roi_modified',\n  /** Triggered when a ROI was removed. */\n  ROI_REMOVED: 'dicommicroscopyviewer_roi_removed',\n  /** Triggered when a ROI was drawn. */\n  ROI_DRAWN: `dicommicroscopyviewer_roi_drawn`,\n  /** Triggered when a ROI was selected. */\n  ROI_SELECTED: `dicommicroscopyviewer_roi_selected`,\n  /** Triggered when a viewport move has started. */\n  MOVE_STARTED: `dicommicroscopyviewer_move_started`,\n  /** Triggered when a viewport move has ended. */\n  MOVE_ENDED: `dicommicroscopyviewer_move_ended`,\n  /** Triggered when a loading of data has started. */\n  LOADING_STARTED: `dicommicroscopyviewer_loading_started`,\n  /** Triggered when a loading of data has ended. */\n  LOADING_ENDED: `dicommicroscopyviewer_loading_ended`,\n  /** Triggered when an error occurs during loading of data. */\n  LOADING_ERROR: `dicommicroscopyviewer_loading_error`,\n  /* Triggered when the loading of an image tile has started. */\n  FRAME_LOADING_STARTED: `dicommicroscopyviewer_frame_loading_started`,\n  /* Triggered when the loading of an image tile has ended. */\n  FRAME_LOADING_ENDED: `dicommicroscopyviewer_frame_loading_ended`,\n  /* Triggered when the error occurs during loading of an image tile. */\n  FRAME_LOADING_ERROR: `dicommicroscopyviewer_frame_loading_ended`,\n};\n\nconst EVENTS = {\n  ADDED: 'added',\n  MODIFIED: 'modified',\n  REMOVED: 'removed',\n  UPDATED: 'updated',\n  SELECTED: 'selected',\n};\n\n/**\n * ViewerManager encapsulates the complexity of the third-party viewer and\n * expose only the features/behaviors that are relevant to the application\n */\nclass ViewerManager extends PubSubService {\n  constructor(\n    viewer,\n    viewportIndex,\n    container,\n    studyInstanceUID,\n    seriesInstanceUID\n  ) {\n    super(EVENTS);\n    this.viewer = viewer;\n    this.viewportIndex = viewportIndex;\n    this.container = container;\n    this.studyInstanceUID = studyInstanceUID;\n    this.seriesInstanceUID = seriesInstanceUID;\n\n    this.onRoiAdded = this.roiAddedHandler.bind(this);\n    this.onRoiModified = this.roiModifiedHandler.bind(this);\n    this.onRoiRemoved = this.roiRemovedHandler.bind(this);\n    this.onRoiSelected = this.roiSelectedHandler.bind(this);\n    this.contextMenuCallback = () => {};\n\n    // init symbols\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\n    this._drawingSource = symbols.find(p => p.description === 'drawingSource');\n    this._pyramid = symbols.find(p => p.description === 'pyramid');\n    this._map = symbols.find(p => p.description === 'map');\n    this._affine = symbols.find(p => p.description === 'affine');\n\n    this.registerEvents();\n    this.activateDefaultInteractions();\n  }\n\n  addContextMenuCallback(callback) {\n    this.contextMenuCallback = callback;\n  }\n\n  /**\n   * Destroys this managed viewer instance, clearing all the event handlers\n   */\n  destroy() {\n    this.unregisterEvents();\n  }\n\n  /**\n   * This is to overrides the _broadcastEvent method of PubSubService and always\n   * send the ROI graphic object and this managed viewer instance.\n   * Due to the way that PubSubService is written, the same name override of the\n   * function doesn't work.\n   *\n   * @param {String} key key Subscription key\n   * @param {Object} roiGraphic ROI graphic object created by the third-party API\n   */\n  publish(key, roiGraphic) {\n    this._broadcastEvent(key, {\n      roiGraphic,\n      managedViewer: this,\n    });\n  }\n\n  /**\n   * Registers all the relevant event handlers for the third-party API\n   */\n  registerEvents() {\n    this.container.addEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\n    this.container.addEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\n    this.container.addEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\n    this.container.addEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\n  }\n\n  /**\n   * Cleares all the relevant event handlers for the third-party API\n   */\n  unregisterEvents() {\n    this.container.removeEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\n    this.container.removeEventListener(\n      ApiEvents.ROI_MODIFIED,\n      this.onRoiModified\n    );\n    this.container.removeEventListener(\n      ApiEvents.ROI_REMOVED,\n      this.onRoiRemoved\n    );\n    this.container.removeEventListener(\n      ApiEvents.ROI_SELECTED,\n      this.onRoiSelected\n    );\n  }\n\n  /**\n   * Handles the ROI_ADDED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiAddedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.ADDED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_MODIFIED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiModifiedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.MODIFIED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_REMOVED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiRemovedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.REMOVED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_SELECTED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiSelectedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.SELECTED, roiGraphic);\n  }\n\n  /**\n   * Run the given callback operation without triggering any events for this\n   * instance, so subscribers will not be affected\n   *\n   * @param {Function} callback Callback that will run sinlently\n   */\n  runSilently(callback) {\n    this.unregisterEvents();\n    callback();\n    this.registerEvents();\n  }\n\n  /**\n   * Removes all the ROI graphics from the third-party API\n   */\n  clearRoiGraphics() {\n    this.runSilently(() => this.viewer.removeAllROIs());\n  }\n\n  showROIs() {\n    this.viewer.showROIs();\n  }\n\n  hideROIs() {\n    this.viewer.hideROIs();\n  }\n\n  /**\n   * Adds the given ROI graphic into the third-party API\n   *\n   * @param {Object} roiGraphic ROI graphic object to be added\n   */\n  addRoiGraphic(roiGraphic) {\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\n  }\n\n  /**\n   * Adds the given ROI graphic into the third-party API, and also add a label.\n   * Used for importing from SR.\n   *\n   * @param {Object} roiGraphic ROI graphic object to be added.\n   * @param {String} label The label of the annotation.\n   */\n  addRoiGraphicWithLabel(roiGraphic, label) {\n    // NOTE: Dicom Microscopy Viewer will override styles for \"Text\" evalutations\n    // to hide all other geometries, we are not going to use its label.\n    // if (label) {\n    //   if (!roiGraphic.properties) roiGraphic.properties = {};\n    //   roiGraphic.properties.label = label;\n    // }\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\n\n    this._broadcastEvent(EVENTS.ADDED, {\n      roiGraphic,\n      managedViewer: this,\n      label,\n    });\n  }\n\n  /**\n   * Sets ROI style\n   *\n   * @param {String} uid ROI graphic UID to be styled\n   * @param {object} styleOptions - Style options\n   * @param {object} styleOptions.stroke - Style options for the outline of the geometry\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\n   * @param {number} styleOptions.stroke.width - Width of the outline\n   * @param {object} styleOptions.fill - Style options for body the geometry\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\n   * @param {object} styleOptions.image - Style options for image\n   */\n  setROIStyle(uid, styleOptions) {\n    this.viewer.setROIStyle(uid, styleOptions);\n  }\n\n  /**\n   * Removes the ROI graphic with the given UID from the third-party API\n   *\n   * @param {String} uid ROI graphic UID to be removed\n   */\n  removeRoiGraphic(uid) {\n    this.viewer.removeROI(uid);\n  }\n\n  /**\n   * Update properties of regions of interest.\n   *\n   * @param {object} roi - ROI to be updated\n   * @param {string} roi.uid - Unique identifier of the region of interest\n   * @param {object} roi.properties - ROI properties\n   * @returns {void}\n   */\n  updateROIProperties({ uid, properties }) {\n    this.viewer.updateROI({ uid, properties });\n  }\n\n  /**\n   * Toggles overview map\n   *\n   * @returns {void}\n   */\n  toggleOverviewMap() {\n    this.viewer.toggleOverviewMap();\n  }\n\n  /**\n   * Activates the viewer default interactions\n   * @returns {void}\n   */\n  activateDefaultInteractions() {\n    /** Disable browser's native context menu inside the canvas */\n    document.querySelector('.DicomMicroscopyViewer').addEventListener(\n      'contextmenu',\n      event => {\n        event.preventDefault();\n        // comment out when context menu for microscopy is enabled\n        // if (typeof this.contextMenuCallback === 'function') {\n        //   this.contextMenuCallback(event);\n        // }\n      },\n      false\n    );\n    const defaultInteractions = [\n      [\n        'dragPan',\n        {\n          bindings: {\n            mouseButtons: ['middle'],\n          },\n        },\n      ],\n      [\n        'dragZoom',\n        {\n          bindings: {\n            mouseButtons: ['right'],\n          },\n        },\n      ],\n      ['modify', {}],\n    ];\n    this.activateInteractions(defaultInteractions);\n  }\n\n  /**\n   * Activates interactions\n   * @param {Array} interactions Interactions to be activated\n   * @returns {void}\n   */\n  activateInteractions(interactions) {\n    const interactionsMap = {\n      draw: activate =>\n        activate ? 'activateDrawInteraction' : 'deactivateDrawInteraction',\n      modify: activate =>\n        activate ? 'activateModifyInteraction' : 'deactivateModifyInteraction',\n      translate: activate =>\n        activate\n          ? 'activateTranslateInteraction'\n          : 'deactivateTranslateInteraction',\n      snap: activate =>\n        activate ? 'activateSnapInteraction' : 'deactivateSnapInteraction',\n      dragPan: activate =>\n        activate\n          ? 'activateDragPanInteraction'\n          : 'deactivateDragPanInteraction',\n      dragZoom: activate =>\n        activate\n          ? 'activateDragZoomInteraction'\n          : 'deactivateDragZoomInteraction',\n      select: activate =>\n        activate ? 'activateSelectInteraction' : 'deactivateSelectInteraction',\n    };\n\n    const availableInteractionsName = Object.keys(interactionsMap);\n    availableInteractionsName.forEach(availableInteractionName => {\n      const interaction = interactions.find(\n        interaction => interaction[0] === availableInteractionName\n      );\n      if (!interaction) {\n        const deactivateInteractionMethod = interactionsMap[\n          availableInteractionName\n        ](false);\n        this.viewer[deactivateInteractionMethod]();\n      } else {\n        const [name, config] = interaction;\n        const activateInteractionMethod = interactionsMap[name](true);\n        this.viewer[activateInteractionMethod](config);\n      }\n    });\n  }\n\n  /**\n   * Accesses the internals of third-party API and returns the OpenLayers Map\n   *\n   * @returns {Object} OpenLayers Map component instance\n   */\n  _getMapView() {\n    const map = this._getMap();\n    return map.getView();\n  }\n\n  _getMap() {\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\n    const _map = symbols.find(s => String(s) === 'Symbol(map)');\n    window['map'] = this.viewer[_map];\n    return this.viewer[_map];\n  }\n\n  /**\n   * Returns the current state for the OpenLayers View\n   *\n   * @returns {Object} Current view state\n   */\n  getViewState() {\n    const view = this._getMapView();\n    return {\n      center: view.getCenter(),\n      resolution: view.getResolution(),\n      zoom: view.getZoom(),\n    };\n  }\n\n  /**\n   * Sets the current state for the OpenLayers View\n   *\n   * @param {Object} viewState View state to be applied\n   */\n  setViewState(viewState) {\n    const view = this._getMapView();\n\n    view.setZoom(viewState.zoom);\n    view.setResolution(viewState.resolution);\n    view.setCenter(viewState.center);\n  }\n\n  setViewStateByExtent(roiAnnotation) {\n    const coordinates = roiAnnotation.getCoordinates();\n\n    if (Array.isArray(coordinates[0]) && !coordinates[2]) {\n      this._jumpToPolyline(coordinates);\n    } else if (Array.isArray(coordinates[0])) {\n      this._jumpToPolygonOrEllipse(coordinates);\n    } else {\n      this._jumpToPoint(coordinates);\n    }\n  }\n\n  _jumpToPoint(coord) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n    const view = this._getMapView();\n\n    view.setCenter(mappedCoord);\n  }\n\n  _jumpToPolyline(coord) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n    const view = this._getMapView();\n\n    const x = mappedCoord[0];\n    const y = mappedCoord[1];\n\n    const xab = (x[0] + y[0]) / 2;\n    const yab = (x[1] + y[1]) / 2;\n    const midpoint = [xab, yab];\n\n    view.setCenter(midpoint);\n  }\n\n  _jumpToPolygonOrEllipse(coordinates) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n\n    coordinates.forEach(coord => {\n      let mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n\n      const [x, y] = mappedCoord;\n      if (x < minX) {\n        minX = x;\n      } else if (x > maxX) {\n        maxX = x;\n      }\n\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n    });\n\n    const width = maxX - minX;\n    const height = maxY - minY;\n\n    minX -= 0.5 * width;\n    maxX += 0.5 * width;\n    minY -= 0.5 * height;\n    maxY += 0.5 * height;\n\n    const map = this._getMap();\n    map.getView().fit([minX, minY, maxX, maxY], map.getSize());\n  }\n}\n\nexport { EVENTS };\n\nexport default ViewerManager;\n","// We need to define a UID for this extension as a device, and it should be the same for all saves:\n\nconst uid = '2.25.285241207697168520771311899641885187923';\n\nexport default uid;\n","import areaOfPolygon from './areaOfPolygon';\n\nimport { PubSubService } from '@ohif/core';\n\nconst EVENTS = {\n  LABEL_UPDATED: 'labelUpdated',\n  GRAPHIC_UPDATED: 'graphicUpdated',\n  VIEW_UPDATED: 'viewUpdated',\n  REMOVED: 'removed',\n};\n\n/**\n * Represents a single annotation for the Microscopy Viewer\n */\nclass RoiAnnotation extends PubSubService {\n  constructor(\n    roiGraphic,\n    studyInstanceUID,\n    seriesInstanceUID,\n    label = '',\n    viewState = null\n  ) {\n    super(EVENTS);\n    this.uid = roiGraphic.uid;\n    this.roiGraphic = roiGraphic;\n    this.studyInstanceUID = studyInstanceUID;\n    this.seriesInstanceUID = seriesInstanceUID;\n    this.label = label;\n    this.viewState = viewState;\n    this.setMeasurements(roiGraphic);\n  }\n\n  getScoord3d() {\n    const roiGraphic = this.roiGraphic;\n\n    const roiGraphicSymbols = Object.getOwnPropertySymbols(roiGraphic);\n    const _scoord3d = roiGraphicSymbols.find(\n      s => String(s) === 'Symbol(scoord3d)'\n    );\n\n    return roiGraphic[_scoord3d];\n  }\n\n  getCoordinates() {\n    const scoord3d = this.getScoord3d();\n    const scoord3dSymbols = Object.getOwnPropertySymbols(scoord3d);\n\n    const _coordinates = scoord3dSymbols.find(\n      s => String(s) === 'Symbol(coordinates)'\n    );\n\n    const coordinates = scoord3d[_coordinates];\n    return coordinates;\n  }\n\n  /**\n   * When called will trigger the REMOVED event\n   */\n  destroy() {\n    this._broadcastEvent(EVENTS.REMOVED, this);\n  }\n\n  /**\n   * Updates the ROI graphic for the annotation and triggers the GRAPHIC_UPDATED\n   * event\n   *\n   * @param {Object} roiGraphic\n   */\n  setRoiGraphic(roiGraphic) {\n    this.roiGraphic = roiGraphic;\n    this.setMeasurements();\n    this._broadcastEvent(EVENTS.GRAPHIC_UPDATED, this);\n  }\n\n  /**\n   * Update ROI measurement values based on its scoord3d coordinates.\n   *\n   * @returns {void}\n   */\n  setMeasurements() {\n    const type = this.roiGraphic.scoord3d.graphicType;\n    const coordinates = this.roiGraphic.scoord3d.graphicData;\n\n    switch (type) {\n      case 'ELLIPSE':\n        // This is a circle so only need one side\n        const point1 = coordinates[0];\n        const point2 = coordinates[1];\n\n        let xLength2 = point2[0] - point1[0];\n        let yLength2 = point2[1] - point1[1];\n\n        xLength2 *= xLength2;\n        yLength2 *= yLength2;\n\n        const length = Math.sqrt(xLength2 + yLength2);\n        const radius = length / 2;\n\n        const areaEllipse = Math.PI * radius * radius;\n        this._area = areaEllipse;\n        this._length = undefined;\n        break;\n\n      case 'POLYGON':\n        const areaPolygon = areaOfPolygon(coordinates);\n        this._area = areaPolygon;\n        this._length = undefined;\n        break;\n\n      case 'POINT':\n        this._area = undefined;\n        this._length = undefined;\n        break;\n\n      case 'POLYLINE':\n        let len = 0;\n        for (let i = 1; i < coordinates.length; i++) {\n          const p1 = coordinates[i - 1];\n          const p2 = coordinates[i];\n\n          let xLen = p2[0] - p1[0];\n          let yLen = p2[1] - p1[1];\n\n          xLen *= xLen;\n          yLen *= yLen;\n          len += Math.sqrt(xLen + yLen);\n        }\n\n        this._area = undefined;\n        this._length = len;\n        break;\n    }\n  }\n\n  /**\n   * Update the OpenLayer Map's view state for the annotation and triggers the\n   * VIEW_UPDATED event\n   *\n   * @param {Object} viewState The new view state for the annotation\n   */\n  setViewState(viewState) {\n    this.viewState = viewState;\n    this._broadcastEvent(EVENTS.VIEW_UPDATED, this);\n  }\n\n  /**\n   * Update the label for the annotation and triggers the LABEL_UPDATED event\n   *\n   * @param {String} label New label for the annotation\n   */\n  setLabel(label, finding) {\n    this.label = label || (finding && finding.CodeMeaning);\n    this.finding = finding || {\n      CodingSchemeDesignator: '@ohif/extension-dicom-microscopy',\n      CodeValue: label,\n      CodeMeaning: label,\n    };\n    this._broadcastEvent(EVENTS.LABEL_UPDATED, this);\n  }\n\n  /**\n   * Returns the geometry type of the annotation concatenated with the label\n   * defined for the annotation.\n   * Difference with getDetailedLabel() is that this will return empty string for empy\n   * label.\n   *\n   * @returns {String} Text with geometry type and label\n   */\n  getLabel() {\n    const label = this.label ? `${this.label}` : '';\n    return label;\n  }\n\n  /**\n   * Returns the geometry type of the annotation concatenated with the label\n   * defined for the annotation\n   *\n   * @returns {String} Text with geometry type and label\n   */\n  getDetailedLabel() {\n    const label = this.label ? `${this.label}` : '(empty)';\n    return label;\n  }\n\n  getLength() {\n    return this._length;\n  }\n\n  getArea() {\n    return this._area;\n  }\n}\n\nexport { EVENTS };\n\nexport default RoiAnnotation;\n","export default function areaOfPolygon(coordinates) {\n  // Shoelace algorithm.\n  const n = coordinates.length;\n  let area = 0.0;\n  let j = n - 1;\n\n  for (let i = 0; i < n; i++) {\n    area +=\n      (coordinates[j][0] + coordinates[i][0]) *\n      (coordinates[j][1] - coordinates[i][1]);\n    j = i; // j is previous vertex to i\n  }\n\n  // Return absolute value of half the sum\n  // (The value is halved as we are summing up triangles, not rectangles).\n  return Math.abs(area / 2.0);\n}\n","import React from 'react';\nimport { Input, Dialog } from '@ohif/ui';\n\n/**\n *\n * @param {*} data\n * @param {*} data.text\n * @param {*} data.label\n * @param {*} event\n * @param {func} callback\n * @param {*} isArrowAnnotateInputDialog\n */\nexport default function callInputDialog({\n  uiDialogService,\n  title = 'Annotation',\n  defaultValue = '',\n  callback = (value: string, action: string) => {}\n}) {\n  const dialogId = 'microscopy-input-dialog';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.value, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: title,\n        value: { value: defaultValue },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\n          { id: 'save', text: 'Save', type: 'secondary' },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              label=\"Enter your annotation\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              className=\"bg-black border-primary-main\"\n              type=\"text\"\n              value={value.defaultValue}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, value: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n","import dcmjs from 'dcmjs';\nimport DEVICE_OBSERVER_UID from './DEVICE_OBSERVER_UID';\n\n/**\n *\n * @param {*} metadata - Microscopy Image instance metadata\n * @param {*} SeriesDescription - SR description\n * @param {*} annotations - Annotations\n *\n * @return Comprehensive3DSR dataset\n */\nexport default function constructSR(\n  metadata,\n  { SeriesDescription, SeriesNumber },\n  annotations\n) {\n  // Handle malformed data\n  if (!metadata.SpecimenDescriptionSequence) {\n    metadata.SpecimenDescriptionSequence = {\n      SpecimenUID: metadata.SeriesInstanceUID,\n      SpecimenIdentifier: metadata.SeriesDescription,\n    };\n  }\n  const { SpecimenDescriptionSequence } = metadata;\n\n  // construct Comprehensive3DSR dataset\n  const observationContext = new dcmjs.sr.templates.ObservationContext({\n    observerPersonContext: new dcmjs.sr.templates.ObserverContext({\n      observerType: new dcmjs.sr.coding.CodedConcept({\n        value: '121006',\n        schemeDesignator: 'DCM',\n        meaning: 'Person',\n      }),\n      observerIdentifyingAttributes: new dcmjs.sr.templates.PersonObserverIdentifyingAttributes(\n        {\n          name: '@ohif/extension-dicom-microscopy',\n        }\n      ),\n    }),\n    observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\n      observerType: new dcmjs.sr.coding.CodedConcept({\n        value: '121007',\n        schemeDesignator: 'DCM',\n        meaning: 'Device',\n      }),\n      observerIdentifyingAttributes: new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes(\n        {\n          uid: DEVICE_OBSERVER_UID,\n        }\n      ),\n    }),\n    subjectContext: new dcmjs.sr.templates.SubjectContext({\n      subjectClass: new dcmjs.sr.coding.CodedConcept({\n        value: '121027',\n        schemeDesignator: 'DCM',\n        meaning: 'Specimen',\n      }),\n      subjectClassSpecificContext: new dcmjs.sr.templates.SubjectContextSpecimen(\n        {\n          uid: SpecimenDescriptionSequence.SpecimenUID,\n          identifier:\n            SpecimenDescriptionSequence.SpecimenIdentifier ||\n            metadata.SeriesInstanceUID,\n          containerIdentifier:\n            metadata.ContainerIdentifier || metadata.SeriesInstanceUID,\n        }\n      ),\n    }),\n  });\n\n  const imagingMeasurements = [];\n  for (let i = 0; i < annotations.length; i++) {\n    const { roiGraphic: roi, label } = annotations[i];\n    let {\n      measurements,\n      evaluations,\n      marker,\n      presentationState,\n    } = roi.properties;\n\n    console.debug('[SR] storing marker...', marker);\n    console.debug('[SR] storing measurements...', measurements);\n    console.debug('[SR] storing evaluations...', evaluations);\n    console.debug('[SR] storing presentation state...', presentationState);\n\n    if (presentationState) presentationState.marker = marker;\n\n    /** Avoid incompatibility with dcmjs */\n    measurements = measurements.map((measurement: any) => {\n      const ConceptName = Array.isArray(measurement.ConceptNameCodeSequence)\n        ? measurement.ConceptNameCodeSequence[0]\n        : measurement.ConceptNameCodeSequence;\n\n      const MeasuredValue = Array.isArray(measurement.MeasuredValueSequence)\n        ? measurement.MeasuredValueSequence[0]\n        : measurement.MeasuredValueSequence;\n\n      const MeasuredValueUnits = Array.isArray(\n        MeasuredValue.MeasurementUnitsCodeSequence\n      )\n        ? MeasuredValue.MeasurementUnitsCodeSequence[0]\n        : MeasuredValue.MeasurementUnitsCodeSequence;\n\n      return new dcmjs.sr.valueTypes.NumContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          meaning: ConceptName.CodeMeaning,\n          value: ConceptName.CodeValue,\n          schemeDesignator: ConceptName.CodingSchemeDesignator,\n        }),\n        value: MeasuredValue.NumericValue,\n        unit: new dcmjs.sr.coding.CodedConcept({\n          value: MeasuredValueUnits.CodeValue,\n          meaning: MeasuredValueUnits.CodeMeaning,\n          schemeDesignator: MeasuredValueUnits.CodingSchemeDesignator,\n        }),\n      });\n    });\n\n    /** Avoid incompatibility with dcmjs */\n    evaluations = evaluations.map((evaluation: any) => {\n      const ConceptName = Array.isArray(evaluation.ConceptNameCodeSequence)\n        ? evaluation.ConceptNameCodeSequence[0]\n        : evaluation.ConceptNameCodeSequence;\n\n      return new dcmjs.sr.valueTypes.TextContentItem({\n        name: new dcmjs.sr.coding.CodedConcept({\n          value: ConceptName.CodeValue,\n          meaning: ConceptName.CodeMeaning,\n          schemeDesignator: ConceptName.CodingSchemeDesignator,\n        }),\n        value: evaluation.TextValue,\n        relationshipType: evaluation.RelationshipType,\n      });\n    });\n\n    const identifier = `ROI #${i + 1}`;\n    const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations(\n      {\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\n          uid: roi.uid,\n          identifier: presentationState\n            ? identifier.concat(`(${JSON.stringify(presentationState)})`)\n            : identifier,\n        }),\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\n          graphicType: roi.scoord3d.graphicType,\n          graphicData: roi.scoord3d.graphicData,\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID,\n        }),\n        findingType: new dcmjs.sr.coding.CodedConcept({\n          value: label,\n          schemeDesignator: '@ohif/extension-dicom-microscopy',\n          meaning: 'FREETEXT',\n        }),\n        /** Evaluations will conflict with current tracking identifier */\n        /** qualitativeEvaluations: evaluations, */\n        measurements,\n      }\n    );\n    imagingMeasurements.push(...group);\n  }\n\n  const measurementReport = new dcmjs.sr.templates.MeasurementReport({\n    languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants(\n      {}\n    ),\n    observationContext,\n    procedureReported: new dcmjs.sr.coding.CodedConcept({\n      value: '112703',\n      schemeDesignator: 'DCM',\n      meaning: 'Whole Slide Imaging',\n    }),\n    imagingMeasurements,\n  });\n\n  const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\n    content: measurementReport[0],\n    evidence: [metadata],\n    seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n    seriesNumber: SeriesNumber,\n    seriesDescription:\n      SeriesDescription || 'Whole slide imaging structured report',\n    sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\n    instanceNumber: 1,\n    manufacturer: 'dcmjs-org',\n  });\n  dataset.SpecificCharacterSet = 'ISO_IR 192';\n  const fileMetaInformationVersionArray = new Uint8Array(2);\n  fileMetaInformationVersionArray[1] = 1;\n\n  dataset._meta = {\n    FileMetaInformationVersion: {\n      Value: [fileMetaInformationVersionArray.buffer], // TODO\n      vr: 'OB',\n    },\n    MediaStorageSOPClassUID: dataset.sopClassUID,\n    MediaStorageSOPInstanceUID: dataset.sopInstanceUID,\n    TransferSyntaxUID: {\n      Value: ['1.2.840.10008.1.2.1'],\n      vr: 'UI',\n    },\n    ImplementationClassUID: {\n      Value: [dcmjs.data.DicomMetaDictionary.uid()],\n      vr: 'UI',\n    },\n    ImplementationVersionName: {\n      Value: ['@ohif/extension-dicom-microscopy'],\n      vr: 'SH',\n    },\n  };\n\n  return dataset;\n}\n","import { inv, multiply } from 'mathjs';\n\n// TODO -> This is pulled out of some internal logic from Dicom Microscopy Viewer,\n// We should likely just expose this there.\n\nexport default function coordinateFormatScoord3d2Geometry(\n  coordinates,\n  pyramid\n) {\n  let transform = false;\n  if (!Array.isArray(coordinates[0])) {\n    coordinates = [coordinates];\n    transform = true;\n  }\n  const metadata = pyramid[pyramid.length - 1];\n  const orientation = metadata.ImageOrientationSlide;\n  const spacing = _getPixelSpacing(metadata);\n  const origin = metadata.TotalPixelMatrixOriginSequence[0];\n  const offset = [\n    Number(origin.XOffsetInSlideCoordinateSystem),\n    Number(origin.YOffsetInSlideCoordinateSystem),\n  ];\n\n  coordinates = coordinates.map(c => {\n    const slideCoord = [c[0], c[1]];\n    const pixelCoord = mapSlideCoord2PixelCoord({\n      offset,\n      orientation,\n      spacing,\n      point: slideCoord,\n    });\n    return [pixelCoord[0], -(pixelCoord[1] + 1), 0];\n  });\n  if (transform) {\n    return coordinates[0];\n  }\n  return coordinates;\n}\n\nfunction _getPixelSpacing(metadata) {\n  if (metadata.PixelSpacing) return metadata.PixelSpacing;\n  const functionalGroup = metadata.SharedFunctionalGroupsSequence[0];\n  const pixelMeasures = functionalGroup.PixelMeasuresSequence[0];\n  return pixelMeasures.PixelSpacing;\n}\n\nfunction mapSlideCoord2PixelCoord(options) {\n  // X and Y Offset in Slide Coordinate System\n  if (!('offset' in options)) {\n    throw new Error('Option \"offset\" is required.');\n  }\n  if (!Array.isArray(options.offset)) {\n    throw new Error('Option \"offset\" must be an array.');\n  }\n  if (options.offset.length !== 2) {\n    throw new Error('Option \"offset\" must be an array with 2 elements.');\n  }\n  const offset = options.offset;\n\n  // Image Orientation Slide with direction cosines for Row and Column direction\n  if (!('orientation' in options)) {\n    throw new Error('Option \"orientation\" is required.');\n  }\n  if (!Array.isArray(options.orientation)) {\n    throw new Error('Option \"orientation\" must be an array.');\n  }\n  if (options.orientation.length !== 6) {\n    throw new Error('Option \"orientation\" must be an array with 6 elements.');\n  }\n  const orientation = options.orientation;\n\n  // Pixel Spacing along the Row and Column direction\n  if (!('spacing' in options)) {\n    throw new Error('Option \"spacing\" is required.');\n  }\n  if (!Array.isArray(options.spacing)) {\n    throw new Error('Option \"spacing\" must be an array.');\n  }\n  if (options.spacing.length !== 2) {\n    throw new Error('Option \"spacing\" must be an array with 2 elements.');\n  }\n  const spacing = options.spacing;\n\n  // X and Y coordinate in the Slide Coordinate System\n  if (!('point' in options)) {\n    throw new Error('Option \"point\" is required.');\n  }\n  if (!Array.isArray(options.point)) {\n    throw new Error('Option \"point\" must be an array.');\n  }\n  if (options.point.length !== 2) {\n    throw new Error('Option \"point\" must be an array with 2 elements.');\n  }\n  const point = options.point;\n\n  const m = [\n    [orientation[0] * spacing[1], orientation[3] * spacing[0], offset[0]],\n    [orientation[1] * spacing[1], orientation[4] * spacing[0], offset[1]],\n    [0, 0, 1],\n  ];\n  const mInverted = inv(m);\n\n  const vSlide = [[point[0]], [point[1]], [1]];\n\n  const vImage = multiply(mInverted, vSlide);\n\n  const row = Number(vImage[1][0].toFixed(4));\n  const col = Number(vImage[0][0].toFixed(4));\n  return [col, row];\n}\n","const DCM_CODE_VALUES = {\n  IMAGING_MEASUREMENTS: '126010',\n  MEASUREMENT_GROUP: '125007',\n  IMAGE_REGION: '111030',\n  FINDING: '121071',\n  TRACKING_UNIQUE_IDENTIFIER: '112039',\n  LENGTH: '410668003',\n  AREA: '42798000',\n  SHORT_AXIS: 'G-A186',\n  LONG_AXIS: 'G-A185',\n  ELLIPSE_AREA: 'G-D7FE', // TODO: Remove this\n};\n\nexport default DCM_CODE_VALUES;\n","/**\n * Get referenced SM displaySet from SR displaySet\n *\n * @param {*} allDisplaySets\n * @param {*} microscopySRDisplaySet\n * @returns\n */\nexport default function getSourceDisplaySet(\n  allDisplaySets,\n  microscopySRDisplaySet\n) {\n  const { ReferencedFrameOfReferenceUID } = microscopySRDisplaySet;\n\n  const otherDisplaySets = allDisplaySets.filter(\n    ds =>\n      ds.displaySetInstanceUID !== microscopySRDisplaySet.displaySetInstanceUID\n  );\n  const referencedDisplaySet = otherDisplaySets.find(\n    displaySet =>\n      displaySet.Modality === 'SM' &&\n      (displaySet.FrameOfReferenceUID === ReferencedFrameOfReferenceUID ||\n        // sometimes each depth instance has the different FrameOfReferenceID\n        displaySet.othersFrameOfReferenceUID.includes(\n          ReferencedFrameOfReferenceUID\n        ))\n  );\n\n  if (!referencedDisplaySet && otherDisplaySets.length >= 1) {\n    console.warn(\n      'No display set with FrameOfReferenceUID',\n      ReferencedFrameOfReferenceUID,\n      'single series, assuming data error, defaulting to only series.'\n    );\n    return otherDisplaySets.find(displaySet => displaySet.Modality === 'SM');\n  }\n\n  return referencedDisplaySet;\n}\n","import dcmjs from 'dcmjs';\n\nimport DCM_CODE_VALUES from './dcmCodeValues';\nimport toArray from './toArray';\n\nconst MeasurementReport =\n  dcmjs.adapters.DICOMMicroscopyViewer.MeasurementReport;\n\n// Define as async so that it returns a promise, expected by the ViewportGrid\nexport default async function loadSR(\n  microscopyService,\n  microscopySRDisplaySet,\n  referencedDisplaySet\n) {\n  const naturalizedDataset = microscopySRDisplaySet.metadata;\n\n  const { StudyInstanceUID, FrameOfReferenceUID } = referencedDisplaySet;\n\n  const managedViewers = microscopyService.getManagedViewersForStudy(\n    StudyInstanceUID\n  );\n\n  if (!managedViewers || !managedViewers.length) {\n    return;\n  }\n\n  microscopySRDisplaySet.isLoaded = true;\n\n  const { rois, labels } = await _getROIsFromToolState(\n    naturalizedDataset,\n    FrameOfReferenceUID\n  );\n\n  const managedViewer = managedViewers[0];\n\n  for (let i = 0; i < rois.length; i++) {\n    // NOTE: When saving Microscopy SR, we are attaching identifier property\n    // to each ROI, and when read for display, it is coming in as \"TEXT\"\n    // evaluation.\n    // As the Dicom Microscopy Viewer will override styles for \"Text\" evalutations\n    // to hide all other geometries, we are going to manually remove that\n    // evaluation item.\n    const roi = rois[i];\n    const roiSymbols = Object.getOwnPropertySymbols(roi);\n    const _properties = roiSymbols.find(s => s.description === 'properties');\n    const properties = roi[_properties];\n    properties['evaluations'] = [];\n\n    managedViewer.addRoiGraphicWithLabel(roi, labels[i]);\n  }\n}\n\nasync function _getROIsFromToolState(naturalizedDataset, FrameOfReferenceUID) {\n  const toolState = MeasurementReport.generateToolState(naturalizedDataset);\n  const tools = Object.getOwnPropertyNames(toolState);\n\n  const DICOMMicroscopyViewer = await import(\n    /* webpackChunkName: \"dicom-microscopy-viewer\" */ 'dicom-microscopy-viewer'\n  );\n\n  const measurementGroupContentItems = _getMeasurementGroups(\n    naturalizedDataset\n  );\n\n  const rois = [];\n  const labels = [];\n\n  tools.forEach(t => {\n    const toolSpecificToolState = toolState[t];\n    let scoord3d;\n\n    const capsToolType = t.toUpperCase();\n\n    const measurementGroupContentItemsForTool = measurementGroupContentItems.filter(\n      mg => {\n        const imageRegionContentItem = toArray(mg.ContentSequence).find(\n          ci =>\n            ci.ConceptNameCodeSequence.CodeValue ===\n            DCM_CODE_VALUES.IMAGE_REGION\n        );\n\n        return imageRegionContentItem.GraphicType === capsToolType;\n      }\n    );\n\n    toolSpecificToolState.forEach((coordinates, index) => {\n      const properties = {};\n\n      const options = {\n        coordinates,\n        frameOfReferenceUID: FrameOfReferenceUID,\n      };\n\n      if (t === 'Polygon') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polygon(options);\n      } else if (t === 'Polyline') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polyline(options);\n      } else if (t === 'Point') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Point(options);\n      } else if (t === 'Ellipse') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Ellipse(options);\n      } else {\n        throw new Error('Unsupported tool type');\n      }\n\n      const measurementGroup = measurementGroupContentItemsForTool[index];\n      const findingGroup = toArray(measurementGroup.ContentSequence).find(\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.FINDING\n      );\n\n      const trackingGroup = toArray(measurementGroup.ContentSequence).find(\n        ci =>\n          ci.ConceptNameCodeSequence.CodeValue ===\n          DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER\n      );\n\n      /**\n       * Extract presentation state from tracking identifier.\n       * Currently is stored in SR but should be stored in its tags.\n       */\n      if (trackingGroup) {\n        const regExp = /\\(([^)]+)\\)/;\n        const matches = regExp.exec(trackingGroup.TextValue);\n        if (matches && matches[1]) {\n          properties.presentationState = JSON.parse(matches[1]);\n          properties.marker = properties.presentationState.marker;\n        }\n      }\n\n      let measurements = toArray(measurementGroup.ContentSequence).filter(ci =>\n        [\n          DCM_CODE_VALUES.LENGTH,\n          DCM_CODE_VALUES.AREA,\n          DCM_CODE_VALUES.SHORT_AXIS,\n          DCM_CODE_VALUES.LONG_AXIS,\n          DCM_CODE_VALUES.ELLIPSE_AREA,\n        ].includes(ci.ConceptNameCodeSequence.CodeValue)\n      );\n\n      let evaluations = toArray(measurementGroup.ContentSequence).filter(ci =>\n        [DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER].includes(\n          ci.ConceptNameCodeSequence.CodeValue\n        )\n      );\n\n      /**\n       * TODO: Resolve bug in DCMJS.\n       * ConceptNameCodeSequence should be a sequence with only one item.\n       */\n      evaluations = evaluations.map(evaluation => {\n        const e = { ...evaluation };\n        e.ConceptNameCodeSequence = toArray(e.ConceptNameCodeSequence);\n        return e;\n      });\n\n      /**\n       * TODO: Resolve bug in DCMJS.\n       * ConceptNameCodeSequence should be a sequence with only one item.\n       */\n      measurements = measurements.map(measurement => {\n        const m = { ...measurement };\n        m.ConceptNameCodeSequence = toArray(m.ConceptNameCodeSequence);\n        return m;\n      });\n\n      if (measurements && measurements.length) {\n        properties.measurements = measurements;\n        console.debug('[SR] retrieving measurements...', measurements);\n      }\n\n      if (evaluations && evaluations.length) {\n        properties.evaluations = evaluations;\n        console.debug('[SR] retrieving evaluations...', evaluations);\n      }\n\n      const roi = new DICOMMicroscopyViewer.roi.ROI({ scoord3d, properties });\n      rois.push(roi);\n\n      if (findingGroup) {\n        labels.push(findingGroup.ConceptCodeSequence.CodeValue);\n      } else {\n        labels.push('');\n      }\n    });\n  });\n\n  return { rois, labels };\n}\n\nfunction _getMeasurementGroups(naturalizedDataset) {\n  const { ContentSequence } = naturalizedDataset;\n\n  const imagingMeasurementsContentItem = ContentSequence.find(\n    ci =>\n      ci.ConceptNameCodeSequence.CodeValue ===\n      DCM_CODE_VALUES.IMAGING_MEASUREMENTS\n  );\n\n  const measurementGroupContentItems = toArray(\n    imagingMeasurementsContentItem.ContentSequence\n  ).filter(\n    ci =>\n      ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP\n  );\n\n  return measurementGroupContentItems;\n}\n","/**\n * Trigger file download from an array buffer\n * @param buffer\n * @param filename\n */\nexport function saveByteArray(buffer: ArrayBuffer, filename: string) {\n  var blob = new Blob([buffer], { type: 'application/dicom' });\n  var link = document.createElement('a');\n  link.href = window.URL.createObjectURL(blob);\n  link.download = filename;\n  link.click();\n}\n","const defaultFill = {\n  color: 'rgba(255,255,255,0.4)',\n};\n\nconst emptyFill = {\n  color: 'rgba(255,255,255,0.0)',\n};\n\nconst defaultStroke = {\n  color: 'rgb(0,255,0)',\n  width: 1.5,\n};\n\nconst activeStroke = {\n  color: 'rgb(255,255,0)',\n  width: 1.5,\n};\n\nconst defaultStyle = {\n  image: {\n    circle: {\n      fill: defaultFill,\n      stroke: activeStroke,\n      radius: 5,\n    },\n  },\n  fill: defaultFill,\n  stroke: activeStroke,\n};\n\nconst emptyStyle = {\n  image: {\n    circle: {\n      fill: emptyFill,\n      stroke: defaultStroke,\n      radius: 5,\n    },\n  },\n  fill: emptyFill,\n  stroke: defaultStroke,\n};\n\nconst styles = {\n  active: defaultStyle,\n  default: emptyStyle,\n};\n\nexport default styles;\n","export default function toArray(item) {\n  return Array.isArray(item) ? item : [item];\n}\n","/* (ignored) */"],"names":[],"sourceRoot":""}