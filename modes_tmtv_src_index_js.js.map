{"version":3,"file":"modes_tmtv_src_index_js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AAAA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAOA;AACA;AAGA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjPA;AAEA;AAOA;AAIA;AAMA;AAOA;AACA;AAgNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AClPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAGA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAGA;AAKA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjMA;AASA;AAqHA;AA8DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AC5LA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AASA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;AAcA;AAAA;AAcA;AAAA;AAcA;AAAA;AAcA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAYA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvWA;AAQA;AAWA;AAyBA;AACA;AACA;AAQA;AAkBA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACzFA;AAEA;AAMA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAIA;AAKA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAMA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;AAEA;AAKA;;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxDA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["file:////Users/smartxx/xV/DICOM/Viewers/modes/tmtv/src/id.js","file:////Users/smartxx/xV/DICOM/Viewers/modes/tmtv/src/index.js","file:////Users/smartxx/xV/DICOM/Viewers/modes/tmtv/src/initToolGroups.js","file:////Users/smartxx/xV/DICOM/Viewers/modes/tmtv/src/toolbarButtons.js","file:////Users/smartxx/xV/DICOM/Viewers/modes/tmtv/src/utils/setCrosshairsConfiguration.js","file:////Users/smartxx/xV/DICOM/Viewers/modes/tmtv/src/utils/setFusionActiveVolume.js"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { hotkeys, classes } from '@ohif/core';\nimport toolbarButtons from './toolbarButtons.js';\nimport { id } from './id.js';\nimport initToolGroups, { toolGroupIds } from './initToolGroups.js';\nimport setCrosshairsConfiguration from './utils/setCrosshairsConfiguration.js';\nimport setFusionActiveVolume from './utils/setFusionActiveVolume.js';\n\nconst { MetadataProvider } = classes;\n\nconst ohif = {\n  layout: '@ohif/extension-default.layoutTemplateModule.viewerLayout',\n  sopClassHandler: '@ohif/extension-default.sopClassHandlerModule.stack',\n  measurements: '@ohif/extension-default.panelModule.measure',\n  thumbnailList: '@ohif/extension-default.panelModule.seriesList',\n};\n\nconst cs3d = {\n  viewport: '@ohif/extension-cornerstone.viewportModule.cornerstone',\n};\n\nconst tmtv = {\n  hangingProtocol: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\n  petSUV: '@ohif/extension-tmtv.panelModule.petSUV',\n  ROIThresholdPanel: '@ohif/extension-tmtv.panelModule.ROIThresholdSeg',\n};\n\nconst extensionDependencies = {\n  // Can derive the versions at least process.env.from npm_package_version\n  '@ohif/extension-default': '^3.0.0',\n  '@ohif/extension-cornerstone': '^3.0.0',\n  '@ohif/extension-tmtv': '^3.0.0',\n};\n\nlet unsubscriptions = [];\nfunction modeFactory({ modeConfiguration }) {\n  return {\n    // TODO: We're using this as a route segment\n    // We should not be.\n    id,\n    routeName: 'tmtv',\n    displayName: 'Total Metabolic Tumor Volume',\n    /**\n     * Lifecycle hooks\n     */\n    onModeEnter: ({ servicesManager, extensionManager, commandsManager }) => {\n      const {\n        toolbarService,\n        toolGroupService,\n        hangingProtocolService,\n        displaySetService,\n      } = servicesManager.services;\n\n      const utilityModule = extensionManager.getModuleEntry(\n        '@ohif/extension-cornerstone.utilityModule.tools'\n      );\n\n      const { toolNames, Enums } = utilityModule.exports;\n\n      // Init Default and SR ToolGroups\n      initToolGroups(toolNames, Enums, toolGroupService, commandsManager);\n\n      const setWindowLevelActive = () => {\n        toolbarService.recordInteraction({\n          groupId: 'WindowLevel',\n          itemId: 'WindowLevel',\n          interactionType: 'tool',\n          commands: [\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: toolNames.WindowLevel,\n                toolGroupId: toolGroupIds.CT,\n              },\n              context: 'CORNERSTONE',\n            },\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: toolNames.WindowLevel,\n                toolGroupId: toolGroupIds.PT,\n              },\n              context: 'CORNERSTONE',\n            },\n            {\n              commandName: 'setToolActive',\n              commandOptions: {\n                toolName: toolNames.WindowLevel,\n                toolGroupId: toolGroupIds.Fusion,\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n        });\n      };\n\n      const { unsubscribe } = toolGroupService.subscribe(\n        toolGroupService.EVENTS.VIEWPORT_ADDED,\n        () => {\n          // For fusion toolGroup we need to add the volumeIds for the crosshairs\n          // since in the fusion viewport we don't want both PT and CT to render MIP\n          // when slabThickness is modified\n          const {\n            displaySetMatchDetails,\n          } = hangingProtocolService.getMatchDetails();\n\n          setCrosshairsConfiguration(\n            displaySetMatchDetails,\n            toolNames,\n            toolGroupService,\n            displaySetService\n          );\n\n          setFusionActiveVolume(\n            displaySetMatchDetails,\n            toolNames,\n            toolGroupService,\n            displaySetService\n          );\n\n          setWindowLevelActive();\n        }\n      );\n\n      unsubscriptions.push(unsubscribe);\n      toolbarService.init(extensionManager);\n      toolbarService.addButtons(toolbarButtons);\n      toolbarService.createButtonSection('primary', [\n        'MeasurementTools',\n        'Zoom',\n        'WindowLevel',\n        'Crosshairs',\n        'Pan',\n        'RectangleROIStartEndThreshold',\n        'fusionPTColormap',\n      ]);\n\n      // For the hanging protocol we need to decide on the window level\n      // based on whether the SUV is corrected or not, hence we can't hard\n      // code the window level in the hanging protocol but we add a custom\n      // attribute to the hanging protocol that will be used to get the\n      // window level based on the metadata\n      hangingProtocolService.addCustomAttribute(\n        'getPTVOIRange',\n        'get PT VOI based on corrected or not',\n        props => {\n          const ptDisplaySet = props.find(\n            imageSet => imageSet.Modality === 'PT'\n          );\n\n          if (!ptDisplaySet) {\n            return;\n          }\n\n          const { imageId } = ptDisplaySet.images[0];\n          const imageIdScalingFactor = MetadataProvider.get(\n            'scalingModule',\n            imageId\n          );\n\n          const isSUVAvailable =\n            imageIdScalingFactor && imageIdScalingFactor.suvbw;\n\n          if (isSUVAvailable) {\n            return {\n              windowWidth: 5,\n              windowCenter: 2.5,\n            };\n          }\n\n          return;\n        }\n      );\n    },\n    onModeExit: ({ servicesManager }) => {\n      const {\n        toolGroupService,\n        syncGroupService,\n        segmentationService,\n        cornerstoneViewportService,\n      } = servicesManager.services;\n\n      unsubscriptions.forEach(unsubscribe => unsubscribe());\n      toolGroupService.destroy();\n      syncGroupService.destroy();\n      segmentationService.destroy();\n      cornerstoneViewportService.destroy();\n    },\n    validationTags: {\n      study: [],\n      series: [],\n    },\n    isValidMode: ({ modalities, study }) => {\n      const modalities_list = modalities.split('\\\\');\n      const invalidModalities = ['SM'];\n\n      const isValid =\n        modalities_list.includes('CT') &&\n        modalities_list.includes('PT') &&\n        !invalidModalities.some(modality =>\n          modalities_list.includes(modality)\n        ) &&\n        // This is study is a 4D study with PT and CT and not a 3D study for the tmtv\n        // mode, until we have a better way to identify 4D studies we will use the\n        // StudyInstanceUID to identify the study\n        // Todo: when we add the 4D mode which comes with a mechanism to identify\n        // 4D studies we can use that\n        study.studyInstanceUid !==\n          '1.3.6.1.4.1.12842.1.1.14.3.20220915.105557.468.2963630849';\n\n      // there should be both CT and PT modalities and the modality should not be SM\n      return isValid;\n    },\n    routes: [\n      {\n        path: 'tmtv',\n        /*init: ({ servicesManager, extensionManager }) => {\n          //defaultViewerRouteInit\n        },*/\n        layoutTemplate: ({ location, servicesManager }) => {\n          return {\n            id: ohif.layout,\n            props: {\n              // leftPanels: [ohif.thumbnailList],\n              rightPanels: [tmtv.ROIThresholdPanel, tmtv.petSUV],\n              viewports: [\n                {\n                  namespace: cs3d.viewport,\n                  displaySetsToDisplay: [ohif.sopClassHandler],\n                },\n              ],\n            },\n          };\n        },\n      },\n    ],\n    extensions: extensionDependencies,\n    hangingProtocol: tmtv.hangingProtocol,\n    sopClassHandlers: [ohif.sopClassHandler],\n    hotkeys: [...hotkeys.defaults.hotkeyBindings],\n  };\n}\n\nconst mode = {\n  id,\n  modeFactory,\n  extensionDependencies,\n};\n\nexport default mode;\n","export const toolGroupIds = {\n  CT: 'ctToolGroup',\n  PT: 'ptToolGroup',\n  Fusion: 'fusionToolGroup',\n  MIP: 'mipToolGroup',\n  default: 'default',\n  // MPR: 'mpr',\n};\n\nfunction _initToolGroups(toolNames, Enums, toolGroupService, commandsManager) {\n  const tools = {\n    active: [\n      {\n        toolName: toolNames.WindowLevel,\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n      {\n        toolName: toolNames.Pan,\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\n      },\n      {\n        toolName: toolNames.Zoom,\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\n      },\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\n    ],\n    passive: [\n      { toolName: toolNames.Length },\n      { toolName: toolNames.ArrowAnnotate },\n      { toolName: toolNames.Bidirectional },\n      { toolName: toolNames.DragProbe },\n      { toolName: toolNames.Probe },\n      { toolName: toolNames.EllipticalROI },\n      { toolName: toolNames.RectangleROI },\n      { toolName: toolNames.StackScroll },\n      { toolName: toolNames.Angle },\n      { toolName: toolNames.CobbAngle },\n      { toolName: toolNames.Magnify },\n    ],\n    enabled: [{ toolName: toolNames.SegmentationDisplay }],\n    disabled: [{ toolName: toolNames.Crosshairs }],\n  };\n\n  const toolsConfig = {\n    [toolNames.Crosshairs]: {\n      viewportIndicators: false,\n      autoPan: {\n        enabled: false,\n        panSize: 10,\n      },\n    },\n    [toolNames.ArrowAnnotate]: {\n      getTextCallback: (callback, eventDetails) => {\n        commandsManager.runCommand('arrowTextCallback', {\n          callback,\n          eventDetails,\n        });\n      },\n\n      changeTextCallback: (data, eventDetails, callback) =>\n        commandsManager.runCommand('arrowTextCallback', {\n          callback,\n          data,\n          eventDetails,\n        }),\n    },\n  };\n\n  toolGroupService.createToolGroupAndAddTools(\n    toolGroupIds.CT,\n    tools,\n    toolsConfig\n  );\n  toolGroupService.createToolGroupAndAddTools(\n    toolGroupIds.PT,\n    {\n      active: tools.active,\n      passive: [\n        ...tools.passive,\n        { toolName: 'RectangleROIStartEndThreshold' },\n      ],\n      enabled: tools.enabled,\n      disabled: tools.disabled,\n    },\n    toolsConfig\n  );\n  toolGroupService.createToolGroupAndAddTools(\n    toolGroupIds.Fusion,\n    tools,\n    toolsConfig\n  );\n  toolGroupService.createToolGroupAndAddTools(\n    toolGroupIds.default,\n    tools,\n    toolsConfig\n  );\n\n  const mipTools = {\n    active: [\n      {\n        toolName: toolNames.VolumeRotateMouseWheel,\n      },\n      {\n        toolName: toolNames.MipJumpToClick,\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n    ],\n    enabled: [{ toolName: toolNames.SegmentationDisplay }],\n  };\n\n  const mipToolsConfig = {\n    [toolNames.VolumeRotateMouseWheel]: {\n      rotateIncrementDegrees: 0.1,\n    },\n    [toolNames.MipJumpToClick]: {\n      targetViewportIds: ['ptAXIAL', 'ptCORONAL', 'ptSAGITTAL'],\n    },\n  };\n\n  toolGroupService.createToolGroupAndAddTools(\n    toolGroupIds.MIP,\n    mipTools,\n    mipToolsConfig\n  );\n}\n\nfunction initMPRToolGroup(toolNames, Enums, toolGroupService, commandsManager) {\n  const tools = {\n    active: [\n      {\n        toolName: toolNames.WindowLevel,\n        bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n      },\n      {\n        toolName: toolNames.Pan,\n        bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\n      },\n      {\n        toolName: toolNames.Zoom,\n        bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\n      },\n      { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\n    ],\n    passive: [\n      { toolName: toolNames.Length },\n      { toolName: toolNames.ArrowAnnotate },\n      { toolName: toolNames.Bidirectional },\n      { toolName: toolNames.DragProbe },\n      { toolName: toolNames.EllipticalROI },\n      { toolName: toolNames.RectangleROI },\n      { toolName: toolNames.StackScroll },\n      { toolName: toolNames.Angle },\n      { toolName: toolNames.CobbAngle },\n      { toolName: toolNames.SegmentationDisplay },\n    ],\n    disabled: [{ toolName: toolNames.Crosshairs }],\n\n    // enabled\n    // disabled\n  };\n\n  const toolsConfig = {\n    [toolNames.Crosshairs]: {\n      viewportIndicators: false,\n      autoPan: {\n        enabled: false,\n        panSize: 10,\n      },\n    },\n    [toolNames.ArrowAnnotate]: {\n      getTextCallback: (callback, eventDetails) =>\n        commandsManager.runCommand('arrowTextCallback', {\n          callback,\n          eventDetails,\n        }),\n\n      changeTextCallback: (data, eventDetails, callback) =>\n        commandsManager.runCommand('arrowTextCallback', {\n          callback,\n          data,\n          eventDetails,\n        }),\n    },\n  };\n\n  toolGroupService.createToolGroupAndAddTools('mpr', tools, toolsConfig);\n}\n\nfunction initToolGroups(toolNames, Enums, toolGroupService, commandsManager) {\n  _initToolGroups(toolNames, Enums, toolGroupService, commandsManager);\n  // initMPRToolGroup(toolNames, Enums, toolGroupService, commandsManager);\n}\n\nexport default initToolGroups;\n","// TODO: torn, can either bake this here; or have to create a whole new button type\n// Only ways that you can pass in a custom React component for render :l\nimport { WindowLevelMenuItem } from '@ohif/ui';\nimport { defaults } from '@ohif/core';\nimport { toolGroupIds } from './initToolGroups';\nconst { windowLevelPresets } = defaults;\n/**\n *\n * @param {*} type - 'tool' | 'action' | 'toggle'\n * @param {*} id\n * @param {*} icon\n * @param {*} label\n */\nfunction _createButton(type, id, icon, label, commands, tooltip) {\n  return {\n    id,\n    icon,\n    label,\n    type,\n    commands,\n    tooltip,\n  };\n}\n\nfunction _createColormap(label, colormap) {\n  return {\n    id: label.toString(),\n    title: label,\n    subtitle: label,\n    type: 'action',\n    commands: [\n      {\n        commandName: 'setFusionPTColormap',\n        commandOptions: {\n          toolGroupId: toolGroupIds.Fusion,\n          colormap,\n        },\n      },\n      {\n        commandName: 'setFusionPTColormap',\n        commandOptions: {\n          toolGroupId: toolGroupIds.Fusion,\n          colormap,\n        },\n      },\n    ],\n  };\n}\n\nconst _createActionButton = _createButton.bind(null, 'action');\nconst _createToggleButton = _createButton.bind(null, 'toggle');\nconst _createToolButton = _createButton.bind(null, 'tool');\n\n/**\n *\n * @param {*} preset - preset number (from above import)\n * @param {*} title\n * @param {*} subtitle\n */\nfunction _createWwwcPreset(preset, title, subtitle) {\n  return {\n    id: preset.toString(),\n    title,\n    subtitle,\n    type: 'action',\n    commands: [\n      {\n        commandName: 'setWindowLevel',\n        commandOptions: {\n          ...windowLevelPresets[preset],\n        },\n        context: 'CORNERSTONE',\n      },\n    ],\n  };\n}\n\nfunction _createCommands(commandName, toolName, toolGroupIds) {\n  return toolGroupIds.map(toolGroupId => ({\n    /* It's a command that is being run when the button is clicked. */\n    commandName,\n    commandOptions: {\n      toolName,\n      toolGroupId,\n    },\n    context: 'CORNERSTONE',\n  }));\n}\n\nconst toolbarButtons = [\n  // Measurement\n  {\n    id: 'MeasurementTools',\n    type: 'ohif.splitButton',\n    props: {\n      groupId: 'MeasurementTools',\n      isRadio: true, // ?\n      // Switch?\n      primary: _createToolButton(\n        'Length',\n        'tool-length',\n        'Length',\n        [\n          ..._createCommands('setToolActive', 'Length', [\n            toolGroupIds.CT,\n            toolGroupIds.PT,\n            toolGroupIds.Fusion,\n            // toolGroupIds.MPR,\n          ]),\n        ],\n        'Length'\n      ),\n      secondary: {\n        icon: 'chevron-down',\n        label: '',\n        isActive: true,\n        tooltip: 'More Measure Tools',\n      },\n      items: [\n        _createToolButton(\n          'Length',\n          'tool-length',\n          'Length',\n          [\n            ..._createCommands('setToolActive', 'Length', [\n              toolGroupIds.CT,\n              toolGroupIds.PT,\n              toolGroupIds.Fusion,\n              // toolGroupIds.MPR,\n            ]),\n          ],\n          'Length Tool'\n        ),\n        _createToolButton(\n          'Bidirectional',\n          'tool-bidirectional',\n          'Bidirectional',\n          [\n            ..._createCommands('setToolActive', 'Bidirectional', [\n              toolGroupIds.CT,\n              toolGroupIds.PT,\n              toolGroupIds.Fusion,\n              // toolGroupIds.MPR,\n            ]),\n          ],\n          'Bidirectional Tool'\n        ),\n        _createToolButton(\n          'ArrowAnnotate',\n          'tool-annotate',\n          'Annotation',\n          [\n            ..._createCommands('setToolActive', 'ArrowAnnotate', [\n              toolGroupIds.CT,\n              toolGroupIds.PT,\n              toolGroupIds.Fusion,\n              // toolGroupIds.MPR,\n            ]),\n          ],\n          'Arrow Annotate'\n        ),\n        _createToolButton(\n          'EllipticalROI',\n          'tool-elipse',\n          'Ellipse',\n          [\n            ..._createCommands('setToolActive', 'EllipticalROI', [\n              toolGroupIds.CT,\n              toolGroupIds.PT,\n              toolGroupIds.Fusion,\n              // toolGroupIds.MPR,\n            ]),\n          ],\n          'Ellipse Tool'\n        ),\n        _createToolButton(\n          'CircleROI',\n          'tool-circle',\n          'Circle',\n          [\n            ..._createCommands('setToolActive', 'CircleROI', [\n              toolGroupIds.CT,\n              toolGroupIds.PT,\n              toolGroupIds.Fusion,\n              // toolGroupIds.MPR,\n            ]),\n          ],\n          'Circle Tool'\n        ),\n      ],\n    },\n  },\n  // Zoom..\n  {\n    id: 'Zoom',\n    type: 'ohif.radioGroup',\n    props: {\n      type: 'tool',\n      icon: 'tool-zoom',\n      label: 'Zoom',\n      commands: [\n        ..._createCommands('setToolActive', 'Zoom', [\n          toolGroupIds.CT,\n          toolGroupIds.PT,\n          toolGroupIds.Fusion,\n          // toolGroupIds.MPR,\n        ]),\n      ],\n    },\n  },\n  {\n    id: 'MPR',\n    type: 'ohif.action',\n    props: {\n      type: 'toggle',\n      icon: 'icon-mpr',\n      label: 'MPR',\n      commands: [\n        {\n          commandName: 'toggleHangingProtocol',\n          commandOptions: {\n            protocolId: 'mpr',\n          },\n          context: 'DEFAULT',\n        },\n      ],\n    },\n  },\n  // Window Level + Presets...\n  {\n    id: 'WindowLevel',\n    type: 'ohif.splitButton',\n    props: {\n      groupId: 'WindowLevel',\n      primary: _createToolButton(\n        'WindowLevel',\n        'tool-window-level',\n        'Window Level',\n        [\n          ..._createCommands('setToolActive', 'WindowLevel', [\n            toolGroupIds.CT,\n            toolGroupIds.PT,\n            toolGroupIds.Fusion,\n            // toolGroupIds.MPR,\n          ]),\n        ],\n        'Window Level'\n      ),\n      secondary: {\n        icon: 'chevron-down',\n        label: 'W/L Manual',\n        isActive: true,\n        tooltip: 'W/L Presets',\n      },\n      isAction: true, // ?\n      renderer: WindowLevelMenuItem,\n      items: [\n        _createWwwcPreset(1, 'Soft tissue', '400 / 40'),\n        _createWwwcPreset(2, 'Lung', '1500 / -600'),\n        _createWwwcPreset(3, 'Liver', '150 / 90'),\n        _createWwwcPreset(4, 'Bone', '2500 / 480'),\n        _createWwwcPreset(5, 'Brain', '80 / 40'),\n      ],\n    },\n  },\n  {\n    id: 'Crosshairs',\n    type: 'ohif.radioGroup',\n    props: {\n      type: 'tool',\n      icon: 'tool-crosshair',\n      label: 'Crosshairs',\n      commands: [\n        ..._createCommands('setToolActive', 'Crosshairs', [\n          toolGroupIds.CT,\n          toolGroupIds.PT,\n          toolGroupIds.Fusion,\n          // toolGroupIds.MPR,\n        ]),\n      ],\n    },\n  },\n  // Pan...\n  {\n    id: 'Pan',\n    type: 'ohif.radioGroup',\n    props: {\n      type: 'tool',\n      icon: 'tool-move',\n      label: 'Pan',\n      commands: [\n        ..._createCommands('setToolActive', 'Pan', [\n          toolGroupIds.CT,\n          toolGroupIds.PT,\n          toolGroupIds.Fusion,\n          // toolGroupIds.MPR,\n        ]),\n      ],\n    },\n  },\n  {\n    id: 'RectangleROIStartEndThreshold',\n    type: 'ohif.radioGroup',\n    props: {\n      type: 'tool',\n      icon: 'tool-create-threshold',\n      label: 'Rectangle ROI Threshold',\n      commands: [\n        ..._createCommands('setToolActive', 'RectangleROIStartEndThreshold', [\n          toolGroupIds.PT,\n        ]),\n        {\n          commandName: 'displayNotification',\n          commandOptions: {\n            title: 'RectangleROI Threshold Tip',\n            text: 'RectangleROI Threshold tool should be used on PT Axial Viewport',\n            type: 'info',\n          },\n        },\n        {\n          commandName: 'setViewportActive',\n          commandOptions: {\n            viewportId: 'ptAXIAL',\n          },\n        },\n      ],\n    },\n  },\n  {\n    id: 'fusionPTColormap',\n    type: 'ohif.splitButton',\n    props: {\n      groupId: 'fusionPTColormap',\n      primary: _createToolButton(\n        'fusionPTColormap',\n        'tool-fusion-color',\n        'Fusion PT Colormap',\n        [],\n        'Fusion PT Colormap'\n      ),\n      secondary: {\n        icon: 'chevron-down',\n        label: 'PT Colormap',\n        isActive: true,\n        tooltip: 'PET Image Colormap',\n      },\n      isAction: true, // ?\n      renderer: WindowLevelMenuItem,\n      items: [\n        _createColormap('HSV', 'hsv'),\n        _createColormap('Hot Iron', 'hot_iron'),\n        _createColormap('S PET', 's_pet'),\n        _createColormap('Red Hot', 'red_hot'),\n        _createColormap('Perfusion', 'perfusion'),\n        _createColormap('Rainbow', 'rainbow_2'),\n        _createColormap('SUV', 'suv'),\n        _createColormap('GE 256', 'ge_256'),\n        _createColormap('GE', 'ge'),\n        _createColormap('Siemens', 'siemens'),\n      ],\n    },\n  },\n];\n\nexport default toolbarButtons;\n","import { toolGroupIds } from '../initToolGroups';\n\nexport default function setCrosshairsConfiguration(\n  matches,\n  toolNames,\n  toolGroupService,\n  displaySetService\n) {\n  const matchDetails = matches.get('ctDisplaySet');\n\n  if (!matchDetails) {\n    return;\n  }\n\n  const { SeriesInstanceUID } = matchDetails;\n  const displaySets = displaySetService.getDisplaySetsForSeries(\n    SeriesInstanceUID\n  );\n\n  const toolConfig = toolGroupService.getToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.Crosshairs\n  );\n\n  const crosshairsConfig = {\n    ...toolConfig,\n    filterActorUIDsToSetSlabThickness: [displaySets[0].displaySetInstanceUID],\n  };\n\n  toolGroupService.setToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.Crosshairs,\n    crosshairsConfig\n  );\n}\n","import { toolGroupIds } from '../initToolGroups';\n\nexport default function setFusionActiveVolume(\n  matches,\n  toolNames,\n  toolGroupService,\n  displaySetService\n) {\n  const matchDetails = matches.get('ptDisplaySet');\n\n  if (!matchDetails) {\n    return;\n  }\n\n  const { SeriesInstanceUID } = matchDetails;\n\n  const displaySets = displaySetService.getDisplaySetsForSeries(\n    SeriesInstanceUID\n  );\n\n  if (!displaySets || displaySets.length === 0) {\n    return;\n  }\n\n  const wlToolConfig = toolGroupService.getToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.WindowLevel\n  );\n\n  const ellipticalToolConfig = toolGroupService.getToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.EllipticalROI\n  );\n\n  // Todo: this should not take into account the loader id\n  const volumeId = `cornerstoneStreamingImageVolume:${displaySets[0].displaySetInstanceUID}`;\n\n  const windowLevelConfig = {\n    ...wlToolConfig,\n    volumeId,\n  };\n\n  const ellipticalROIConfig = {\n    ...ellipticalToolConfig,\n    volumeId,\n  };\n\n  toolGroupService.setToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.WindowLevel,\n    windowLevelConfig\n  );\n\n  toolGroupService.setToolConfiguration(\n    toolGroupIds.Fusion,\n    toolNames.EllipticalROI,\n    ellipticalROIConfig\n  );\n}\n"],"names":[],"sourceRoot":""}