(globalThis["webpackChunk"] = globalThis["webpackChunk"] || []).push([["vendors-node_modules_cornerstonejs_tools_dist_esm_index_js"],{

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js":
/*!**********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const CORNERSTONE_COLOR_LUT = [
    [0, 0, 0, 0],
    [221, 84, 84, 255],
    [77, 228, 121, 255],
    [166, 70, 235, 255],
    [189, 180, 116, 255],
    [109, 182, 196, 255],
    [204, 101, 157, 255],
    [123, 211, 94, 255],
    [93, 87, 218, 255],
    [225, 128, 80, 255],
    [73, 232, 172, 255],
    [181, 119, 186, 255],
    [176, 193, 112, 255],
    [105, 153, 200, 255],
    [208, 97, 120, 255],
    [90, 215, 101, 255],
    [135, 83, 222, 255],
    [229, 178, 76, 255],
    [122, 183, 181, 255],
    [190, 115, 171, 255],
    [149, 197, 108, 255],
    [100, 118, 205, 255],
    [212, 108, 93, 255],
    [86, 219, 141, 255],
    [183, 79, 226, 255],
    [233, 233, 72, 255],
    [118, 167, 187, 255],
    [194, 111, 146, 255],
    [116, 201, 104, 255],
    [115, 96, 209, 255],
    [216, 147, 89, 255],
    [82, 223, 188, 255],
    [230, 75, 224, 255],
    [163, 184, 121, 255],
    [114, 143, 191, 255],
    [198, 107, 114, 255],
    [99, 206, 122, 255],
    [153, 92, 213, 255],
    [220, 192, 85, 255],
    [78, 215, 227, 255],
    [234, 71, 173, 255],
    [141, 188, 117, 255],
    [110, 113, 195, 255],
    [202, 128, 103, 255],
    [95, 210, 157, 255],
    [195, 88, 217, 255],
    [206, 224, 81, 255],
    [74, 166, 231, 255],
    [185, 120, 139, 255],
    [113, 192, 113, 255],
    [133, 106, 199, 255],
    [207, 162, 98, 255],
    [91, 214, 198, 255],
    [221, 84, 198, 255],
    [159, 228, 77, 255],
    [70, 111, 235, 255],
    [189, 119, 116, 255],
    [109, 196, 138, 255],
    [165, 101, 204, 255],
    [211, 201, 94, 255],
    [87, 191, 218, 255],
    [225, 80, 153, 255],
    [106, 232, 73, 255],
    [124, 119, 186, 255],
    [193, 142, 112, 255],
    [105, 200, 168, 255],
    [203, 97, 208, 255],
    [184, 215, 90, 255],
    [83, 147, 222, 255],
    [229, 76, 101, 255],
    [122, 183, 130, 255],
    [146, 115, 190, 255],
    [197, 171, 108, 255],
    [100, 205, 205, 255],
    [212, 93, 177, 255],
    [141, 219, 86, 255],
    [79, 97, 226, 255],
    [233, 99, 72, 255],
    [118, 187, 150, 255],
    [173, 111, 194, 255],
    [197, 201, 104, 255],
    [96, 171, 209, 255],
    [216, 89, 137, 255],
    [94, 223, 82, 255],
    [107, 75, 230, 255],
    [184, 153, 121, 255],
    [114, 191, 175, 255],
    [198, 107, 191, 255],
    [166, 206, 99, 255],
    [92, 132, 213, 255],
    [220, 85, 91, 255],
    [78, 227, 115, 255],
    [159, 71, 234, 255],
    [188, 176, 117, 255],
    [110, 185, 195, 255],
    [202, 103, 161, 255],
    [129, 210, 95, 255],
    [88, 88, 217, 255],
    [224, 123, 81, 255],
    [74, 231, 166, 255],
    [177, 120, 185, 255],
    [179, 192, 113, 255],
    [106, 156, 199, 255],
    [207, 98, 125, 255],
    [91, 214, 96, 255],
    [130, 84, 221, 255],
    [228, 171, 77, 255],
    [70, 235, 221, 255],
    [189, 116, 174, 255],
    [153, 196, 109, 255],
    [101, 123, 204, 255],
    [211, 104, 94, 255],
    [87, 218, 136, 255],
    [177, 80, 225, 255],
    [232, 225, 73, 255],
    [119, 169, 186, 255],
    [193, 112, 149, 255],
    [121, 200, 105, 255],
    [111, 97, 208, 255],
    [215, 142, 90, 255],
    [83, 222, 181, 255],
    [229, 76, 229, 255],
    [165, 183, 122, 255],
    [115, 146, 190, 255],
    [197, 108, 119, 255],
    [100, 205, 118, 255],
    [148, 93, 212, 255],
    [219, 186, 86, 255],
    [79, 220, 226, 255],
    [233, 72, 179, 255],
    [144, 187, 118, 255],
    [111, 118, 194, 255],
    [201, 124, 104, 255],
    [96, 209, 153, 255],
    [189, 89, 216, 255],
    [211, 223, 82, 255],
    [75, 172, 230, 255],
    [184, 121, 142, 255],
    [117, 191, 114, 255],
    [130, 107, 198, 255],
    [206, 157, 99, 255],
    [92, 213, 193, 255],
    [220, 85, 203, 255],
    [165, 227, 78, 255],
    [71, 118, 234, 255],
    [188, 117, 117, 255],
    [110, 195, 135, 255],
    [161, 103, 202, 255],
    [210, 195, 95, 255],
    [88, 195, 217, 255],
    [224, 81, 158, 255],
    [113, 231, 74, 255],
    [123, 120, 185, 255],
    [192, 139, 113, 255],
    [106, 199, 164, 255],
    [198, 98, 207, 255],
    [188, 214, 91, 255],
    [84, 153, 221, 255],
    [228, 77, 108, 255],
    [70, 235, 84, 255],
    [143, 116, 189, 255],
    [196, 167, 109, 255],
    [101, 204, 199, 255],
    [211, 94, 182, 255],
    [147, 218, 87, 255],
    [80, 104, 225, 255],
    [232, 93, 73, 255],
    [119, 186, 147, 255],
    [170, 112, 193, 255],
    [200, 200, 105, 255],
    [97, 175, 208, 255],
    [215, 90, 142, 255],
    [100, 222, 83, 255],
    [101, 76, 229, 255],
    [183, 150, 122, 255],
    [115, 190, 171, 255],
    [197, 108, 194, 255],
    [170, 205, 100, 255],
    [93, 138, 212, 255],
    [219, 86, 97, 255],
    [79, 226, 110, 255],
    [153, 72, 233, 255],
    [187, 173, 118, 255],
    [111, 187, 194, 255],
    [201, 104, 165, 255],
    [134, 209, 96, 255],
    [89, 95, 216, 255],
    [223, 117, 82, 255],
    [75, 230, 159, 255],
    [174, 121, 184, 255],
    [182, 191, 114, 255],
    [107, 160, 198, 255],
    [206, 99, 130, 255],
    [92, 213, 92, 255],
    [124, 85, 220, 255],
    [227, 165, 78, 255],
    [71, 234, 214, 255],
    [188, 117, 176, 255],
    [156, 195, 110, 255],
    [103, 128, 202, 255],
    [210, 100, 95, 255],
    [88, 217, 131, 255],
    [170, 81, 224, 255],
    [231, 218, 74, 255],
    [120, 172, 185, 255],
    [192, 113, 153, 255],
    [125, 199, 106, 255],
    [107, 98, 207, 255],
    [214, 137, 91, 255],
    [84, 221, 175, 255],
    [222, 77, 228, 255],
    [194, 235, 70, 255],
    [116, 149, 189, 255],
    [196, 109, 123, 255],
    [101, 204, 114, 255],
    [143, 94, 211, 255],
    [218, 180, 87, 255],
    [80, 225, 225, 255],
    [232, 73, 186, 255],
    [147, 186, 119, 255],
    [112, 122, 193, 255],
    [200, 121, 105, 255],
    [97, 208, 148, 255],
    [184, 90, 215, 255],
    [216, 222, 83, 255],
    [76, 178, 229, 255],
    [183, 122, 145, 255],
    [121, 190, 115, 255],
    [126, 108, 197, 255],
    [205, 153, 100, 255],
    [93, 212, 187, 255],
    [219, 86, 208, 255],
    [171, 226, 79, 255],
    [72, 126, 233, 255],
    [187, 118, 121, 255],
    [111, 194, 132, 255],
    [157, 104, 201, 255],
    [209, 190, 96, 255],
    [89, 200, 216, 255],
    [223, 82, 164, 255],
    [120, 230, 75, 255],
    [121, 121, 184, 255],
    [191, 136, 114, 255],
    [107, 198, 160, 255],
    [192, 99, 206, 255],
    [193, 213, 92, 255],
    [85, 158, 220, 255],
    [227, 78, 115, 255],
    [71, 234, 78, 255],
    [141, 117, 188, 255],
    [195, 163, 110, 255],
    [103, 202, 194, 255],
    [210, 95, 186, 255],
    [153, 217, 88, 255],
    [81, 111, 224, 255],
];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CORNERSTONE_COLOR_LUT);
//# sourceMappingURL=COLOR_LUT.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/constants/index.js":
/*!******************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/constants/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   COLOR_LUT: () => (/* reexport safe */ _COLOR_LUT__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _COLOR_LUT__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./COLOR_LUT */ "../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js");


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/ImageMouseCursor.js":
/*!***************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/ImageMouseCursor.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ImageMouseCursor)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _MouseCursor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MouseCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/MouseCursor.js");


const DEFAULT_NAME = 'image-cursor';
class ImageMouseCursor extends _MouseCursor__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(url, x, y, name, fallback) {
        super(name || ImageMouseCursor.getUniqueInstanceName(DEFAULT_NAME), fallback);
        this.url = url;
        this.x = Number(x) || 0;
        this.y = Number(y) || 0;
    }
    getStyleProperty() {
        const { url, x, y } = this;
        let style = `url('${url}')`;
        if (x >= 0 && y >= 0 && (x > 0 || y > 0)) {
            style += ` ${x} ${y}`;
        }
        return this.addFallbackStyleProperty(style);
    }
    static getUniqueInstanceName(prefix) {
        return `${prefix}-${_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getRuntimeId(ImageMouseCursor)}`;
    }
}
//# sourceMappingURL=ImageMouseCursor.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/MouseCursor.js":
/*!**********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/MouseCursor.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MouseCursor),
/* harmony export */   standardCursorNames: () => (/* binding */ standardCursorNames)
/* harmony export */ });
const DEFINED_CURSORS = Symbol('DefinedCursors');
const STANDARD_CURSORS = new Set([
    'alias',
    'all-scroll',
    'auto',
    'cell',
    'col-resize',
    'context-menu',
    'copy',
    'crosshair',
    'default',
    'e-resize',
    'ew-resize',
    'grab',
    'grabbing',
    'help',
    'move',
    'ne-resize',
    'nesw-resize',
    'no-drop',
    'none',
    'not-allowed',
    'n-resize',
    'ns-resize',
    'nw-resize',
    'nwse-resize',
    'pointer',
    'progress',
    'row-resize',
    'se-resize',
    's-resize',
    'sw-resize',
    'text',
    'vertical-text',
    'wait',
    'w-resize',
    'zoom-in',
    'zoom-out',
]);
class MouseCursor {
    constructor(name, fallback) {
        this.name = name + '';
        this.fallback = fallback;
    }
    getName() {
        return this.name + '';
    }
    addFallbackStyleProperty(style) {
        const { fallback } = this;
        if (fallback instanceof MouseCursor) {
            return `${style}, ${fallback.getStyleProperty()}`;
        }
        return style + '';
    }
    getStyleProperty() {
        return this.addFallbackStyleProperty(this.name) + '';
    }
    static getDefinedCursor(name) {
        const definedCursors = getDefinedCursors(MouseCursor, DEFINED_CURSORS);
        let mouseCursor = definedCursors.get(name);
        if (mouseCursor instanceof MouseCursor) {
            return mouseCursor;
        }
        if (STANDARD_CURSORS.has(name)) {
            mouseCursor = new MouseCursor(name);
            definedCursors.set(name, mouseCursor);
            return mouseCursor;
        }
    }
    static setDefinedCursor(name, cursor) {
        if (cursor instanceof MouseCursor) {
            const definedCursors = getDefinedCursors(MouseCursor, DEFINED_CURSORS);
            definedCursors.set(name, cursor);
            return true;
        }
        return false;
    }
}
function getDefinedCursors(context, symbol) {
    let definedCursors = context[symbol];
    if (!(definedCursors instanceof Map)) {
        definedCursors = new Map();
        Object.defineProperty(context, symbol, { value: definedCursors });
    }
    return definedCursors;
}
const standardCursorNames = STANDARD_CURSORS.values();

//# sourceMappingURL=MouseCursor.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGCursorDescriptor.js":
/*!******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGCursorDescriptor.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CursorSVG: () => (/* binding */ CursorSVG),
/* harmony export */   getDefinedSVGCursorDescriptor: () => (/* binding */ getDefinedSVGCursorDescriptor),
/* harmony export */   registerCursor: () => (/* binding */ registerCursor),
/* harmony export */   svgCursorNames: () => (/* binding */ svgCursorNames)
/* harmony export */ });
const BASE = {
    iconContent: '',
    iconSize: 16,
    viewBox: {
        x: 16,
        y: 16,
    },
    mousePoint: {
        x: 8,
        y: 8,
    },
    mousePointerGroupString: `
    <path stroke="{{color}}" d="M8 16L8 0"></path>
    <path stroke="{{color}}" d="M16 8L0 8"></path>
  `,
};
const SEGMENTATION_CURSOR_BOUNDARIES = {
    x: 127,
    y: 60,
};
const MINUS_RECT = `
<rect fill="{{color}}" x="80.19" y="25.03" width="47.14" height="15.85"/>
`;
const PLUS_RECT = `
<rect fill="{{color}}" x="80.19" y="25.03" width="47.14" height="15.85"/>
<rect fill="{{color}}" x="95.84" y="9.38" width="15.85" height="47.14"/>
`;
const SCISSOR_ICON = `<path fill="{{color}}" d="M82.89,10a12.09,12.09,0,0,0-16.8-2.5l-27.5,20.4-8.5-6.3a2.93,2.93,0,0,1-1.1-3,14.66,14.66,0,0,0,.1-6.6,14.08,14.08,0,1,0-6.5,15.2,2.87,2.87,0,0,1,3.2.2l8.2,6.1-8.2,6.1a2.87,2.87,0,0,1-3.2.2,14.16,14.16,0,1,0,6.7,14.4,14,14,0,0,0-.3-5.8,2.93,2.93,0,0,1,1.1-3l8.5-6.3,27.5,20.4A11.91,11.91,0,0,0,82.89,57l-31.7-23.5ZM15.29,21a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,21Zm0,36.8a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,57.77Zm28.3-21.5a2.8,2.8,0,1,1,2.8-2.8A2.8,2.8,0,0,1,43.59,36.27Z" transform="translate(-1.17 -0.96)"/>`;
const RECTANGLE_ICON = `<path fill="{{color}}" d="M8.86,2.25V66.08H72.69V2.25H8.86ZM65.28,58.67h-49v-49h49v49Z" transform="translate(-8.86 -2.25)"/>`;
const CIRCLE_ICON = `<path fill="{{color}}" d="M40.77,2.25A31.92,31.92,0,1,0,72.69,34.16,31.92,31.92,0,0,0,40.77,2.25Zm0,57.63A25.71,25.71,0,1,1,66.48,34.16,25.71,25.71,0,0,1,40.77,59.87Z" transform="translate(-8.86 -2.25)"/>`;
const CursorSVG = {
    Angle: extend(BASE, {
        iconContent: `<path fill="{{color}}" d="M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50
    50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23
    10l50 50q10 10 10 23z" />`,
        viewBox: {
            x: 1792,
            y: 1792,
        },
    }),
    ArrowAnnotate: extend(BASE, {
        iconContent: `<g id="arrowAnnotate-group" fill="none" stroke-width="1" stroke="{{color}}" stroke-linecap="round" stroke-linejoin="round">
    <path id="arrowAnnotate-arrow" d="M23,7 l-15,15 M7,17 l0,6 6,0" stroke-width="2" />
  </g>`,
        viewBox: {
            x: 24,
            y: 24,
        },
    }),
    Bidirectional: extend(BASE, {
        iconContent: `<g fill="{{color}}" stroke-width="3" stroke="{{color}}">
    <path d="M27.63 3.21L3.12 28.81"></path>
    <path d="M27.63 15.75L15.27 4.43"></path>
    <path d="M16.5 4.28C16.5 4.96 15.95 5.51 15.27 5.51C14.59 5.51 14.03 4.96 14.03 4.28C14.03 3.59 14.59 3.04 15.27 3.04C15.95 3.04 16.5 3.59 16.5 4.28Z" ></path>
    <path d="M28.87 3.19C28.87 3.87 28.31 4.43 27.63 4.43C26.95 4.43 26.4 3.87 26.4 3.19C26.4 2.51 26.95 1.95 27.63 1.95C28.31 1.95 28.87 2.51 28.87 3.19Z"></path>
    <path d="M28.87 15.75C28.87 16.43 28.31 16.99 27.63 16.99C26.95 16.99 26.4 16.43 26.4 15.75C26.4 15.07 26.95 14.51 27.63 14.51C28.31 14.51 28.87 15.07 28.87 15.75Z"></path>
    <path d="M4.73 28.44C4.73 29.12 4.17 29.68 3.49 29.68C2.81 29.68 2.25 29.12 2.25 28.44C2.25 27.76 2.81 27.2 3.49 27.2C4.17 27.2 4.73 27.76 4.73 28.44Z"></path>
  </g>`,
        viewBox: {
            x: 48,
            y: 48,
        },
    }),
    CobbAngle: extend(BASE, {
        iconContent: `<g stroke="{{color}}" stroke-width="3">
    <path d="M28.59 2.34L3.82 12.32"></path>
    <path d="M28.59 29.66L3.82 19.68"></path>
    <path stroke-dasharray="2" fill-opacity="0" d="M12.37
      23.06C12.67 22.36 12.85 21.93 12.92 21.76C14.6 17.8 14.68 13.35 13.15
      9.33C13.11 9.24 13.02 9 12.88 8.63">
    </path>
  </g>`,
        viewBox: {
            x: 32,
            y: 32,
        },
    }),
    CircleROI: extend(BASE, {
        iconContent: `<circle stroke="{{color}}" fill="none" stroke-width="3" cx="16" cy="16" r="14" />`,
        viewBox: {
            x: 32,
            y: 32,
        },
    }),
    EllipticalROI: extend(BASE, {
        iconContent: `<path stroke="{{color}}" fill="none" stroke-width="3" d="M30.74 15.76C30.74 20.99 24.14 25.23 16
    25.23C7.86 25.23 1.26 20.99 1.26 15.76C1.26 10.54 7.86 6.3 16 6.3C24.14
    6.3 30.74 10.54 30.74 15.76Z" />`,
        viewBox: {
            x: 32,
            y: 32,
        },
    }),
    FreehandROI: extend(BASE, {
        iconContent: `<g fill="{{color}}" stroke="{{color}}" stroke-width="2">
    <ellipse ry="1" rx="1" id="svg_3" cy="4.240343" cx="14.306499"/>
    <line id="svg_4" y2="3.58462" x2="12.242186" y1="3.997482" x1="13.432202"/>
    <line id="svg_5" y2="3.268901" x2="10.857882" y1="3.608906" x1="12.387902"/>
    <line id="svg_6" y2="3.147471" x2="9.740724" y1="3.293187" x1="10.955026"/>
    <line id="svg_7" y2="3.147471" x2="8.089274" y1="3.196043" x1="9.983585"/>
    <line id="svg_8" y2="3.268901" x2="6.874972" y1="3.123185" x1="8.307848"/>
    <line id="svg_9" y2="3.657478" x2="5.587812" y1="3.220329" x1="7.020688"/>
    <line id="svg_10" y2="4.046054" x2="4.737801" y1="3.560334" x1="5.854959"/>
    <line id="svg_11" y2="4.337487" x2="4.300652" y1="3.997482" x1="4.834945"/>
    <line id="svg_12" y2="4.726063" x2="3.88779" y1="4.191771" x1="4.470655"/>
    <line id="svg_15" y2="5.3575" x2="3.377783" y1="4.604633" x1="3.960648"/>
    <line id="svg_16" y2="6.183226" x2="2.916348" y1="5.138926" x1="3.547785"/>
    <line id="svg_17" y2="6.960379" x2="2.770632" y1="5.867507" x1="3.037779"/>
    <line id="svg_18" y2="7.713246" x2="2.673488" y1="6.741804" x1="2.819204"/>
    <line id="svg_19" y2="8.684687" x2="2.697774" y1="7.616102" x1="2.673488"/>
    <line id="svg_20" y2="9.753273" x2="2.892062" y1="8.611829" x1="2.697774"/>
    <line id="svg_21" y2="10.724714" x2="3.134923" y1="9.534698" x1="2.84349"/>
    <line id="svg_23" y2="11.647583" x2="3.596357" y1="10.578998" x1="3.086351"/>
    <line id="svg_25" y2="12.521881" x2="4.276366" y1="11.501867" x1="3.499213"/>
    <line id="svg_26" y2="13.930471" x2="5.830673" y1="12.376165" x1="4.13065"/>
    <line id="svg_28" y2="14.707624" x2="7.263549" y1="13.881899" x1="5.733528"/>
    <line id="svg_29" y2="15.339061" x2="8.963571" y1="14.61048" x1="7.06926"/>
    <line id="svg_30" y2="15.581921" x2="10.882168" y1="15.314775" x1="8.817855"/>
    <line id="svg_31" y2="15.460491" x2="12.023612" y1="15.581921" x1="10.785024"/>
    <line id="svg_33" y2="15.120487" x2="13.092197" y1="15.484777" x1="11.877895"/>
    <line id="svg_34" y2="14.586194" x2="13.86935" y1="15.217631" x1="12.897909"/>
    <line id="svg_35" y2="13.833327" x2="14.597931" y1="14.756196" x1="13.699348"/>
    <line id="svg_37" y2="12.716169" x2="15.180796" y1="13.881899" x1="14.549359"/>
    <line id="svg_39" y2="11.429009" x2="15.520801" y1="12.813313" x1="15.15651"/>
    <ellipse ry="1" rx="1" id="svg_40" cy="10.967574" cx="15.520801"/>
  </g>`,
        viewBox: {
            x: 18,
            y: 18,
        },
    }),
    FreehandROISculptor: extend(BASE, {
        iconContent: `<g id="icon-freehand-sculpt" fill="none" stroke-width="1.5" stroke="{{color}}" stroke-linecap="round" stroke-linejoin="round">
    <line id="svg_1" y2="2.559367" x2="10.184807" y1="4.467781" x1="8.81711"/>
    <line id="svg_4" y2="1.493836" x2="11.727442" y1="2.766112" x1="10.089386"/>
    <line id="svg_7" y2="1.080346" x2="13.047428" y1="1.748291" x1="11.345759"/>
    <line id="svg_8" y2="1.000829" x2="14.351511" y1="1.112153" x1="12.77707"/>
    <line id="svg_9" y2="1.350705" x2="15.242104" y1="0.905408" x1="13.969828"/>
    <line id="svg_10" y2="2.098167" x2="15.862339" y1="1.14396" x1="14.955842"/>
    <line id="svg_11" y2="3.195505" x2="16.41896" y1="1.939133" x1="15.766918"/>
    <line id="svg_12" y2="4.292843" x2="16.530284" y1="2.925147" x1="16.387153"/>
    <line id="svg_16" y2="5.644637" x2="16.196311" y1="3.831643" x1="16.593898"/>
    <line id="svg_18" y2="7.266789" x2="15.623787" y1="5.19934" x1="16.275829"/>
    <line id="svg_19" y2="10.813258" x2="14.526449" y1="6.726071" x1="15.766918"/>
    <line id="svg_20" y2="5.056209" x2="8.085552" y1="4.181519" x1="8.976145"/>
    <line id="svg_23" y2="5.326568" x2="7.481221" y1="4.78585" x1="8.403621"/>
    <line id="svg_24" y2="5.565119" x2="6.749662" y1="5.294761" x1="7.624352"/>
    <line id="svg_25" y2="5.994512" x2="5.429675" y1="5.533312" x1="6.956407"/>
    <line id="svg_27" y2="6.551133" x2="4.284627" y1="5.962706" x1="5.572807"/>
    <line id="svg_28" y2="7.584858" x2="3.044158" y1="6.392099" x1="4.427758"/>
    <line id="svg_29" y2="8.84123" x2="2.185372" y1="7.489437" x1="3.219096"/>
    <line id="svg_31" y2="10.606513" x2="1.644654" y1="8.602678" x1="2.280792"/>
    <line id="svg_32" y2="13.214679" x2="1.48562" y1="10.352058" x1="1.724171"/>
    <line id="svg_33" y2="14.375631" x2="1.676461" y1="12.992031" x1="1.453813"/>
    <line id="svg_34" y2="15.298031" x2="2.264889" y1="14.152983" x1="1.517427"/>
    <line id="svg_35" y2="16.172721" x2="3.521261" y1="14.948155" x1="1.915013"/>
    <line id="svg_36" y2="16.824762" x2="5.207027" y1="15.997783" x1="3.28271"/>
    <line id="svg_38" y2="17.063314" x2="7.035924" y1="16.745245" x1="4.968475"/>
    <line id="svg_39" y2="16.888376" x2="9.278311" y1="17.047411" x1="6.733758"/>
    <line id="svg_40" y2="16.284045" x2="10.661911" y1="16.983797" x1="8.992048"/>
    <line id="svg_41" y2="15.313934" x2="11.647925" y1="16.395369" x1="10.455166"/>
    <line id="svg_44" y2="13.898527" x2="12.82478" y1="15.425259" x1="11.504794"/>
    <line id="svg_45" y2="12.037824" x2="14.144766" y1="14.312017" x1="12.522614"/>
    <line id="svg_47" y2="10.59061" x2="14.605966" y1="12.228665" x1="13.953925"/>
    <ellipse ry="1" rx="1" id="svg_48" cy="3.982726" cx="13.460918"/>
  </g>`,
        viewBox: {
            x: 18,
            y: 18,
        },
    }),
    Length: extend(BASE, {
        iconContent: `<g id="length-group" fill="none" stroke-width="1" stroke="{{color}}" stroke-linecap="round" stroke-linejoin="round">
    <path id="length-dashes" d="m22.5,6 -16.5,16.5" stroke-width="3" stroke-dasharray="0.6666,5" />
  </g>`,
        viewBox: {
            x: 24,
            y: 24,
        },
    }),
    Probe: extend(BASE, {
        iconContent: `<path fill="{{color}}" d="M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75
    75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73
    198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5
    279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5
    385.5-103 385.5 103 279.5 279.5 103 385.5z" />`,
        viewBox: {
            x: 1792,
            y: 1792,
        },
    }),
    RectangleROI: extend(BASE, {
        iconContent: `<path fill="{{color}}" d="M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47
    113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0
    119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119
    84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z" />`,
        viewBox: {
            x: 1792,
            y: 1792,
        },
    }),
    TextMarker: extend(BASE, {
        iconContent: `<path fill="{{color}}" d="M789 559l-170 450q33 0 136.5 2t160.5 2q19 0
    57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29
    31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15
    34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 5-.5
    13.5t-.5 12.5q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0
    12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11
    2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0
    22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58
    0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z" />`,
        viewBox: {
            x: 1792,
            y: 1792,
        },
    }),
    Crosshairs: extend(BASE, {
        iconContent: `<path fill="{{color}}" d="M1325 1024h-109q-26 0-45-19t-19-45v-128q0-26
    19-45t45-19h109q-32-108-112.5-188.5t-188.5-112.5v109q0 26-19 45t-45
    19h-128q-26 0-45-19t-19-45v-109q-108 32-188.5 112.5t-112.5 188.5h109q26
    0 45 19t19 45v128q0 26-19 45t-45 19h-109q32 108 112.5 188.5t188.5
    112.5v-109q0-26 19-45t45-19h128q26 0 45 19t19 45v109q108-32
    188.5-112.5t112.5-188.5zm339-192v128q0 26-19 45t-45 19h-143q-37 161-154.5
    278.5t-278.5 154.5v143q0 26-19 45t-45 19h-128q-26
    0-45-19t-19-45v-143q-161-37-278.5-154.5t-154.5-278.5h-143q-26
    0-45-19t-19-45v-128q0-26 19-45t45-19h143q37-161
    154.5-278.5t278.5-154.5v-143q0-26 19-45t45-19h128q26 0 45 19t19 45v143q161
    37 278.5 154.5t154.5 278.5h143q26 0 45 19t19 45z" />`,
        viewBox: {
            x: 1792,
            y: 1792,
        },
    }),
    Eraser: extend(BASE, {
        iconContent: `<path transform="translate(0,1792) scale(1,-1)" fill="{{color}}" d="M960 1408l336-384h-768l-336 384h768zm1013-1077q15
    34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38
    0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38
    0 69.5 20.5t47.5 54.5z" />`,
        viewBox: {
            x: 2048,
            y: 1792,
        },
    }),
    Magnify: extend(BASE, {
        iconContent: `<path fill="{{color}}" d="M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395
    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5
    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17
    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208
    32s176 78.7 176 176-78.7 176-176 176z" />`,
        viewBox: {
            x: 512,
            y: 512,
        },
    }),
    Pan: extend(BASE, {
        iconContent: `<path fill="{{color}}" d="M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17
    39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355
    355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59
    39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12
    0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144
    144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19
    45v448q0 42-39 59-13 5-25 5-26 0-45-19z" />`,
        viewBox: {
            x: 1792,
            y: 1792,
        },
    }),
    Rotate: extend(BASE, {
        iconContent: `<path fill="{{color}}" d="M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39
    14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5
    163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0
    225-52t179-147q7-10 23-12 15 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109
    132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298
    164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14
    39 17 39 59z" />`,
        viewBox: {
            x: 1792,
            y: 1792,
        },
    }),
    StackScroll: extend(BASE, {
        iconContent: `<path fill="{{color}}" d="M24 21v2c0 0.547-0.453 1-1 1h-22c-0.547
    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1zM24 13v2c0
    0.547-0.453 1-1 1h-22c-0.547 0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547
    0 1 0.453 1 1zM24 5v2c0 0.547-0.453 1-1 1h-22c-0.547
    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1z" />`,
        viewBox: {
            x: 24,
            y: 28,
        },
    }),
    WindowLevelRegion: extend(BASE, {
        iconContent: `<path fill="{{color}}" d="M1664 416v960q0 119-84.5 203.5t-203.5 84.5h-960q-119
    0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5
    84.5t84.5 203.5z" />`,
        viewBox: {
            x: 1792,
            y: 1792,
        },
    }),
    WindowLevel: extend(BASE, {
        iconContent: `
    <path fill="{{color}}" d="M14.5,3.5 a1 1 0 0 1 -11,11 Z" stroke="none" opacity="0.8" />
    <circle cx="9" cy="9" r="8" fill="none" stroke-width="2" stroke="{{color}}" />`,
        viewBox: {
            x: 18,
            y: 18,
        },
    }),
    Zoom: extend(BASE, {
        iconContent: `
  <path fill="{{color}}" d="M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395
    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5
    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17
    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208
    32s176 78.7 176 176-78.7 176-176 176z" />
  <path fill="{{color}}" transform="scale(0.22,0.22) translate(1400,0)" d="M1216
    320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19
    19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26
    0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z" />`,
        viewBox: {
            x: 640,
            y: 512,
        },
    }),
    SegmentationFreeHandEraseInside: extend(BASE, {
        iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    SegmentationFreeHandFillInside: extend(BASE, {
        iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    SegmentationFreeHandEraseOutside: extend(BASE, {
        iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    SegmentationFreeHandFillOutside: extend(BASE, {
        iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    SegmentationRectangleEraseInside: extend(BASE, {
        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    RectangleScissor: extend(BASE, {
        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    'RectangleScissor.FILL_INSIDE': extend(BASE, {
        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    'RectangleScissor.FILL_OUTSIDE': extend(BASE, {
        iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    'RectangleScissor.ERASE_OUTSIDE': extend(BASE, {
        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    'RectangleScissor.ERASE_INSIDE': extend(BASE, {
        iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    CircleScissor: extend(BASE, {
        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    'CircleScissor.FILL_INSIDE': extend(BASE, {
        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    'CircleScissor.ERASE_OUTSIDE': extend(BASE, {
        iconContent: `${CIRCLE_ICON} ${MINUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
    'CircleScissor.FILL_OUTSIDE': extend(BASE, {
        iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,
        viewBox: SEGMENTATION_CURSOR_BOUNDARIES,
    }),
};
function extend(base, values) {
    return Object.assign(Object.create(base), values);
}
function registerCursor(toolName, iconContent, viewBox) {
    CursorSVG[toolName] = extend(BASE, {
        iconContent,
        viewBox,
    });
}
function getDefinedSVGCursorDescriptor(name) {
    if (Object.prototype.hasOwnProperty.call(CursorSVG, name)) {
        return CursorSVG[name];
    }
}
const svgCursorNames = Object.keys(CursorSVG);

//# sourceMappingURL=SVGCursorDescriptor.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGMouseCursor.js":
/*!*************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGMouseCursor.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SVGMouseCursor)
/* harmony export */ });
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _ImageMouseCursor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ImageMouseCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/ImageMouseCursor.js");
/* harmony import */ var _SVGCursorDescriptor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SVGCursorDescriptor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGCursorDescriptor.js");
/* harmony import */ var _stateManagement_annotation_config_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../stateManagement/annotation/config/helpers */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/helpers.js");




const PROPERTY = 'color';
const STATE = _enums__WEBPACK_IMPORTED_MODULE_0__.AnnotationStyleStates.Highlighted;
const MODE = _enums__WEBPACK_IMPORTED_MODULE_0__.ToolModes.Active;
class SVGMouseCursor extends _ImageMouseCursor__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(url, x, y, name, fallback) {
        super(url, x, y, name, fallback);
    }
    static getDefinedCursor(name, pointer = false, color) {
        if (!color) {
            color = (0,_stateManagement_annotation_config_helpers__WEBPACK_IMPORTED_MODULE_3__.getStyleProperty)(PROPERTY, {}, STATE, MODE);
        }
        const urn = getCursorURN(name, pointer, color);
        let cursor = super.getDefinedCursor(urn);
        if (!cursor) {
            const descriptor = (0,_SVGCursorDescriptor__WEBPACK_IMPORTED_MODULE_2__.getDefinedSVGCursorDescriptor)(name);
            if (descriptor) {
                cursor = createSVGMouseCursor(descriptor, urn, pointer, color, super.getDefinedCursor('default'));
                super.setDefinedCursor(urn, cursor);
            }
        }
        return cursor;
    }
}
function format(template, dictionary) {
    const dict = Object(dictionary);
    const defined = Object.prototype.hasOwnProperty.bind(dict);
    return (template + '').replace(/\{\{(\w+)\}\}/g, (match, key) => {
        return defined(key) ? dict[key] + '' : '';
    });
}
function getCursorURN(name, pointer, color) {
    const type = pointer ? 'pointer' : 'cursor';
    return `${type}:${name}/${color}`;
}
function createSVGMouseCursor(descriptor, name, pointer, color, fallback) {
    const { x, y } = descriptor.mousePoint;
    return new SVGMouseCursor(createSVGIconUrl(descriptor, pointer, { color }), x, y, name, fallback);
}
function createSVGIconUrl(descriptor, pointer, options) {
    return URL.createObjectURL(createSVGIconBlob(descriptor, pointer, options));
}
function createSVGIconBlob(descriptor, pointer, options) {
    const svgString = (pointer ? createSVGIconWithPointer : createSVGIcon)(descriptor, options);
    return new Blob([svgString], { type: 'image/svg+xml' });
}
function createSVGIcon(descriptor, options) {
    const { iconContent, iconSize, viewBox } = descriptor;
    const svgString = `
    <svg data-icon="cursor" role="img" xmlns="http://www.w3.org/2000/svg"
      width="${iconSize}" height="${iconSize}" viewBox="0 0
      ${viewBox.x} ${viewBox.y}">
      ${iconContent}
    </svg>`;
    return format(svgString, options);
}
function createSVGIconWithPointer(descriptor, options) {
    const { iconContent, iconSize, viewBox, mousePointerGroupString } = descriptor;
    const scale = iconSize / Math.max(viewBox.x, viewBox.y, 1);
    const svgSize = 16 + iconSize;
    const svgString = `
    <svg data-icon="cursor" role="img" xmlns="http://www.w3.org/2000/svg"
      width="${svgSize}" height="${svgSize}" viewBox="0 0 ${svgSize} ${svgSize}">
      <g>${mousePointerGroupString}</g>
      <g transform="translate(16, 16) scale(${scale})">${iconContent}</g>
    </svg>`;
    return format(svgString, options);
}
//# sourceMappingURL=SVGMouseCursor.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js":
/*!************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hideElementCursor: () => (/* binding */ hideElementCursor),
/* harmony export */   initElementCursor: () => (/* binding */ initElementCursor),
/* harmony export */   resetElementCursor: () => (/* binding */ resetElementCursor),
/* harmony export */   setElementCursor: () => (/* binding */ _setElementCursor)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/index.js");

const ELEMENT_CURSORS_MAP = Symbol('ElementCursorsMap');
function initElementCursor(element, cursor) {
    _getElementCursors(element)[0] = cursor;
    _setElementCursor(element, cursor);
}
function _setElementCursor(element, cursor) {
    const cursors = _getElementCursors(element);
    cursors[1] = cursors[0];
    cursors[0] = cursor;
    element.style.cursor = (cursor instanceof ___WEBPACK_IMPORTED_MODULE_0__.MouseCursor
        ? cursor
        : ___WEBPACK_IMPORTED_MODULE_0__.MouseCursor.getDefinedCursor('auto')).getStyleProperty();
}
function resetElementCursor(element) {
    _setElementCursor(element, _getElementCursors(element)[1]);
}
function hideElementCursor(element) {
    _setElementCursor(element, ___WEBPACK_IMPORTED_MODULE_0__.MouseCursor.getDefinedCursor('none'));
}
function _getElementCursors(element) {
    let map = _getElementCursors[ELEMENT_CURSORS_MAP];
    if (!(map instanceof WeakMap)) {
        map = new WeakMap();
        Object.defineProperty(_getElementCursors, ELEMENT_CURSORS_MAP, {
            value: map,
        });
    }
    let cursors = map.get(element);
    if (!cursors) {
        cursors = [null, null];
        map.set(element, cursors);
    }
    return cursors;
}

//# sourceMappingURL=elementCursor.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/index.js":
/*!****************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CursorNames: () => (/* binding */ CursorNames),
/* harmony export */   CursorSVG: () => (/* reexport safe */ _SVGCursorDescriptor__WEBPACK_IMPORTED_MODULE_5__.CursorSVG),
/* harmony export */   ImageMouseCursor: () => (/* reexport safe */ _ImageMouseCursor__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   MouseCursor: () => (/* reexport safe */ _MouseCursor__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   SVGMouseCursor: () => (/* reexport safe */ _SVGMouseCursor__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   elementCursor: () => (/* reexport module object */ _elementCursor__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   registerCursor: () => (/* reexport safe */ _SVGCursorDescriptor__WEBPACK_IMPORTED_MODULE_5__.registerCursor),
/* harmony export */   setCursorForElement: () => (/* reexport safe */ _setCursorForElement__WEBPACK_IMPORTED_MODULE_4__["default"])
/* harmony export */ });
/* harmony import */ var _MouseCursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MouseCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/MouseCursor.js");
/* harmony import */ var _ImageMouseCursor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ImageMouseCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/ImageMouseCursor.js");
/* harmony import */ var _SVGMouseCursor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SVGMouseCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGMouseCursor.js");
/* harmony import */ var _elementCursor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _setCursorForElement__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./setCursorForElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/setCursorForElement.js");
/* harmony import */ var _SVGCursorDescriptor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SVGCursorDescriptor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGCursorDescriptor.js");






const CursorNames = [..._SVGCursorDescriptor__WEBPACK_IMPORTED_MODULE_5__.svgCursorNames, ..._MouseCursor__WEBPACK_IMPORTED_MODULE_0__.standardCursorNames];

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/setCursorForElement.js":
/*!******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/setCursorForElement.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _elementCursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _MouseCursor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MouseCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/MouseCursor.js");
/* harmony import */ var _SVGMouseCursor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SVGMouseCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/SVGMouseCursor.js");



function setCursorForElement(element, cursorName) {
    let cursor = _SVGMouseCursor__WEBPACK_IMPORTED_MODULE_2__["default"].getDefinedCursor(cursorName, true);
    if (!cursor) {
        cursor = _MouseCursor__WEBPACK_IMPORTED_MODULE_1__["default"].getDefinedCursor(cursorName);
    }
    if (!cursor) {
        console.log(`Cursor ${cursorName} is not defined either as SVG or as a standard cursor.`);
        cursor = _MouseCursor__WEBPACK_IMPORTED_MODULE_1__["default"].getDefinedCursor(cursorName);
    }
    (0,_elementCursor__WEBPACK_IMPORTED_MODULE_0__.setElementCursor)(element, cursor);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setCursorForElement);
//# sourceMappingURL=setCursorForElement.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_getHash.js":
/*!**********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_getHash.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _getHash(annotationUID, drawingElementType, nodeUID) {
    return `${annotationUID}::${drawingElementType}::${nodeUID}`;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_getHash);
//# sourceMappingURL=_getHash.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setAttributesIfNecessary.js":
/*!***************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setAttributesIfNecessary.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _setAttributesIfNecessary: () => (/* binding */ _setAttributesIfNecessary),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _setAttributesIfNecessary(attributes, svgNode) {
    Object.keys(attributes).forEach((key) => {
        const currentValue = svgNode.getAttribute(key);
        const newValue = attributes[key];
        if (newValue === undefined || newValue === '') {
            svgNode.removeAttribute(key);
        }
        else if (currentValue !== newValue) {
            svgNode.setAttribute(key, newValue);
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_setAttributesIfNecessary);
//# sourceMappingURL=_setAttributesIfNecessary.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setNewAttributesIfValid.js":
/*!**************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setNewAttributesIfValid.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _setNewAttributesIfValid: () => (/* binding */ _setNewAttributesIfValid),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _setNewAttributesIfValid(attributes, svgNode) {
    Object.keys(attributes).forEach((key) => {
        const newValue = attributes[key];
        if (newValue !== undefined && newValue !== '') {
            svgNode.setAttribute(key, newValue);
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_setNewAttributesIfValid);
//# sourceMappingURL=_setNewAttributesIfValid.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/draw.js":
/*!******************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/draw.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getSvgDrawingHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getSvgDrawingHelper */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/getSvgDrawingHelper.js");

function draw(element, fn) {
    const svgDrawingHelper = (0,_getSvgDrawingHelper__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
    fn(svgDrawingHelper);
    svgDrawingHelper.clearUntouched();
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (draw);
//# sourceMappingURL=draw.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js":
/*!***********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ drawArrow)
/* harmony export */ });
/* harmony import */ var _drawLine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drawLine */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLine.js");

function drawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {
    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {
        return;
    }
    const { color, width, lineWidth, lineDash } = Object.assign({
        color: 'dodgerblue',
        width: '2',
        lineWidth: undefined,
        lineDash: undefined,
    }, options);
    (0,_drawLine__WEBPACK_IMPORTED_MODULE_0__["default"])(svgDrawingHelper, annotationUID, arrowUID, start, end, {
        color,
        width,
        lineWidth,
        lineDash,
    });
    const headLength = 10;
    const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);
    const firstLine = {
        start: [
            end[0] - headLength * Math.cos(angle - Math.PI / 7),
            end[1] - headLength * Math.sin(angle - Math.PI / 7),
        ],
        end: end,
    };
    const secondLine = {
        start: [
            end[0] - headLength * Math.cos(angle + Math.PI / 7),
            end[1] - headLength * Math.sin(angle + Math.PI / 7),
        ],
        end: end,
    };
    (0,_drawLine__WEBPACK_IMPORTED_MODULE_0__["default"])(svgDrawingHelper, annotationUID, '2', firstLine.start, firstLine.end, {
        color,
        width,
        lineWidth,
    });
    (0,_drawLine__WEBPACK_IMPORTED_MODULE_0__["default"])(svgDrawingHelper, annotationUID, '3', secondLine.start, secondLine.end, {
        color,
        width,
        lineWidth,
    });
}
//# sourceMappingURL=drawArrow.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawCircle.js":
/*!************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawCircle.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getHash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getHash */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_getHash.js");
/* harmony import */ var _setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_setAttributesIfNecessary */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setAttributesIfNecessary.js");
/* harmony import */ var _setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_setNewAttributesIfValid */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setNewAttributesIfValid.js");



function drawCircle(svgDrawingHelper, annotationUID, circleUID, center, radius, options = {}, dataId = '') {
    const { color, fill, width, lineWidth, lineDash } = Object.assign({
        color: 'dodgerblue',
        fill: 'transparent',
        width: '2',
        lineDash: undefined,
        lineWidth: undefined,
    }, options);
    const strokeWidth = lineWidth || width;
    const svgns = 'http://www.w3.org/2000/svg';
    const svgNodeHash = (0,_getHash__WEBPACK_IMPORTED_MODULE_0__["default"])(annotationUID, 'circle', circleUID);
    const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);
    const attributes = {
        cx: `${center[0]}`,
        cy: `${center[1]}`,
        r: `${radius}`,
        stroke: color,
        fill,
        'stroke-width': strokeWidth,
        'stroke-dasharray': lineDash,
    };
    if (existingCircleElement) {
        (0,_setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_1__["default"])(attributes, existingCircleElement);
        svgDrawingHelper.setNodeTouched(svgNodeHash);
    }
    else {
        const newCircleElement = document.createElementNS(svgns, 'circle');
        if (dataId !== '') {
            newCircleElement.setAttribute('data-id', dataId);
        }
        (0,_setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_2__["default"])(attributes, newCircleElement);
        svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (drawCircle);
//# sourceMappingURL=drawCircle.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipse.js":
/*!*************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipse.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getHash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getHash */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_getHash.js");
/* harmony import */ var _setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_setAttributesIfNecessary */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setAttributesIfNecessary.js");
/* harmony import */ var _setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_setNewAttributesIfValid */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setNewAttributesIfValid.js");



function drawEllipse(svgDrawingHelper, annotationUID, ellipseUID, corner1, corner2, options = {}, dataId = '') {
    const { color, width, lineWidth, lineDash } = Object.assign({
        color: 'dodgerblue',
        width: '2',
        lineWidth: undefined,
        lineDash: undefined,
    }, options);
    const strokeWidth = lineWidth || width;
    const svgns = 'http://www.w3.org/2000/svg';
    const svgNodeHash = (0,_getHash__WEBPACK_IMPORTED_MODULE_0__["default"])(annotationUID, 'ellipse', ellipseUID);
    const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);
    const w = Math.abs(corner1[0] - corner2[0]);
    const h = Math.abs(corner1[1] - corner2[1]);
    const xMin = Math.min(corner1[0], corner2[0]);
    const yMin = Math.min(corner1[1], corner2[1]);
    const center = [xMin + w / 2, yMin + h / 2];
    const radiusX = w / 2;
    const radiusY = h / 2;
    const attributes = {
        cx: `${center[0]}`,
        cy: `${center[1]}`,
        rx: `${radiusX}`,
        ry: `${radiusY}`,
        stroke: color,
        fill: 'transparent',
        'stroke-width': strokeWidth,
        'stroke-dasharray': lineDash,
    };
    if (existingEllipse) {
        (0,_setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_1__["default"])(attributes, existingEllipse);
        svgDrawingHelper.setNodeTouched(svgNodeHash);
    }
    else {
        const svgEllipseElement = document.createElementNS(svgns, 'ellipse');
        if (dataId !== '') {
            svgEllipseElement.setAttribute('data-id', dataId);
        }
        (0,_setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_2__["default"])(attributes, svgEllipseElement);
        svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (drawEllipse);
//# sourceMappingURL=drawEllipse.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandles.js":
/*!*************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandles.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getHash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getHash */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_getHash.js");
/* harmony import */ var _setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_setNewAttributesIfValid */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setNewAttributesIfValid.js");
/* harmony import */ var _setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_setAttributesIfNecessary */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setAttributesIfNecessary.js");



function drawHandles(svgDrawingHelper, annotationUID, handleGroupUID, handlePoints, options = {}) {
    const { color, handleRadius, width, lineWidth, fill, type, opacity } = Object.assign({
        color: 'dodgerblue',
        handleRadius: '6',
        width: '2',
        lineWidth: undefined,
        fill: 'transparent',
        type: 'circle',
        opacity: 1,
    }, options);
    const strokeWidth = lineWidth || width;
    for (let i = 0; i < handlePoints.length; i++) {
        const handle = handlePoints[i];
        const svgns = 'http://www.w3.org/2000/svg';
        const svgNodeHash = (0,_getHash__WEBPACK_IMPORTED_MODULE_0__["default"])(annotationUID, 'handle', `hg-${handleGroupUID}-index-${i}`);
        let attributes;
        if (type === 'circle') {
            attributes = {
                cx: `${handle[0]}`,
                cy: `${handle[1]}`,
                r: handleRadius,
                stroke: color,
                fill,
                'stroke-width': strokeWidth,
                opacity: opacity,
            };
        }
        else if (type === 'rect') {
            const handleRadiusFloat = parseFloat(handleRadius);
            const side = handleRadiusFloat * 1.5;
            const x = handle[0] - side * 0.5;
            const y = handle[1] - side * 0.5;
            attributes = {
                x: `${x}`,
                y: `${y}`,
                width: `${side}`,
                height: `${side}`,
                stroke: color,
                fill,
                'stroke-width': strokeWidth,
                rx: `${side * 0.1}`,
                opacity: opacity,
            };
        }
        else {
            throw new Error(`Unsupported handle type: ${type}`);
        }
        const existingHandleElement = svgDrawingHelper.getSvgNode(svgNodeHash);
        if (existingHandleElement) {
            (0,_setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_2__["default"])(attributes, existingHandleElement);
            svgDrawingHelper.setNodeTouched(svgNodeHash);
        }
        else {
            const newHandleElement = document.createElementNS(svgns, type);
            (0,_setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_1__["default"])(attributes, newHandleElement);
            svgDrawingHelper.appendNode(newHandleElement, svgNodeHash);
        }
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (drawHandles);
//# sourceMappingURL=drawHandles.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLine.js":
/*!**********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLine.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ drawLine)
/* harmony export */ });
/* harmony import */ var _getHash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getHash */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_getHash.js");
/* harmony import */ var _setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_setNewAttributesIfValid */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setNewAttributesIfValid.js");
/* harmony import */ var _setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_setAttributesIfNecessary */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setAttributesIfNecessary.js");



function drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, options = {}, dataId = '') {
    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {
        return;
    }
    const { color, width, lineWidth, lineDash, shadow } = Object.assign({
        color: 'dodgerblue',
        width: '2',
        lineWidth: undefined,
        lineDash: undefined,
        shadow: undefined,
    }, options);
    const strokeWidth = lineWidth || width;
    const svgns = 'http://www.w3.org/2000/svg';
    const svgNodeHash = (0,_getHash__WEBPACK_IMPORTED_MODULE_0__["default"])(annotationUID, 'line', lineUID);
    const existingLine = svgDrawingHelper.getSvgNode(svgNodeHash);
    const dropShadowStyle = shadow
        ? `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`
        : '';
    const attributes = {
        x1: `${start[0]}`,
        y1: `${start[1]}`,
        x2: `${end[0]}`,
        y2: `${end[1]}`,
        stroke: color,
        style: dropShadowStyle,
        'stroke-width': strokeWidth,
        'stroke-dasharray': lineDash,
    };
    if (existingLine) {
        (0,_setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_2__["default"])(attributes, existingLine);
        svgDrawingHelper.setNodeTouched(svgNodeHash);
    }
    else {
        const newLine = document.createElementNS(svgns, 'line');
        if (dataId !== '') {
            newLine.setAttribute('data-id', dataId);
        }
        (0,_setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_1__["default"])(attributes, newLine);
        svgDrawingHelper.appendNode(newLine, svgNodeHash);
    }
}
//# sourceMappingURL=drawLine.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLink.js":
/*!**********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLink.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _drawLine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drawLine */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLine.js");
/* harmony import */ var _utilities_math_vec2_findClosestPoint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/math/vec2/findClosestPoint */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/findClosestPoint.js");


function drawLink(svgDrawingHelper, annotationUID, linkUID, annotationAnchorPoints, refPoint, boundingBox, options = {}) {
    const start = annotationAnchorPoints.length > 0
        ? (0,_utilities_math_vec2_findClosestPoint__WEBPACK_IMPORTED_MODULE_1__["default"])(annotationAnchorPoints, refPoint)
        : refPoint;
    const boundingBoxPoints = _boundingBoxPoints(boundingBox);
    const end = (0,_utilities_math_vec2_findClosestPoint__WEBPACK_IMPORTED_MODULE_1__["default"])(boundingBoxPoints, start);
    const mergedOptions = Object.assign({
        color: 'rgb(255, 255, 0)',
        lineWidth: '1',
        lineDash: '2,3',
    }, options);
    (0,_drawLine__WEBPACK_IMPORTED_MODULE_0__["default"])(svgDrawingHelper, annotationUID, `link-${linkUID}`, start, end, mergedOptions);
}
function _boundingBoxPoints(boundingBox) {
    const { x: left, y: top, height, width } = boundingBox;
    const halfWidth = width / 2;
    const halfHeight = height / 2;
    const topMiddle = [left + halfWidth, top];
    const leftMiddle = [left, top + halfHeight];
    const bottomMiddle = [left + halfWidth, top + height];
    const rightMiddle = [left + width, top + halfHeight];
    return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (drawLink);
//# sourceMappingURL=drawLink.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLinkedTextBox.js":
/*!*******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLinkedTextBox.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _drawTextBox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drawTextBox */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawTextBox.js");
/* harmony import */ var _drawLink__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./drawLink */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLink.js");


function drawLinkedTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, annotationAnchorPoints, textBox, options = {}) {
    const mergedOptions = Object.assign({
        handleRadius: '6',
        centering: {
            x: false,
            y: true,
        },
    }, options);
    const canvasBoundingBox = (0,_drawTextBox__WEBPACK_IMPORTED_MODULE_0__["default"])(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, mergedOptions);
    (0,_drawLink__WEBPACK_IMPORTED_MODULE_1__["default"])(svgDrawingHelper, annotationUID, textBoxUID, annotationAnchorPoints, textBoxPosition, canvasBoundingBox, mergedOptions);
    return canvasBoundingBox;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (drawLinkedTextBox);
//# sourceMappingURL=drawLinkedTextBox.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPolyline.js":
/*!**************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPolyline.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ drawPolyline)
/* harmony export */ });
/* harmony import */ var _getHash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getHash */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_getHash.js");
/* harmony import */ var _setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_setNewAttributesIfValid */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setNewAttributesIfValid.js");
/* harmony import */ var _setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_setAttributesIfNecessary */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setAttributesIfNecessary.js");



function drawPolyline(svgDrawingHelper, annotationUID, polylineUID, points, options) {
    if (points.length < 2) {
        return;
    }
    const { color, width, lineWidth, lineDash } = Object.assign({
        color: 'dodgerblue',
        width: '2',
        lineWidth: undefined,
        lineDash: undefined,
        connectLastToFirst: false,
    }, options);
    const strokeWidth = lineWidth || width;
    const svgns = 'http://www.w3.org/2000/svg';
    const svgNodeHash = (0,_getHash__WEBPACK_IMPORTED_MODULE_0__["default"])(annotationUID, 'polyline', polylineUID);
    const existingPolyLine = svgDrawingHelper.getSvgNode(svgNodeHash);
    let pointsAttribute = '';
    for (const point of points) {
        pointsAttribute += `${point[0]}, ${point[1]} `;
    }
    if (options.connectLastToFirst) {
        const firstPoint = points[0];
        pointsAttribute += `${firstPoint[0]}, ${firstPoint[1]}`;
    }
    const attributes = {
        points: pointsAttribute,
        stroke: color,
        fill: 'none',
        'stroke-width': strokeWidth,
        'stroke-dasharray': lineDash,
    };
    if (existingPolyLine) {
        (0,_setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_2__["default"])(attributes, existingPolyLine);
        svgDrawingHelper.setNodeTouched(svgNodeHash);
    }
    else {
        const newPolyLine = document.createElementNS(svgns, 'polyline');
        (0,_setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_1__["default"])(attributes, newPolyLine);
        svgDrawingHelper.appendNode(newPolyLine, svgNodeHash);
    }
}
//# sourceMappingURL=drawPolyline.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRect.js":
/*!**********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRect.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ drawRect)
/* harmony export */ });
/* harmony import */ var _getHash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getHash */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_getHash.js");
/* harmony import */ var _setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_setAttributesIfNecessary */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setAttributesIfNecessary.js");
/* harmony import */ var _setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_setNewAttributesIfValid */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setNewAttributesIfValid.js");



function drawRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}, dataId = '') {
    const { color, width: _width, lineWidth, lineDash, } = Object.assign({
        color: 'dodgerblue',
        width: '2',
        lineWidth: undefined,
        lineDash: undefined,
    }, options);
    const strokeWidth = lineWidth || _width;
    const svgns = 'http://www.w3.org/2000/svg';
    const svgNodeHash = (0,_getHash__WEBPACK_IMPORTED_MODULE_0__["default"])(annotationUID, 'rect', rectangleUID);
    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);
    const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];
    const width = Math.abs(start[0] - end[0]);
    const height = Math.abs(start[1] - end[1]);
    const attributes = {
        x: `${tlhc[0]}`,
        y: `${tlhc[1]}`,
        width: `${width}`,
        height: `${height}`,
        stroke: color,
        fill: 'transparent',
        'stroke-width': strokeWidth,
        'stroke-dasharray': lineDash,
    };
    if (existingRect) {
        (0,_setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_1__["default"])(attributes, existingRect);
        svgDrawingHelper.setNodeTouched(svgNodeHash);
    }
    else {
        const svgRectElement = document.createElementNS(svgns, 'rect');
        if (dataId !== '') {
            svgRectElement.setAttribute('data-id', dataId);
        }
        (0,_setNewAttributesIfValid__WEBPACK_IMPORTED_MODULE_2__["default"])(attributes, svgRectElement);
        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);
    }
}
//# sourceMappingURL=drawRect.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawTextBox.js":
/*!*************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawTextBox.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getHash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getHash */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_getHash.js");
/* harmony import */ var _setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_setAttributesIfNecessary */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/_setAttributesIfNecessary.js");


function drawTextBox(svgDrawingHelper, annotationUID, textUID, textLines, position, options = {}) {
    const mergedOptions = Object.assign({
        fontFamily: 'Helvetica, Arial, sans-serif',
        fontSize: '14px',
        color: 'rgb(255, 255, 0)',
        background: '',
        padding: 25,
        centerX: false,
        centerY: true,
    }, options);
    const textGroupBoundingBox = _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines, position, mergedOptions);
    return textGroupBoundingBox;
}
function _drawTextGroup(svgDrawingHelper, annotationUID, textUID, textLines = [''], position, options) {
    const { padding, color, fontFamily, fontSize, background } = options;
    let textGroupBoundingBox;
    const [x, y] = [position[0] + padding, position[1] + padding];
    const svgns = 'http://www.w3.org/2000/svg';
    const svgNodeHash = (0,_getHash__WEBPACK_IMPORTED_MODULE_0__["default"])(annotationUID, 'text', textUID);
    const existingTextGroup = svgDrawingHelper.getSvgNode(svgNodeHash);
    if (existingTextGroup) {
        const textElement = existingTextGroup.querySelector('text');
        const textSpans = Array.from(textElement.children);
        for (let i = 0; i < textSpans.length; i++) {
            const textSpanElement = textSpans[i];
            const text = textLines[i] || '';
            textSpanElement.textContent = text;
        }
        if (textLines.length > textSpans.length) {
            for (let i = 0; i < textLines.length - textSpans.length; i++) {
                const textLine = textLines[i + textSpans.length];
                const textSpan = _createTextSpan(textLine);
                textElement.appendChild(textSpan);
            }
            existingTextGroup.appendChild(textElement);
            svgDrawingHelper.appendNode(existingTextGroup, svgNodeHash);
        }
        const textAttributes = {
            fill: color,
            'font-size': fontSize,
            'font-family': fontFamily,
        };
        const textGroupAttributes = {
            transform: `translate(${x} ${y})`,
        };
        (0,_setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_1__["default"])(textAttributes, textElement);
        (0,_setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_1__["default"])(textGroupAttributes, existingTextGroup);
        textGroupBoundingBox = _drawTextBackground(existingTextGroup, background);
        svgDrawingHelper.setNodeTouched(svgNodeHash);
    }
    else {
        const textGroup = document.createElementNS(svgns, 'g');
        textGroup.setAttribute('transform', `translate(${x} ${y})`);
        const textElement = _createTextElement(svgDrawingHelper, options);
        for (let i = 0; i < textLines.length; i++) {
            const textLine = textLines[i];
            const textSpan = _createTextSpan(textLine);
            textElement.appendChild(textSpan);
        }
        textGroup.appendChild(textElement);
        svgDrawingHelper.appendNode(textGroup, svgNodeHash);
        textGroupBoundingBox = _drawTextBackground(textGroup, background);
    }
    return Object.assign({}, textGroupBoundingBox, {
        x,
        y,
        height: textGroupBoundingBox.height + padding,
        width: textGroupBoundingBox.width + padding,
    });
}
function _createTextElement(svgDrawingHelper, options) {
    const { color, fontFamily, fontSize } = options;
    const svgns = 'http://www.w3.org/2000/svg';
    const textElement = document.createElementNS(svgns, 'text');
    const noSelectStyle = 'user-select: none; pointer-events: none; -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);';
    const dropShadowStyle = `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`;
    const combinedStyle = `${noSelectStyle}${dropShadowStyle}`;
    textElement.setAttribute('x', '0');
    textElement.setAttribute('y', '0');
    textElement.setAttribute('fill', color);
    textElement.setAttribute('font-family', fontFamily);
    textElement.setAttribute('font-size', fontSize);
    textElement.setAttribute('style', combinedStyle);
    return textElement;
}
function _createTextSpan(text) {
    const svgns = 'http://www.w3.org/2000/svg';
    const textSpanElement = document.createElementNS(svgns, 'tspan');
    textSpanElement.setAttribute('x', '0');
    textSpanElement.setAttribute('dy', '1.2em');
    textSpanElement.textContent = text;
    return textSpanElement;
}
function _drawTextBackground(group, color) {
    let element = group.querySelector('rect.background');
    if (!color) {
        if (element) {
            group.removeChild(element);
        }
        return group.getBBox();
    }
    if (!element) {
        element = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        element.setAttribute('class', 'background');
        group.insertBefore(element, group.firstChild);
    }
    const bBox = group.getBBox();
    const attributes = {
        x: `${bBox.x}`,
        y: `${bBox.y}`,
        width: `${bBox.width}`,
        height: `${bBox.height}`,
        fill: color,
    };
    (0,_setAttributesIfNecessary__WEBPACK_IMPORTED_MODULE_1__["default"])(attributes, element);
    return bBox;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (drawTextBox);
//# sourceMappingURL=drawTextBox.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/getSvgDrawingHelper.js":
/*!*********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/getSvgDrawingHelper.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");


const VIEWPORT_ELEMENT = 'viewport-element';
function getSvgDrawingHelper(element) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
    const { viewportId, renderingEngineId } = enabledElement;
    const canvasHash = `${viewportId}:${renderingEngineId}`;
    const svgLayerElement = _getSvgLayer(element);
    Object.keys(_store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash]).forEach((cacheKey) => {
        _store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash][cacheKey].touched = false;
    });
    return {
        svgLayerElement: svgLayerElement,
        svgNodeCacheForCanvas: _store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache,
        getSvgNode: getSvgNode.bind(this, canvasHash),
        appendNode: appendNode.bind(this, svgLayerElement, canvasHash),
        setNodeTouched: setNodeTouched.bind(this, canvasHash),
        clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash),
    };
}
function _getSvgLayer(element) {
    const viewportElement = `.${VIEWPORT_ELEMENT}`;
    const internalDivElement = element.querySelector(viewportElement);
    const svgLayer = internalDivElement.querySelector('.svg-layer');
    return svgLayer;
}
function getSvgNode(canvasHash, cacheKey) {
    if (!_store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash]) {
        return;
    }
    if (_store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash][cacheKey]) {
        return _store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash][cacheKey].domRef;
    }
}
function appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {
    if (!_store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash]) {
        return null;
    }
    _store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash][cacheKey] = {
        touched: true,
        domRef: svgNode,
    };
    svgLayerElement.appendChild(svgNode);
}
function setNodeTouched(canvasHash, cacheKey) {
    if (!_store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash]) {
        return;
    }
    if (_store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash][cacheKey]) {
        _store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash][cacheKey].touched = true;
    }
}
function clearUntouched(svgLayerElement, canvasHash) {
    if (!_store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash]) {
        return;
    }
    Object.keys(_store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash]).forEach((cacheKey) => {
        const cacheEntry = _store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash][cacheKey];
        if (!cacheEntry.touched && cacheEntry.domRef) {
            svgLayerElement.removeChild(cacheEntry.domRef);
            delete _store__WEBPACK_IMPORTED_MODULE_0__.state.svgNodeCache[canvasHash][cacheKey];
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getSvgDrawingHelper);
//# sourceMappingURL=getSvgDrawingHelper.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js":
/*!*******************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   draw: () => (/* reexport safe */ _draw__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   drawArrow: () => (/* reexport safe */ _drawArrow__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   drawCircle: () => (/* reexport safe */ _drawCircle__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   drawEllipse: () => (/* reexport safe */ _drawEllipse__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   drawHandles: () => (/* reexport safe */ _drawHandles__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   drawLine: () => (/* reexport safe */ _drawLine__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   drawLinkedTextBox: () => (/* reexport safe */ _drawLinkedTextBox__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   drawPolyline: () => (/* reexport safe */ _drawPolyline__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   drawRect: () => (/* reexport safe */ _drawRect__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   drawTextBox: () => (/* reexport safe */ _drawTextBox__WEBPACK_IMPORTED_MODULE_8__["default"])
/* harmony export */ });
/* harmony import */ var _draw__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./draw */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/draw.js");
/* harmony import */ var _drawCircle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./drawCircle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawCircle.js");
/* harmony import */ var _drawEllipse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drawEllipse */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipse.js");
/* harmony import */ var _drawHandles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./drawHandles */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandles.js");
/* harmony import */ var _drawLine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./drawLine */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLine.js");
/* harmony import */ var _drawPolyline__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./drawPolyline */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawPolyline.js");
/* harmony import */ var _drawLinkedTextBox__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./drawLinkedTextBox */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLinkedTextBox.js");
/* harmony import */ var _drawRect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./drawRect */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRect.js");
/* harmony import */ var _drawTextBox__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./drawTextBox */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawTextBox.js");
/* harmony import */ var _drawArrow__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./drawArrow */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js");











//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/AnnotationStyleStates.js":
/*!******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/enums/AnnotationStyleStates.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var AnnotationStyleStates;
(function (AnnotationStyleStates) {
    AnnotationStyleStates["Default"] = "";
    AnnotationStyleStates["Highlighted"] = "Highlighted";
    AnnotationStyleStates["Selected"] = "Selected";
    AnnotationStyleStates["Locked"] = "Locked";
})(AnnotationStyleStates || (AnnotationStyleStates = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AnnotationStyleStates);
//# sourceMappingURL=AnnotationStyleStates.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js":
/*!***************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var Events;
(function (Events) {
    Events["ANNOTATION_ADDED"] = "CORNERSTONE_TOOLS_ANNOTATION_ADDED";
    Events["ANNOTATION_COMPLETED"] = "CORNERSTONE_TOOLS_ANNOTATION_COMPLETED";
    Events["ANNOTATION_MODIFIED"] = "CORNERSTONE_TOOLS_ANNOTATION_MODIFIED";
    Events["ANNOTATION_REMOVED"] = "CORNERSTONE_TOOLS_ANNOTATION_REMOVED";
    Events["ANNOTATION_SELECTION_CHANGE"] = "CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE";
    Events["ANNOTATION_LOCK_CHANGE"] = "CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE";
    Events["ANNOTATION_VISIBILITY_CHANGE"] = "CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE";
    Events["ANNOTATION_RENDERED"] = "CORNERSTONE_TOOLS_ANNOTATION_RENDERED";
    Events["SEGMENTATION_MODIFIED"] = "CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED";
    Events["SEGMENTATION_RENDERED"] = "CORNERSTONE_TOOLS_SEGMENTATION_RENDERED";
    Events["SEGMENTATION_REPRESENTATION_MODIFIED"] = "CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED";
    Events["SEGMENTATION_REMOVED"] = "CORNERSTONE_TOOLS_SEGMENTATION_REMOVED";
    Events["SEGMENTATION_REPRESENTATION_REMOVED"] = "CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED";
    Events["SEGMENTATION_DATA_MODIFIED"] = "CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED";
    Events["KEY_DOWN"] = "CORNERSTONE_TOOLS_KEY_DOWN";
    Events["KEY_UP"] = "CORNERSTONE_TOOLS_KEY_UP";
    Events["MOUSE_DOWN"] = "CORNERSTONE_TOOLS_MOUSE_DOWN";
    Events["MOUSE_UP"] = "CORNERSTONE_TOOLS_MOUSE_UP";
    Events["MOUSE_DOWN_ACTIVATE"] = "CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE";
    Events["MOUSE_DRAG"] = "CORNERSTONE_TOOLS_MOUSE_DRAG";
    Events["MOUSE_MOVE"] = "CORNERSTONE_TOOLS_MOUSE_MOVE";
    Events["MOUSE_CLICK"] = "CORNERSTONE_TOOLS_MOUSE_CLICK";
    Events["MOUSE_DOUBLE_CLICK"] = "CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK";
    Events["MOUSE_WHEEL"] = "CORNERSTONE_TOOLS_MOUSE_WHEEL";
    Events["TOUCH_START"] = "CORNERSTONE_TOOLS_TOUCH_START";
    Events["TOUCH_START_ACTIVATE"] = "CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE";
    Events["TOUCH_PRESS"] = "CORNERSTONE_TOOLS_TOUCH_PRESS";
    Events["TOUCH_DRAG"] = "CORNERSTONE_TOOLS_TOUCH_DRAG";
    Events["TOUCH_END"] = "CORNERSTONE_TOOLS_TOUCH_END";
    Events["TOUCH_TAP"] = "CORNERSTONE_TOOLS_TAP";
    Events["TOUCH_SWIPE"] = "CORNERSTONE_TOOLS_SWIPE";
})(Events || (Events = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Events);
//# sourceMappingURL=Events.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js":
/*!************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var SegmentationRepresentations;
(function (SegmentationRepresentations) {
    SegmentationRepresentations["Labelmap"] = "LABELMAP";
    SegmentationRepresentations["Contour"] = "CONTOUR";
})(SegmentationRepresentations || (SegmentationRepresentations = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SegmentationRepresentations);
//# sourceMappingURL=SegmentationRepresentations.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolBindings.js":
/*!*********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolBindings.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeyboardBindings: () => (/* binding */ KeyboardBindings),
/* harmony export */   MouseBindings: () => (/* binding */ MouseBindings)
/* harmony export */ });
var MouseBindings;
(function (MouseBindings) {
    MouseBindings[MouseBindings["Primary"] = 1] = "Primary";
    MouseBindings[MouseBindings["Secondary"] = 2] = "Secondary";
    MouseBindings[MouseBindings["Primary_And_Secondary"] = 3] = "Primary_And_Secondary";
    MouseBindings[MouseBindings["Auxiliary"] = 4] = "Auxiliary";
    MouseBindings[MouseBindings["Primary_And_Auxiliary"] = 5] = "Primary_And_Auxiliary";
    MouseBindings[MouseBindings["Secondary_And_Auxiliary"] = 6] = "Secondary_And_Auxiliary";
    MouseBindings[MouseBindings["Primary_And_Secondary_And_Auxiliary"] = 7] = "Primary_And_Secondary_And_Auxiliary";
    MouseBindings[MouseBindings["Fourth_Button"] = 8] = "Fourth_Button";
    MouseBindings[MouseBindings["Fifth_Button"] = 16] = "Fifth_Button";
})(MouseBindings || (MouseBindings = {}));
var KeyboardBindings;
(function (KeyboardBindings) {
    KeyboardBindings[KeyboardBindings["Shift"] = 16] = "Shift";
    KeyboardBindings[KeyboardBindings["Ctrl"] = 17] = "Ctrl";
    KeyboardBindings[KeyboardBindings["Alt"] = 18] = "Alt";
    KeyboardBindings[KeyboardBindings["Meta"] = 91] = "Meta";
    KeyboardBindings[KeyboardBindings["ShiftCtrl"] = 1617] = "ShiftCtrl";
    KeyboardBindings[KeyboardBindings["ShiftAlt"] = 1618] = "ShiftAlt";
    KeyboardBindings[KeyboardBindings["ShiftMeta"] = 1691] = "ShiftMeta";
    KeyboardBindings[KeyboardBindings["CtrlAlt"] = 1718] = "CtrlAlt";
    KeyboardBindings[KeyboardBindings["CtrlMeta"] = 1791] = "CtrlMeta";
    KeyboardBindings[KeyboardBindings["AltMeta"] = 1891] = "AltMeta";
})(KeyboardBindings || (KeyboardBindings = {}));

//# sourceMappingURL=ToolBindings.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js":
/*!******************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var ToolModes;
(function (ToolModes) {
    ToolModes["Active"] = "Active";
    ToolModes["Passive"] = "Passive";
    ToolModes["Enabled"] = "Enabled";
    ToolModes["Disabled"] = "Disabled";
})(ToolModes || (ToolModes = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ToolModes);
//# sourceMappingURL=ToolModes.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js":
/*!**************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Swipe: () => (/* binding */ Swipe)
/* harmony export */ });
var Swipe;
(function (Swipe) {
    Swipe["UP"] = "UP";
    Swipe["DOWN"] = "DOWN";
    Swipe["LEFT"] = "LEFT";
    Swipe["RIGHT"] = "RIGHT";
})(Swipe || (Swipe = {}));

//# sourceMappingURL=Touch.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js":
/*!**************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AnnotationStyleStates: () => (/* reexport safe */ _AnnotationStyleStates__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   Events: () => (/* reexport safe */ _Events__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   KeyboardBindings: () => (/* reexport safe */ _ToolBindings__WEBPACK_IMPORTED_MODULE_0__.KeyboardBindings),
/* harmony export */   MouseBindings: () => (/* reexport safe */ _ToolBindings__WEBPACK_IMPORTED_MODULE_0__.MouseBindings),
/* harmony export */   SegmentationRepresentations: () => (/* reexport safe */ _SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   Swipe: () => (/* reexport safe */ _Touch__WEBPACK_IMPORTED_MODULE_5__.Swipe),
/* harmony export */   ToolModes: () => (/* reexport safe */ _ToolModes__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var _ToolBindings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ToolBindings */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolBindings.js");
/* harmony import */ var _ToolModes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ToolModes */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js");
/* harmony import */ var _AnnotationStyleStates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AnnotationStyleStates */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/AnnotationStyleStates.js");
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js");
/* harmony import */ var _SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SegmentationRepresentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js");
/* harmony import */ var _Touch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Touch */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js");







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _shared_getToolsWithModesForMouseEvent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/getToolsWithModesForMouseEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithModesForMouseEvent.js");



const { Active, Passive, Enabled } = _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes;
const onCameraModified = function (evt) {
    const enabledTools = (0,_shared_getToolsWithModesForMouseEvent__WEBPACK_IMPORTED_MODULE_2__["default"])(evt, [
        Active,
        Passive,
        Enabled,
    ]);
    enabledTools.forEach((tool) => {
        if (tool.onCameraModified) {
            tool.onCameraModified(evt);
        }
    });
};
const enable = function (element) {
    element.addEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.CAMERA_MODIFIED, onCameraModified);
};
const disable = function (element) {
    element.removeEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.CAMERA_MODIFIED, onCameraModified);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    enable,
    disable,
});
//# sourceMappingURL=cameraModifiedEventDispatcher.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageRenderedEventDispatcher.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageRenderedEventDispatcher.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities_triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/triggerAnnotationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js");


const onImageRendered = function (evt) {
    (0,_utilities_triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_1__["default"])(evt.detail.element);
};
const enable = function (element) {
    element.addEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.IMAGE_RENDERED, onImageRendered);
};
const disable = function (element) {
    element.removeEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.IMAGE_RENDERED, onImageRendered);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    enable,
    disable,
});
//# sourceMappingURL=imageRenderedEventDispatcher.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _shared_getToolsWithModesForMouseEvent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/getToolsWithModesForMouseEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithModesForMouseEvent.js");



const { Active, Passive, Enabled } = _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes;
const onImageSpacingCalibrated = function (evt) {
    const enabledTools = (0,_shared_getToolsWithModesForMouseEvent__WEBPACK_IMPORTED_MODULE_2__["default"])(evt, [
        Active,
        Passive,
        Enabled,
    ]);
    enabledTools.forEach((tool) => {
        if (tool.onImageSpacingCalibrated) {
            tool.onImageSpacingCalibrated(evt);
        }
    });
};
const enable = function (element) {
    element.addEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);
};
const disable = function (element) {
    element.removeEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    enable,
    disable,
});
//# sourceMappingURL=imageSpacingCalibratedEventDispatcher.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/index.js":
/*!*************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cameraModifiedEventDispatcher: () => (/* reexport safe */ _cameraModifiedEventDispatcher__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   imageRenderedEventDispatcher: () => (/* reexport safe */ _imageRenderedEventDispatcher__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   imageSpacingCalibratedEventDispatcher: () => (/* reexport safe */ _imageSpacingCalibratedEventDispatcher__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   keyboardToolEventDispatcher: () => (/* reexport safe */ _keyboardToolEventDispatcher__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   mouseToolEventDispatcher: () => (/* reexport safe */ _mouseToolEventDispatcher__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   touchToolEventDispatcher: () => (/* reexport safe */ _touchToolEventDispatcher__WEBPACK_IMPORTED_MODULE_5__["default"])
/* harmony export */ });
/* harmony import */ var _imageRenderedEventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./imageRenderedEventDispatcher */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageRenderedEventDispatcher.js");
/* harmony import */ var _mouseToolEventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mouseToolEventDispatcher */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseToolEventDispatcher.js");
/* harmony import */ var _keyboardToolEventDispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keyboardToolEventDispatcher */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardToolEventDispatcher.js");
/* harmony import */ var _cameraModifiedEventDispatcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cameraModifiedEventDispatcher */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js");
/* harmony import */ var _imageSpacingCalibratedEventDispatcher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./imageSpacingCalibratedEventDispatcher */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js");
/* harmony import */ var _touchToolEventDispatcher__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./touchToolEventDispatcher */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchToolEventDispatcher.js");







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardEventHandlers/index.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardEventHandlers/index.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   keyDown: () => (/* reexport safe */ _keyDown__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   keyUp: () => (/* reexport safe */ _keyUp__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var _keyDown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keyDown */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardEventHandlers/keyDown.js");
/* harmony import */ var _keyUp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyUp */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardEventHandlers/keyUp.js");



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardEventHandlers/keyDown.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardEventHandlers/keyDown.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ keyDown)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _shared_getActiveToolForKeyboardEvent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/getActiveToolForKeyboardEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForKeyboardEvent.js");


function keyDown(evt) {
    const activeTool = (0,_shared_getActiveToolForKeyboardEvent__WEBPACK_IMPORTED_MODULE_1__["default"])(evt);
    if (!activeTool) {
        return;
    }
    const { renderingEngineId, viewportId } = evt.detail;
    const toolGroup = _store__WEBPACK_IMPORTED_MODULE_0__.ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);
    const toolName = activeTool.getToolName();
    if (Object.keys(toolGroup.toolOptions).includes(toolName)) {
        toolGroup.setViewportsCursorByToolName(toolName);
    }
}
//# sourceMappingURL=keyDown.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardEventHandlers/keyUp.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardEventHandlers/keyUp.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ keyUp)
/* harmony export */ });
/* harmony import */ var _eventListeners_keyboard_keyDownListener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../eventListeners/keyboard/keyDownListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/keyboard/keyDownListener.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _shared_getActiveToolForKeyboardEvent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/getActiveToolForKeyboardEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForKeyboardEvent.js");



function keyUp(evt) {
    const activeTool = (0,_shared_getActiveToolForKeyboardEvent__WEBPACK_IMPORTED_MODULE_2__["default"])(evt);
    if (!activeTool) {
        return;
    }
    const { renderingEngineId, viewportId } = evt.detail;
    const toolGroup = _store__WEBPACK_IMPORTED_MODULE_1__.ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);
    (0,_eventListeners_keyboard_keyDownListener__WEBPACK_IMPORTED_MODULE_0__.resetModifierKey)();
    const toolName = activeTool.getToolName();
    if (Object.keys(toolGroup.toolOptions).includes(toolName)) {
        toolGroup.setViewportsCursorByToolName(toolName);
    }
}
//# sourceMappingURL=keyUp.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardToolEventDispatcher.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardToolEventDispatcher.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_Events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums/Events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js");
/* harmony import */ var _keyboardEventHandlers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyboardEventHandlers */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/keyboardEventHandlers/index.js");


const enable = function (element) {
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].KEY_DOWN, _keyboardEventHandlers__WEBPACK_IMPORTED_MODULE_1__.keyDown);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].KEY_UP, _keyboardEventHandlers__WEBPACK_IMPORTED_MODULE_1__.keyUp);
};
const disable = function (element) {
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].KEY_DOWN, _keyboardEventHandlers__WEBPACK_IMPORTED_MODULE_1__.keyDown);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].KEY_UP, _keyboardEventHandlers__WEBPACK_IMPORTED_MODULE_1__.keyUp);
};
const keyboardToolEventDispatcher = {
    enable,
    disable,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (keyboardToolEventDispatcher);
//# sourceMappingURL=keyboardToolEventDispatcher.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/index.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/index.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mouseClick: () => (/* reexport safe */ _mouseClick__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   mouseDoubleClick: () => (/* reexport safe */ _mouseDoubleClick__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   mouseDown: () => (/* reexport safe */ _mouseDown__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   mouseDownActivate: () => (/* reexport safe */ _mouseDownActivate__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   mouseDrag: () => (/* reexport safe */ _mouseDrag__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   mouseMove: () => (/* reexport safe */ _mouseMove__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   mouseUp: () => (/* reexport safe */ _mouseUp__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   mouseWheel: () => (/* reexport safe */ _mouseWheel__WEBPACK_IMPORTED_MODULE_7__["default"])
/* harmony export */ });
/* harmony import */ var _mouseClick__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mouseClick */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseClick.js");
/* harmony import */ var _mouseDoubleClick__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mouseDoubleClick */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDoubleClick.js");
/* harmony import */ var _mouseDown__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mouseDown */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDown.js");
/* harmony import */ var _mouseDownActivate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mouseDownActivate */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDownActivate.js");
/* harmony import */ var _mouseDrag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mouseDrag */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDrag.js");
/* harmony import */ var _mouseMove__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mouseMove */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseMove.js");
/* harmony import */ var _mouseUp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mouseUp */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseUp.js");
/* harmony import */ var _mouseWheel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mouseWheel */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseWheel.js");









//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseClick.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseClick.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/customCallbackHandler */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/customCallbackHandler.js");

const mouseClick = _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__["default"].bind(null, 'Mouse', 'mouseClickCallback');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mouseClick);
//# sourceMappingURL=mouseClick.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDoubleClick.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDoubleClick.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/customCallbackHandler */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/customCallbackHandler.js");

const mouseDoubleClick = _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__["default"].bind(null, 'Mouse', 'doubleClickCallback');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mouseDoubleClick);
//# sourceMappingURL=mouseDoubleClick.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDown.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDown.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mouseDown)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationSelection */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");
/* harmony import */ var _store_filterToolsWithMoveableHandles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../store/filterToolsWithMoveableHandles */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithMoveableHandles.js");
/* harmony import */ var _store_filterToolsWithAnnotationsForElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../store/filterToolsWithAnnotationsForElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithAnnotationsForElement.js");
/* harmony import */ var _store_filterMoveableAnnotationTools__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../store/filterMoveableAnnotationTools */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterMoveableAnnotationTools.js");
/* harmony import */ var _shared_getActiveToolForMouseEvent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../shared/getActiveToolForMouseEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForMouseEvent.js");
/* harmony import */ var _shared_getToolsWithModesForMouseEvent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared/getToolsWithModesForMouseEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithModesForMouseEvent.js");










const { Active, Passive } = _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes;
function mouseDown(evt) {
    if (_store__WEBPACK_IMPORTED_MODULE_0__.state.isInteractingWithTool) {
        return;
    }
    const activeTool = (0,_shared_getActiveToolForMouseEvent__WEBPACK_IMPORTED_MODULE_8__["default"])(evt);
    if (activeTool && typeof activeTool.preMouseDownCallback === 'function') {
        const consumedEvent = activeTool.preMouseDownCallback(evt);
        if (consumedEvent) {
            return;
        }
    }
    const isPrimaryClick = evt.detail.event.buttons === 1;
    const activeToolsWithEventBinding = (0,_shared_getToolsWithModesForMouseEvent__WEBPACK_IMPORTED_MODULE_9__["default"])(evt, [Active], evt.detail.event.buttons);
    const passiveToolsIfEventWasPrimaryMouseButton = isPrimaryClick
        ? (0,_shared_getToolsWithModesForMouseEvent__WEBPACK_IMPORTED_MODULE_9__["default"])(evt, [Passive])
        : undefined;
    const applicableTools = [
        ...(activeToolsWithEventBinding || []),
        ...(passiveToolsIfEventWasPrimaryMouseButton || []),
    ];
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const annotationToolsWithAnnotations = (0,_store_filterToolsWithAnnotationsForElement__WEBPACK_IMPORTED_MODULE_6__["default"])(element, applicableTools);
    const canvasCoords = eventDetail.currentPoints.canvas;
    const annotationToolsWithMoveableHandles = (0,_store_filterToolsWithMoveableHandles__WEBPACK_IMPORTED_MODULE_5__["default"])(element, annotationToolsWithAnnotations, canvasCoords, 'mouse');
    const isMultiSelect = !!evt.detail.event.shiftKey;
    if (annotationToolsWithMoveableHandles.length > 0) {
        const { tool, annotation, handle } = getAnnotationForSelection(annotationToolsWithMoveableHandles);
        toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);
        tool.handleSelectedCallback(evt, annotation, handle, 'Mouse');
        return;
    }
    const moveableAnnotationTools = (0,_store_filterMoveableAnnotationTools__WEBPACK_IMPORTED_MODULE_7__["default"])(element, annotationToolsWithAnnotations, canvasCoords, 'mouse');
    if (moveableAnnotationTools.length > 0) {
        const { tool, annotation } = getAnnotationForSelection(moveableAnnotationTools);
        toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);
        tool.toolSelectedCallback(evt, annotation, 'Mouse');
        return;
    }
    if (activeTool && typeof activeTool.postMouseDownCallback === 'function') {
        const consumedEvent = activeTool.postMouseDownCallback(evt);
        if (consumedEvent) {
            return;
        }
    }
}
function getAnnotationForSelection(toolsWithMovableHandles) {
    return ((toolsWithMovableHandles.length > 1 &&
        toolsWithMovableHandles.find((item) => !(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_3__.isAnnotationLocked)(item.annotation) &&
            (0,_stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_4__.isAnnotationVisible)(item.annotation.annotationUID))) ||
        toolsWithMovableHandles[0]);
}
function toggleAnnotationSelection(annotationUID, isMultiSelect = false) {
    if (isMultiSelect) {
        if ((0,_stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__.isAnnotationSelected)(annotationUID)) {
            (0,_stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__.setAnnotationSelected)(annotationUID, false);
        }
        else {
            const preserveSelected = true;
            (0,_stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__.setAnnotationSelected)(annotationUID, true, preserveSelected);
        }
    }
    else {
        const preserveSelected = false;
        (0,_stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__.setAnnotationSelected)(annotationUID, true, preserveSelected);
    }
}
//# sourceMappingURL=mouseDown.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDownActivate.js":
/*!********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDownActivate.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mouseDownActivate)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _shared_getActiveToolForMouseEvent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/getActiveToolForMouseEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForMouseEvent.js");
/* harmony import */ var _stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationSelection */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js");



function mouseDownActivate(evt) {
    if (_store__WEBPACK_IMPORTED_MODULE_0__.state.isInteractingWithTool) {
        return;
    }
    const activeTool = (0,_shared_getActiveToolForMouseEvent__WEBPACK_IMPORTED_MODULE_1__["default"])(evt);
    if (!activeTool) {
        return;
    }
    if (_store__WEBPACK_IMPORTED_MODULE_0__.state.isMultiPartToolActive) {
        return;
    }
    if (activeTool.addNewAnnotation) {
        const annotation = activeTool.addNewAnnotation(evt, 'mouse');
        (0,_stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__.setAnnotationSelected)(annotation.annotationUID);
    }
}
//# sourceMappingURL=mouseDownActivate.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDrag.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseDrag.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mouseDrag)
/* harmony export */ });
/* harmony import */ var _shared_getActiveToolForMouseEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/getActiveToolForMouseEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForMouseEvent.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");


function mouseDrag(evt) {
    if (_store__WEBPACK_IMPORTED_MODULE_1__.state.isInteractingWithTool) {
        return;
    }
    const activeTool = (0,_shared_getActiveToolForMouseEvent__WEBPACK_IMPORTED_MODULE_0__["default"])(evt);
    const noFoundToolOrDoesNotHaveMouseDragCallback = !activeTool || typeof activeTool.mouseDragCallback !== 'function';
    if (noFoundToolOrDoesNotHaveMouseDragCallback) {
        return;
    }
    activeTool.mouseDragCallback(evt);
}
//# sourceMappingURL=mouseDrag.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseMove.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseMove.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mouseMove)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _store_filterToolsWithAnnotationsForElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../store/filterToolsWithAnnotationsForElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithAnnotationsForElement.js");
/* harmony import */ var _shared_getToolsWithModesForMouseEvent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/getToolsWithModesForMouseEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithModesForMouseEvent.js");
/* harmony import */ var _utilities_triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js");





const { Active, Passive } = _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes;
function mouseMove(evt) {
    if (_store__WEBPACK_IMPORTED_MODULE_0__.state.isInteractingWithTool || _store__WEBPACK_IMPORTED_MODULE_0__.state.isMultiPartToolActive) {
        return;
    }
    const activeAndPassiveTools = (0,_shared_getToolsWithModesForMouseEvent__WEBPACK_IMPORTED_MODULE_3__["default"])(evt, [
        Active,
        Passive,
    ]);
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const toolsWithAnnotations = (0,_store_filterToolsWithAnnotationsForElement__WEBPACK_IMPORTED_MODULE_2__["default"])(element, activeAndPassiveTools);
    const toolsWithoutAnnotations = activeAndPassiveTools.filter((tool) => {
        const doesNotHaveAnnotations = !toolsWithAnnotations.some((toolAndAnnotation) => toolAndAnnotation.tool.getToolName() === tool.getToolName());
        return doesNotHaveAnnotations;
    });
    let annotationsNeedToBeRedrawn = false;
    for (const { tool, annotations } of toolsWithAnnotations) {
        if (typeof tool.mouseMoveCallback === 'function') {
            annotationsNeedToBeRedrawn =
                tool.mouseMoveCallback(evt, annotations) || annotationsNeedToBeRedrawn;
        }
    }
    toolsWithoutAnnotations.forEach((tool) => {
        if (typeof tool.mouseMoveCallback === 'function') {
            tool.mouseMoveCallback(evt);
        }
    });
    if (annotationsNeedToBeRedrawn === true) {
        (0,_utilities_triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_4__["default"])(element);
    }
}
//# sourceMappingURL=mouseMove.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseUp.js":
/*!**********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseUp.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/customCallbackHandler */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/customCallbackHandler.js");

const mouseUp = _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__["default"].bind(null, 'Mouse', 'mouseUpCallback');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mouseUp);
//# sourceMappingURL=mouseUp.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseWheel.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/mouseWheel.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/customCallbackHandler */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/customCallbackHandler.js");

const mouseWheel = _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__["default"].bind(null, 'MouseWheel', 'mouseWheelCallback');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mouseWheel);
//# sourceMappingURL=mouseWheel.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseToolEventDispatcher.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseToolEventDispatcher.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_Events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums/Events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js");
/* harmony import */ var _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mouseEventHandlers */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/mouseEventHandlers/index.js");


const enable = function (element) {
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_CLICK, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseClick);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_DOWN, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseDown);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_DOWN_ACTIVATE, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseDownActivate);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_DOUBLE_CLICK, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseDoubleClick);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_DRAG, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseDrag);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_MOVE, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseMove);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_UP, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseUp);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_WHEEL, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseWheel);
};
const disable = function (element) {
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_CLICK, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseClick);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_DOWN, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseDown);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_DOWN_ACTIVATE, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseDownActivate);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_DOUBLE_CLICK, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseDoubleClick);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_DRAG, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseDrag);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_MOVE, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseMove);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_UP, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseUp);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].MOUSE_WHEEL, _mouseEventHandlers__WEBPACK_IMPORTED_MODULE_1__.mouseWheel);
};
const mouseToolEventDispatcher = {
    enable,
    disable,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mouseToolEventDispatcher);
//# sourceMappingURL=mouseToolEventDispatcher.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/customCallbackHandler.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/customCallbackHandler.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ customCallbackHandler)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums_ToolModes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums/ToolModes */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ToolModes.js");


const { Active } = _enums_ToolModes__WEBPACK_IMPORTED_MODULE_1__["default"];
function customCallbackHandler(handlerType, customFunction, evt) {
    if (_store__WEBPACK_IMPORTED_MODULE_0__.state.isInteractingWithTool) {
        return false;
    }
    const { renderingEngineId, viewportId } = evt.detail;
    const toolGroup = _store__WEBPACK_IMPORTED_MODULE_0__.ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);
    if (!toolGroup) {
        return false;
    }
    let activeTool;
    const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
    for (let j = 0; j < toolGroupToolNames.length; j++) {
        const toolName = toolGroupToolNames[j];
        const tool = toolGroup.toolOptions[toolName];
        const toolInstance = toolGroup.getToolInstance(toolName);
        if (tool.mode === Active &&
            typeof toolInstance[customFunction] === 'function') {
            activeTool = toolGroup.getToolInstance(toolName);
            break;
        }
    }
    if (!activeTool) {
        return;
    }
    activeTool[customFunction](evt);
}
//# sourceMappingURL=customCallbackHandler.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForKeyboardEvent.js":
/*!********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForKeyboardEvent.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getActiveToolForKeyboardEvent)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _eventListeners__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../eventListeners */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/index.js");
/* harmony import */ var _eventListeners_mouse_mouseDownListener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../eventListeners/mouse/mouseDownListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseDownListener.js");




const { Active } = _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes;
function getActiveToolForKeyboardEvent(evt) {
    const { renderingEngineId, viewportId } = evt.detail;
    const mouseButton = (0,_eventListeners_mouse_mouseDownListener__WEBPACK_IMPORTED_MODULE_3__.getMouseButton)();
    const modifierKey = _eventListeners__WEBPACK_IMPORTED_MODULE_2__.keyEventListener.getModifierKey();
    const toolGroup = _store__WEBPACK_IMPORTED_MODULE_0__.ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);
    if (!toolGroup) {
        return null;
    }
    const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
    const defaultMousePrimary = toolGroup.getDefaultMousePrimary();
    for (let j = 0; j < toolGroupToolNames.length; j++) {
        const toolName = toolGroupToolNames[j];
        const toolOptions = toolGroup.toolOptions[toolName];
        const correctBinding = toolOptions.bindings.length &&
            toolOptions.bindings.some((binding) => binding.mouseButton === (mouseButton ?? defaultMousePrimary) &&
                binding.modifierKey === modifierKey);
        if (toolOptions.mode === Active && correctBinding) {
            return toolGroup.getToolInstance(toolName);
        }
    }
}
//# sourceMappingURL=getActiveToolForKeyboardEvent.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForMouseEvent.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForMouseEvent.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getActiveToolForMouseEvent)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _eventListeners__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../eventListeners */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/index.js");
/* harmony import */ var _getMouseModifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getMouseModifier */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getMouseModifier.js");




const { Active } = _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes;
function getActiveToolForMouseEvent(evt) {
    const { renderingEngineId, viewportId } = evt.detail;
    const mouseEvent = evt.detail.event;
    const modifierKey = (0,_getMouseModifier__WEBPACK_IMPORTED_MODULE_3__["default"])(mouseEvent) || _eventListeners__WEBPACK_IMPORTED_MODULE_2__.keyEventListener.getModifierKey();
    const toolGroup = _store__WEBPACK_IMPORTED_MODULE_0__.ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);
    if (!toolGroup) {
        return null;
    }
    const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
    const defaultMousePrimary = toolGroup.getDefaultMousePrimary();
    for (let j = 0; j < toolGroupToolNames.length; j++) {
        const toolName = toolGroupToolNames[j];
        const toolOptions = toolGroup.toolOptions[toolName];
        const correctBinding = toolOptions.bindings.length &&
            toolOptions.bindings.some((binding) => {
                return (binding.mouseButton ===
                    (mouseEvent ? mouseEvent.buttons : defaultMousePrimary) &&
                    binding.modifierKey === modifierKey);
            });
        if (toolOptions.mode === Active && correctBinding) {
            return toolGroup.getToolInstance(toolName);
        }
    }
}
//# sourceMappingURL=getActiveToolForMouseEvent.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForTouchEvent.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForTouchEvent.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getActiveToolForTouchEvent)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _getMouseModifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getMouseModifier */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getMouseModifier.js");
/* harmony import */ var _eventListeners__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../eventListeners */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/index.js");




const { Active } = _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes;
function getActiveToolForTouchEvent(evt) {
    const { renderingEngineId, viewportId } = evt.detail;
    const touchEvent = evt.detail.event;
    const toolGroup = _store__WEBPACK_IMPORTED_MODULE_0__.ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);
    if (!toolGroup) {
        return null;
    }
    const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
    const numTouchPoints = Object.keys(touchEvent.touches).length;
    const modifierKey = (0,_getMouseModifier__WEBPACK_IMPORTED_MODULE_2__["default"])(touchEvent) || _eventListeners__WEBPACK_IMPORTED_MODULE_3__.keyEventListener.getModifierKey();
    const defaultMousePrimary = toolGroup.getDefaultMousePrimary();
    for (let j = 0; j < toolGroupToolNames.length; j++) {
        const toolName = toolGroupToolNames[j];
        const toolOptions = toolGroup.toolOptions[toolName];
        const correctBinding = toolOptions.bindings.length &&
            toolOptions.bindings.some((binding) => (binding.numTouchPoints === numTouchPoints ||
                (numTouchPoints === 1 &&
                    binding.mouseButton === defaultMousePrimary)) &&
                binding.modifierKey === modifierKey);
        if (toolOptions.mode === Active && correctBinding) {
            return toolGroup.getToolInstance(toolName);
        }
    }
}
//# sourceMappingURL=getActiveToolForTouchEvent.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getMouseModifier.js":
/*!*******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getMouseModifier.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");

const getMouseModifierKey = (evt) => {
    if (evt.shiftKey) {
        if (evt.ctrlKey)
            return _enums__WEBPACK_IMPORTED_MODULE_0__.KeyboardBindings.ShiftCtrl;
        if (evt.altKey)
            return _enums__WEBPACK_IMPORTED_MODULE_0__.KeyboardBindings.ShiftAlt;
        if (evt.metaKey)
            return _enums__WEBPACK_IMPORTED_MODULE_0__.KeyboardBindings.ShiftMeta;
        return _enums__WEBPACK_IMPORTED_MODULE_0__.KeyboardBindings.Shift;
    }
    if (evt.ctrlKey) {
        if (evt.altKey)
            return _enums__WEBPACK_IMPORTED_MODULE_0__.KeyboardBindings.CtrlAlt;
        if (evt.metaKey)
            return _enums__WEBPACK_IMPORTED_MODULE_0__.KeyboardBindings.CtrlMeta;
        return _enums__WEBPACK_IMPORTED_MODULE_0__.KeyboardBindings.Ctrl;
    }
    if (evt.altKey) {
        return (evt.metaKey && _enums__WEBPACK_IMPORTED_MODULE_0__.KeyboardBindings.AltMeta) || _enums__WEBPACK_IMPORTED_MODULE_0__.KeyboardBindings.Alt;
    }
    if (evt.metaKey) {
        return _enums__WEBPACK_IMPORTED_MODULE_0__.KeyboardBindings.Meta;
    }
    return undefined;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getMouseModifierKey);
//# sourceMappingURL=getMouseModifier.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithModesForMouseEvent.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithModesForMouseEvent.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getToolsWithModesForMouseEvent)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");

function getToolsWithModesForMouseEvent(evt, modesFilter, evtButton) {
    const { renderingEngineId, viewportId } = evt.detail;
    const toolGroup = _store__WEBPACK_IMPORTED_MODULE_0__.ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);
    if (!toolGroup) {
        return [];
    }
    const enabledTools = [];
    const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
    for (let j = 0; j < toolGroupToolNames.length; j++) {
        const toolName = toolGroupToolNames[j];
        const tool = toolGroup.toolOptions[toolName];
        const correctBinding = evtButton != null &&
            tool.bindings.length &&
            tool.bindings.some((binding) => binding.mouseButton === evtButton);
        if (modesFilter.includes(tool.mode) &&
            (!evtButton || correctBinding)) {
            const toolInstance = toolGroup.getToolInstance(toolName);
            enabledTools.push(toolInstance);
        }
    }
    return enabledTools;
}
//# sourceMappingURL=getToolsWithModesForMouseEvent.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithModesForTouchEvent.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithModesForTouchEvent.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getToolsWithModesForTouchEvent)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");

function getToolsWithModesForTouchEvent(evt, modesFilter, numTouchPoints) {
    const { renderingEngineId, viewportId } = evt.detail;
    const toolGroup = _store__WEBPACK_IMPORTED_MODULE_0__.ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);
    if (!toolGroup) {
        return [];
    }
    const enabledTools = [];
    const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
    for (let j = 0; j < toolGroupToolNames.length; j++) {
        const toolName = toolGroupToolNames[j];
        const tool = toolGroup.toolOptions[toolName];
        const correctBinding = numTouchPoints != null &&
            tool.bindings.length &&
            tool.bindings.some((binding) => binding.numTouchPoints === numTouchPoints);
        if (modesFilter.includes(tool.mode) &&
            (!numTouchPoints || correctBinding)) {
            const toolInstance = toolGroup.getToolInstance(toolName);
            enabledTools.push(toolInstance);
        }
    }
    return enabledTools;
}
//# sourceMappingURL=getToolsWithModesForTouchEvent.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/index.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/index.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   touchDrag: () => (/* reexport safe */ _touchDrag__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   touchEnd: () => (/* reexport safe */ _touchEnd__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   touchPress: () => (/* reexport safe */ _touchPress__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   touchStart: () => (/* reexport safe */ _touchStart__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   touchStartActivate: () => (/* reexport safe */ _touchStartActivate__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   touchTap: () => (/* reexport safe */ _touchTap__WEBPACK_IMPORTED_MODULE_4__["default"])
/* harmony export */ });
/* harmony import */ var _touchStart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./touchStart */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchStart.js");
/* harmony import */ var _touchStartActivate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./touchStartActivate */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchStartActivate.js");
/* harmony import */ var _touchDrag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./touchDrag */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchDrag.js");
/* harmony import */ var _touchEnd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./touchEnd */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchEnd.js");
/* harmony import */ var _touchTap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./touchTap */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchTap.js");
/* harmony import */ var _touchPress__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./touchPress */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchPress.js");







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchDrag.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchDrag.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ touchDrag)
/* harmony export */ });
/* harmony import */ var _shared_getActiveToolForTouchEvent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/getActiveToolForTouchEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForTouchEvent.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");


function touchDrag(evt) {
    if (_store__WEBPACK_IMPORTED_MODULE_1__.state.isInteractingWithTool) {
        return;
    }
    const activeTool = (0,_shared_getActiveToolForTouchEvent__WEBPACK_IMPORTED_MODULE_0__["default"])(evt);
    const noFoundToolOrDoesNotHaveTouchDragCallback = !activeTool || typeof activeTool.touchDragCallback !== 'function';
    if (noFoundToolOrDoesNotHaveTouchDragCallback) {
        return;
    }
    activeTool.touchDragCallback(evt);
}
//# sourceMappingURL=touchDrag.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchEnd.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchEnd.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/customCallbackHandler */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/customCallbackHandler.js");

const touchEnd = _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__["default"].bind(null, 'Touch', 'touchEndCallback');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (touchEnd);
//# sourceMappingURL=touchEnd.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchPress.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchPress.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/customCallbackHandler */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/customCallbackHandler.js");

const touchPress = _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__["default"].bind(null, 'Touch', 'touchPressCallback');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (touchPress);
//# sourceMappingURL=touchPress.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchStart.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchStart.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ touchStart)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationSelection */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");
/* harmony import */ var _store_filterToolsWithMoveableHandles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../store/filterToolsWithMoveableHandles */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithMoveableHandles.js");
/* harmony import */ var _store_filterToolsWithAnnotationsForElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../store/filterToolsWithAnnotationsForElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithAnnotationsForElement.js");
/* harmony import */ var _store_filterMoveableAnnotationTools__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../store/filterMoveableAnnotationTools */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterMoveableAnnotationTools.js");
/* harmony import */ var _shared_getActiveToolForTouchEvent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../shared/getActiveToolForTouchEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForTouchEvent.js");
/* harmony import */ var _shared_getToolsWithModesForTouchEvent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared/getToolsWithModesForTouchEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getToolsWithModesForTouchEvent.js");










const { Active, Passive } = _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes;
function touchStart(evt) {
    if (_store__WEBPACK_IMPORTED_MODULE_0__.state.isInteractingWithTool) {
        return;
    }
    const activeTool = (0,_shared_getActiveToolForTouchEvent__WEBPACK_IMPORTED_MODULE_8__["default"])(evt);
    if (activeTool && typeof activeTool.preTouchStartCallback === 'function') {
        const consumedEvent = activeTool.preTouchStartCallback(evt);
        if (consumedEvent) {
            return;
        }
    }
    const isPrimaryClick = Object.keys(evt.detail.event.touches).length === 1;
    const activeToolsWithEventBinding = (0,_shared_getToolsWithModesForTouchEvent__WEBPACK_IMPORTED_MODULE_9__["default"])(evt, [Active], Object.keys(evt.detail.event.touches).length);
    const passiveToolsIfEventWasPrimaryTouchButton = isPrimaryClick
        ? (0,_shared_getToolsWithModesForTouchEvent__WEBPACK_IMPORTED_MODULE_9__["default"])(evt, [Passive])
        : undefined;
    const applicableTools = [
        ...(activeToolsWithEventBinding || []),
        ...(passiveToolsIfEventWasPrimaryTouchButton || []),
        activeTool,
    ];
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const annotationToolsWithAnnotations = (0,_store_filterToolsWithAnnotationsForElement__WEBPACK_IMPORTED_MODULE_6__["default"])(element, applicableTools);
    const canvasCoords = eventDetail.currentPoints.canvas;
    const annotationToolsWithMoveableHandles = (0,_store_filterToolsWithMoveableHandles__WEBPACK_IMPORTED_MODULE_5__["default"])(element, annotationToolsWithAnnotations, canvasCoords, 'touch');
    const isMultiSelect = false;
    if (annotationToolsWithMoveableHandles.length > 0) {
        const { tool, annotation, handle } = getAnnotationForSelection(annotationToolsWithMoveableHandles);
        toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);
        tool.handleSelectedCallback(evt, annotation, handle, 'Touch');
        return;
    }
    const moveableAnnotationTools = (0,_store_filterMoveableAnnotationTools__WEBPACK_IMPORTED_MODULE_7__["default"])(element, annotationToolsWithAnnotations, canvasCoords, 'touch');
    if (moveableAnnotationTools.length > 0) {
        const { tool, annotation } = getAnnotationForSelection(moveableAnnotationTools);
        toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);
        tool.toolSelectedCallback(evt, annotation, 'Touch');
        return;
    }
    if (activeTool && typeof activeTool.postTouchStartCallback === 'function') {
        const consumedEvent = activeTool.postTouchStartCallback(evt);
        if (consumedEvent) {
            return;
        }
    }
}
function getAnnotationForSelection(toolsWithMovableHandles) {
    return ((toolsWithMovableHandles.length > 1 &&
        toolsWithMovableHandles.find((item) => !(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_3__.isAnnotationLocked)(item.annotation) &&
            (0,_stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_4__.isAnnotationVisible)(item.annotation.annotationUID))) ||
        toolsWithMovableHandles[0]);
}
function toggleAnnotationSelection(annotationUID, isMultiSelect = false) {
    if (isMultiSelect) {
        if ((0,_stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__.isAnnotationSelected)(annotationUID)) {
            (0,_stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__.setAnnotationSelected)(annotationUID, false);
        }
        else {
            const preserveSelected = true;
            (0,_stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__.setAnnotationSelected)(annotationUID, true, preserveSelected);
        }
    }
    else {
        const preserveSelected = false;
        (0,_stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__.setAnnotationSelected)(annotationUID, true, preserveSelected);
    }
}
//# sourceMappingURL=touchStart.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchStartActivate.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchStartActivate.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ touchStartActivate)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationSelection */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js");
/* harmony import */ var _shared_getActiveToolForTouchEvent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/getActiveToolForTouchEvent */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/getActiveToolForTouchEvent.js");



function touchStartActivate(evt) {
    if (_store__WEBPACK_IMPORTED_MODULE_0__.state.isInteractingWithTool) {
        return;
    }
    const activeTool = (0,_shared_getActiveToolForTouchEvent__WEBPACK_IMPORTED_MODULE_2__["default"])(evt);
    if (!activeTool) {
        return;
    }
    if (_store__WEBPACK_IMPORTED_MODULE_0__.state.isMultiPartToolActive) {
        return;
    }
    if (activeTool.addNewAnnotation) {
        const annotation = activeTool.addNewAnnotation(evt, 'touch');
        (0,_stateManagement_annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_1__.setAnnotationSelected)(annotation.annotationUID);
    }
}
//# sourceMappingURL=touchStartActivate.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchTap.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/touchTap.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/customCallbackHandler */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/shared/customCallbackHandler.js");

const touchTap = _shared_customCallbackHandler__WEBPACK_IMPORTED_MODULE_0__["default"].bind(null, 'Touch', 'touchTapCallback');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (touchTap);
//# sourceMappingURL=touchTap.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchToolEventDispatcher.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchToolEventDispatcher.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_Events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums/Events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js");
/* harmony import */ var _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./touchEventHandlers */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/touchEventHandlers/index.js");


const enable = function (element) {
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].TOUCH_START, _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__.touchStart);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].TOUCH_START_ACTIVATE, _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__.touchStartActivate);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].TOUCH_DRAG, _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__.touchDrag);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].TOUCH_END, _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__.touchEnd);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].TOUCH_TAP, _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__.touchTap);
    element.addEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].TOUCH_PRESS, _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__.touchPress);
};
const disable = function (element) {
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].TOUCH_START, _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__.touchStart);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].TOUCH_START_ACTIVATE, _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__.touchStartActivate);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].TOUCH_DRAG, _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__.touchDrag);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].TOUCH_END, _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__.touchEnd);
    element.removeEventListener(_enums_Events__WEBPACK_IMPORTED_MODULE_0__["default"].TOUCH_PRESS, _touchEventHandlers__WEBPACK_IMPORTED_MODULE_1__.touchPress);
};
const touchToolEventDispatcher = {
    enable,
    disable,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (touchToolEventDispatcher);
//# sourceMappingURL=touchToolEventDispatcher.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationModifiedListener.js":
/*!********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationModifiedListener.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");


function annotationModifiedListener(evt) {
    const { viewportId, renderingEngineId } = evt.detail;
    const renderingEngine = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getRenderingEngine)(renderingEngineId);
    (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_1__["default"])(renderingEngine, [viewportId]);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (annotationModifiedListener);
//# sourceMappingURL=annotationModifiedListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationSelectionListener.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationSelectionListener.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");


function annotationSelectionListener(evt) {
    const deselectedAnnotation = evt.detail.removed;
    if (!deselectedAnnotation.length) {
        return;
    }
    const renderingEngines = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getRenderingEngines)();
    renderingEngines.forEach((renderingEngine) => {
        const viewports = renderingEngine.getViewports();
        const viewportIds = viewports.map((vp) => vp.id);
        (0,_utilities__WEBPACK_IMPORTED_MODULE_1__.triggerAnnotationRenderForViewportIds)(renderingEngine, viewportIds);
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (annotationSelectionListener);
//# sourceMappingURL=annotationSelectionListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/index.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   annotationModifiedListener: () => (/* reexport safe */ _annotationModifiedListener__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   annotationSelectionListener: () => (/* reexport safe */ _annotationSelectionListener__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _annotationSelectionListener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./annotationSelectionListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationSelectionListener.js");
/* harmony import */ var _annotationModifiedListener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./annotationModifiedListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/annotationModifiedListener.js");



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/index.js":
/*!***********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   annotationModifiedListener: () => (/* reexport safe */ _annotations__WEBPACK_IMPORTED_MODULE_5__.annotationModifiedListener),
/* harmony export */   annotationSelectionListener: () => (/* reexport safe */ _annotations__WEBPACK_IMPORTED_MODULE_5__.annotationSelectionListener),
/* harmony export */   keyEventListener: () => (/* reexport safe */ _keyboard__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   mouseEventListeners: () => (/* reexport safe */ _mouse__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   segmentationDataModifiedEventListener: () => (/* reexport safe */ _segmentation__WEBPACK_IMPORTED_MODULE_4__.segmentationDataModifiedEventListener),
/* harmony export */   segmentationModifiedListener: () => (/* reexport safe */ _segmentation__WEBPACK_IMPORTED_MODULE_4__.segmentationModifiedListener),
/* harmony export */   segmentationRepresentationModifiedEventListener: () => (/* reexport safe */ _segmentation__WEBPACK_IMPORTED_MODULE_4__.segmentationRepresentationModifiedEventListener),
/* harmony export */   segmentationRepresentationRemovedEventListener: () => (/* reexport safe */ _segmentation__WEBPACK_IMPORTED_MODULE_4__.segmentationRepresentationRemovedEventListener),
/* harmony export */   touchEventListeners: () => (/* reexport safe */ _touch__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   wheelEventListener: () => (/* reexport safe */ _wheel__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _mouse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mouse */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/index.js");
/* harmony import */ var _touch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./touch */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/index.js");
/* harmony import */ var _wheel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wheel */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/index.js");
/* harmony import */ var _keyboard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./keyboard */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/keyboard/index.js");
/* harmony import */ var _segmentation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./segmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/index.js");
/* harmony import */ var _annotations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./annotations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/annotations/index.js");







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/keyboard/index.js":
/*!********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/keyboard/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _keyDownListener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keyDownListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/keyboard/keyDownListener.js");

function enable(element) {
    disable(element);
    element.addEventListener('keydown', _keyDownListener__WEBPACK_IMPORTED_MODULE_0__["default"]);
}
function disable(element) {
    element.removeEventListener('keydown', _keyDownListener__WEBPACK_IMPORTED_MODULE_0__["default"]);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    enable,
    disable,
    getModifierKey: _keyDownListener__WEBPACK_IMPORTED_MODULE_0__.getModifierKey,
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/keyboard/keyDownListener.js":
/*!******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/keyboard/keyDownListener.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getModifierKey: () => (/* binding */ getModifierKey),
/* harmony export */   resetModifierKey: () => (/* binding */ resetModifierKey)
/* harmony export */ });
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.clonedeep */ "../../../node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums_Events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../enums/Events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js");



const defaultState = {
    renderingEngineId: undefined,
    viewportId: undefined,
    key: undefined,
    keyCode: undefined,
    element: null,
};
let state = {
    renderingEngineId: undefined,
    viewportId: undefined,
    key: undefined,
    keyCode: undefined,
    element: null,
};
function keyListener(evt) {
    state.element = evt.currentTarget;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(state.element);
    const { renderingEngineId, viewportId } = enabledElement;
    state.renderingEngineId = renderingEngineId;
    state.viewportId = viewportId;
    state.key = evt.key;
    state.keyCode = evt.keyCode;
    evt.preventDefault();
    const eventDetail = {
        renderingEngineId: state.renderingEngineId,
        viewportId: state.viewportId,
        element: state.element,
        key: state.key,
        keyCode: state.keyCode,
    };
    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(eventDetail.element, _enums_Events__WEBPACK_IMPORTED_MODULE_2__["default"].KEY_DOWN, eventDetail);
    document.addEventListener('keyup', _onKeyUp);
    state.element.removeEventListener('keydown', keyListener);
}
function _onKeyUp(evt) {
    const eventDetail = {
        renderingEngineId: state.renderingEngineId,
        viewportId: state.viewportId,
        element: state.element,
        key: state.key,
        keyCode: state.keyCode,
    };
    document.removeEventListener('keyup', _onKeyUp);
    state.element.addEventListener('keydown', keyListener);
    state = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default()(defaultState);
    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(eventDetail.element, _enums_Events__WEBPACK_IMPORTED_MODULE_2__["default"].KEY_UP, eventDetail);
}
function getModifierKey() {
    return state.keyCode;
}
function resetModifierKey() {
    state.keyCode = undefined;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (keyListener);
//# sourceMappingURL=keyDownListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/getMouseEventPoints.js":
/*!*******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/getMouseEventPoints.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getMouseEventPoints)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function getMouseEventPoints(evt, element) {
    const elementToUse = element || evt.currentTarget;
    const { viewport } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(elementToUse);
    const clientPoint = _clientToPoint(evt);
    const pagePoint = _pageToPoint(evt);
    const canvasPoint = _pagePointsToCanvasPoints(elementToUse, pagePoint);
    const worldPoint = viewport.canvasToWorld(canvasPoint);
    return {
        page: pagePoint,
        client: clientPoint,
        canvas: canvasPoint,
        world: worldPoint,
    };
}
function _pagePointsToCanvasPoints(element, pagePoint) {
    const rect = element.getBoundingClientRect();
    return [
        pagePoint[0] - rect.left - window.pageXOffset,
        pagePoint[1] - rect.top - window.pageYOffset,
    ];
}
function _pageToPoint(evt) {
    return [evt.pageX, evt.pageY];
}
function _clientToPoint(evt) {
    return [evt.clientX, evt.clientY];
}
//# sourceMappingURL=getMouseEventPoints.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/index.js":
/*!*****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _mouseDoubleClickListener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mouseDoubleClickListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseDoubleClickListener.js");
/* harmony import */ var _mouseDownListener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mouseDownListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseDownListener.js");
/* harmony import */ var _mouseMoveListener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mouseMoveListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseMoveListener.js");



function disable(element) {
    element.removeEventListener('dblclick', _mouseDoubleClickListener__WEBPACK_IMPORTED_MODULE_0__["default"]);
    element.removeEventListener('mousedown', _mouseDownListener__WEBPACK_IMPORTED_MODULE_1__["default"]);
    element.removeEventListener('mousemove', _mouseMoveListener__WEBPACK_IMPORTED_MODULE_2__["default"]);
    element.removeEventListener('dblclick', _mouseDownListener__WEBPACK_IMPORTED_MODULE_1__.mouseDoubleClickIgnoreListener, {
        capture: true,
    });
}
function enable(element) {
    disable(element);
    element.addEventListener('dblclick', _mouseDoubleClickListener__WEBPACK_IMPORTED_MODULE_0__["default"]);
    element.addEventListener('mousedown', _mouseDownListener__WEBPACK_IMPORTED_MODULE_1__["default"]);
    element.addEventListener('mousemove', _mouseMoveListener__WEBPACK_IMPORTED_MODULE_2__["default"]);
    element.addEventListener('dblclick', _mouseDownListener__WEBPACK_IMPORTED_MODULE_1__.mouseDoubleClickIgnoreListener, {
        capture: true,
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    enable,
    disable,
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseDoubleClickListener.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseDoubleClickListener.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums_Events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums/Events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js");
/* harmony import */ var _getMouseEventPoints__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getMouseEventPoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/getMouseEventPoints.js");



function mouseDoubleClickListener(evt) {
    const element = evt.currentTarget;
    const { viewportId, renderingEngineId } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const startPoints = (0,_getMouseEventPoints__WEBPACK_IMPORTED_MODULE_2__["default"])(evt, element);
    const deltaPoints = {
        page: [0, 0],
        client: [0, 0],
        canvas: [0, 0],
        world: [0, 0, 0],
    };
    const eventDetail = {
        event: evt,
        eventName: _enums_Events__WEBPACK_IMPORTED_MODULE_1__["default"].MOUSE_DOUBLE_CLICK,
        viewportId,
        renderingEngineId,
        camera: {},
        element,
        startPoints,
        lastPoints: startPoints,
        currentPoints: startPoints,
        deltaPoints,
    };
    const consumed = !(0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(element, _enums_Events__WEBPACK_IMPORTED_MODULE_1__["default"].MOUSE_DOUBLE_CLICK, eventDetail);
    if (consumed) {
        evt.stopImmediatePropagation();
        evt.preventDefault();
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mouseDoubleClickListener);
//# sourceMappingURL=mouseDoubleClickListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseDownListener.js":
/*!*****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseDownListener.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getMouseButton: () => (/* binding */ getMouseButton),
/* harmony export */   mouseDoubleClickIgnoreListener: () => (/* binding */ mouseDoubleClickIgnoreListener)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums_Events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums/Events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js");
/* harmony import */ var _mouseMoveListener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mouseMoveListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseMoveListener.js");
/* harmony import */ var _getMouseEventPoints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getMouseEventPoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/getMouseEventPoints.js");




const { MOUSE_DOWN, MOUSE_DOWN_ACTIVATE, MOUSE_CLICK, MOUSE_UP, MOUSE_DRAG } = _enums_Events__WEBPACK_IMPORTED_MODULE_1__["default"];
const DOUBLE_CLICK_TOLERANCE_MS = 400;
const MULTI_BUTTON_TOLERANCE_MS = 150;
const DOUBLE_CLICK_DRAG_TOLERANCE = 3;
const defaultState = {
    mouseButton: undefined,
    element: null,
    renderingEngineId: undefined,
    viewportId: undefined,
    isClickEvent: true,
    clickDelay: 200,
    preventClickTimeout: null,
    startPoints: {
        page: [0, 0],
        client: [0, 0],
        canvas: [0, 0],
        world: [0, 0, 0],
    },
    lastPoints: {
        page: [0, 0],
        client: [0, 0],
        canvas: [0, 0],
        world: [0, 0, 0],
    },
};
let state = {
    mouseButton: undefined,
    renderingEngineId: undefined,
    viewportId: undefined,
    isClickEvent: true,
    clickDelay: 200,
    element: null,
    preventClickTimeout: null,
    startPoints: {
        page: [0, 0],
        client: [0, 0],
        canvas: [0, 0],
        world: [0, 0, 0],
    },
    lastPoints: {
        page: [0, 0],
        client: [0, 0],
        canvas: [0, 0],
        world: [0, 0, 0],
    },
};
const doubleClickState = {
    doubleClickTimeout: null,
    mouseDownEvent: null,
    mouseUpEvent: null,
    ignoreDoubleClick: false,
};
function mouseDownListener(evt) {
    if (doubleClickState.doubleClickTimeout) {
        if (evt.buttons === doubleClickState.mouseDownEvent.buttons)
            return;
        doubleClickState.mouseDownEvent = evt;
        _doStateMouseDownAndUp();
        return;
    }
    doubleClickState.doubleClickTimeout = setTimeout(_doStateMouseDownAndUp, evt.buttons === 1 ? DOUBLE_CLICK_TOLERANCE_MS : MULTI_BUTTON_TOLERANCE_MS);
    doubleClickState.mouseDownEvent = evt;
    doubleClickState.ignoreDoubleClick = false;
    state.element = evt.currentTarget;
    state.mouseButton = evt.buttons;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(state.element);
    const { renderingEngineId, viewportId } = enabledElement;
    state.renderingEngineId = renderingEngineId;
    state.viewportId = viewportId;
    state.preventClickTimeout = setTimeout(_preventClickHandler, state.clickDelay);
    state.element.removeEventListener('mousemove', _mouseMoveListener__WEBPACK_IMPORTED_MODULE_2__["default"]);
    const startPoints = (0,_getMouseEventPoints__WEBPACK_IMPORTED_MODULE_3__["default"])(evt, state.element);
    state.startPoints = _copyPoints(startPoints);
    state.lastPoints = _copyPoints(startPoints);
    document.addEventListener('mouseup', _onMouseUp);
    document.addEventListener('mousemove', _onMouseDrag);
}
function _doMouseDown(evt) {
    const deltaPoints = _getDeltaPoints(state.startPoints, state.startPoints);
    const eventDetail = {
        event: evt,
        eventName: MOUSE_DOWN,
        element: state.element,
        mouseButton: state.mouseButton,
        renderingEngineId: state.renderingEngineId,
        viewportId: state.viewportId,
        camera: {},
        startPoints: state.startPoints,
        lastPoints: state.startPoints,
        currentPoints: state.startPoints,
        deltaPoints,
    };
    state.lastPoints = _copyPoints(eventDetail.lastPoints);
    const notConsumed = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(eventDetail.element, MOUSE_DOWN, eventDetail);
    if (notConsumed) {
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(eventDetail.element, MOUSE_DOWN_ACTIVATE, eventDetail);
    }
}
function _onMouseDrag(evt) {
    const currentPoints = (0,_getMouseEventPoints__WEBPACK_IMPORTED_MODULE_3__["default"])(evt, state.element);
    const lastPoints = _updateMouseEventsLastPoints(state.element, state.lastPoints);
    const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);
    if (doubleClickState.doubleClickTimeout) {
        if (_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {
            _doStateMouseDownAndUp();
        }
        else {
            return;
        }
    }
    const eventDetail = {
        event: evt,
        eventName: MOUSE_DRAG,
        mouseButton: state.mouseButton,
        renderingEngineId: state.renderingEngineId,
        viewportId: state.viewportId,
        camera: {},
        element: state.element,
        startPoints: _copyPoints(state.startPoints),
        lastPoints: _copyPoints(lastPoints),
        currentPoints,
        deltaPoints,
    };
    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(state.element, MOUSE_DRAG, eventDetail);
    state.lastPoints = _copyPoints(currentPoints);
}
function _onMouseUp(evt) {
    clearTimeout(state.preventClickTimeout);
    if (doubleClickState.doubleClickTimeout) {
        if (!doubleClickState.mouseUpEvent) {
            doubleClickState.mouseUpEvent = evt;
            state.element.addEventListener('mousemove', _onMouseMove);
        }
        else {
            _cleanUp();
        }
    }
    else {
        const eventName = state.isClickEvent ? MOUSE_CLICK : MOUSE_UP;
        const currentPoints = (0,_getMouseEventPoints__WEBPACK_IMPORTED_MODULE_3__["default"])(evt, state.element);
        const deltaPoints = _getDeltaPoints(currentPoints, state.lastPoints);
        const eventDetail = {
            event: evt,
            eventName,
            mouseButton: state.mouseButton,
            element: state.element,
            renderingEngineId: state.renderingEngineId,
            viewportId: state.viewportId,
            camera: {},
            startPoints: _copyPoints(state.startPoints),
            lastPoints: _copyPoints(state.lastPoints),
            currentPoints,
            deltaPoints,
        };
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(eventDetail.element, eventName, eventDetail);
        _cleanUp();
    }
    document.removeEventListener('mousemove', _onMouseDrag);
}
function _onMouseMove(evt) {
    const currentPoints = (0,_getMouseEventPoints__WEBPACK_IMPORTED_MODULE_3__["default"])(evt, state.element);
    const lastPoints = _updateMouseEventsLastPoints(state.element, state.lastPoints);
    const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);
    if (!_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {
        return;
    }
    _doStateMouseDownAndUp();
    (0,_mouseMoveListener__WEBPACK_IMPORTED_MODULE_2__["default"])(evt);
}
function _isDragPastDoubleClickTolerance(delta) {
    return Math.abs(delta[0]) + Math.abs(delta[1]) > DOUBLE_CLICK_DRAG_TOLERANCE;
}
function _preventClickHandler() {
    state.isClickEvent = false;
}
function _doStateMouseDownAndUp() {
    doubleClickState.ignoreDoubleClick = true;
    const mouseDownEvent = doubleClickState.mouseDownEvent;
    const mouseUpEvent = doubleClickState.mouseUpEvent;
    _clearDoubleClickTimeoutAndEvents();
    _doMouseDown(mouseDownEvent);
    if (mouseUpEvent) {
        _onMouseUp(mouseUpEvent);
    }
}
function _clearDoubleClickTimeoutAndEvents() {
    if (doubleClickState.doubleClickTimeout) {
        clearTimeout(doubleClickState.doubleClickTimeout);
        doubleClickState.doubleClickTimeout = null;
    }
    doubleClickState.mouseDownEvent = null;
    doubleClickState.mouseUpEvent = null;
}
function _cleanUp() {
    document.removeEventListener('mouseup', _onMouseUp);
    state.element?.removeEventListener('mousemove', _onMouseMove);
    state.element?.addEventListener('mousemove', _mouseMoveListener__WEBPACK_IMPORTED_MODULE_2__["default"]);
    _clearDoubleClickTimeoutAndEvents();
    state = JSON.parse(JSON.stringify(defaultState));
}
function _copyPoints(points) {
    return JSON.parse(JSON.stringify(points));
}
function _updateMouseEventsLastPoints(element, lastPoints) {
    const { viewport } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const world = viewport.canvasToWorld(lastPoints.canvas);
    return {
        page: lastPoints.page,
        client: lastPoints.client,
        canvas: lastPoints.canvas,
        world,
    };
}
function _getDeltaPoints(currentPoints, lastPoints) {
    return {
        page: _subtractPoints2D(currentPoints.page, lastPoints.page),
        client: _subtractPoints2D(currentPoints.client, lastPoints.client),
        canvas: _subtractPoints2D(currentPoints.canvas, lastPoints.canvas),
        world: _subtractPoints3D(currentPoints.world, lastPoints.world),
    };
}
function _subtractPoints2D(point0, point1) {
    return [point0[0] - point1[0], point0[1] - point1[1]];
}
function _subtractPoints3D(point0, point1) {
    return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];
}
function getMouseButton() {
    return state.mouseButton;
}
function mouseDoubleClickIgnoreListener(evt) {
    if (doubleClickState.ignoreDoubleClick) {
        doubleClickState.ignoreDoubleClick = false;
        evt.stopImmediatePropagation();
        evt.preventDefault();
    }
    else {
        _cleanUp();
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mouseDownListener);
//# sourceMappingURL=mouseDownListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseMoveListener.js":
/*!*****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/mouseMoveListener.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums_Events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums/Events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js");
/* harmony import */ var _getMouseEventPoints__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getMouseEventPoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/getMouseEventPoints.js");



const eventName = _enums_Events__WEBPACK_IMPORTED_MODULE_1__["default"].MOUSE_MOVE;
function mouseMoveListener(evt) {
    const element = evt.currentTarget;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { renderingEngineId, viewportId } = enabledElement;
    const currentPoints = (0,_getMouseEventPoints__WEBPACK_IMPORTED_MODULE_2__["default"])(evt);
    const eventDetail = {
        renderingEngineId,
        viewportId,
        camera: {},
        element,
        currentPoints,
        eventName,
        event: evt,
    };
    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(element, eventName, eventDetail);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mouseMoveListener);
//# sourceMappingURL=mouseMoveListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/index.js":
/*!************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   segmentationDataModifiedEventListener: () => (/* reexport safe */ _segmentationDataModifiedEventListener__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   segmentationModifiedListener: () => (/* reexport safe */ _segmentationModifiedEventListener__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   segmentationRepresentationModifiedEventListener: () => (/* reexport safe */ _segmentationRepresentationModifiedEventListener__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   segmentationRepresentationRemovedEventListener: () => (/* reexport safe */ _segmentationRepresentationRemovedEventListener__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _segmentationRepresentationModifiedEventListener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./segmentationRepresentationModifiedEventListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationRepresentationModifiedEventListener.js");
/* harmony import */ var _segmentationDataModifiedEventListener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./segmentationDataModifiedEventListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationDataModifiedEventListener.js");
/* harmony import */ var _segmentationRepresentationRemovedEventListener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./segmentationRepresentationRemovedEventListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationRepresentationRemovedEventListener.js");
/* harmony import */ var _segmentationModifiedEventListener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./segmentationModifiedEventListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationModifiedEventListener.js");





//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationDataModifiedEventListener.js":
/*!********************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationDataModifiedEventListener.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities_segmentation_triggerSegmentationRender__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utilities/segmentation/triggerSegmentationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/triggerSegmentationRender.js");
/* harmony import */ var _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../enums/SegmentationRepresentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");




const onSegmentationDataModified = function (evt) {
    const { segmentationId, modifiedSlicesToUse } = evt.detail;
    const { representationData, type } = _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_3__.getSegmentation(segmentationId);
    let toolGroupIds;
    if (type === _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_2__["default"].Labelmap) {
        const segmentationVolume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(representationData[type].volumeId);
        if (!segmentationVolume) {
            console.warn('segmentation not found in cache');
            return;
        }
        const { imageData, vtkOpenGLTexture } = segmentationVolume;
        let slicesToUpdate;
        if (modifiedSlicesToUse && Array.isArray(modifiedSlicesToUse)) {
            slicesToUpdate = modifiedSlicesToUse;
        }
        else {
            const numSlices = imageData.getDimensions()[2];
            slicesToUpdate = [...Array(numSlices).keys()];
        }
        slicesToUpdate.forEach((i) => {
            vtkOpenGLTexture.setUpdatedFrame(i);
        });
        imageData.modified();
        toolGroupIds =
            _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_3__.getToolGroupIdsWithSegmentation(segmentationId);
    }
    else {
        throw new Error(`onSegmentationDataModified: representationType ${type} not supported yet`);
    }
    toolGroupIds.forEach((toolGroupId) => {
        (0,_utilities_segmentation_triggerSegmentationRender__WEBPACK_IMPORTED_MODULE_1__["default"])(toolGroupId);
    });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (onSegmentationDataModified);
//# sourceMappingURL=segmentationDataModifiedEventListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationModifiedEventListener.js":
/*!****************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationModifiedEventListener.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");
/* harmony import */ var _stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../stateManagement/segmentation/triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");


const segmentationModifiedListener = function (evt) {
    const { segmentationId } = evt.detail;
    const toolGroupIds = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getToolGroupIdsWithSegmentation)(segmentationId);
    toolGroupIds.forEach((toolGroupId) => {
        const segRepresentations = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getSegmentationRepresentations)(toolGroupId);
        segRepresentations.forEach((representation) => {
            if (representation.segmentationId === segmentationId) {
                (0,_stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationRepresentationModified)(toolGroupId, representation.segmentationRepresentationUID);
            }
        });
    });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (segmentationModifiedListener);
//# sourceMappingURL=segmentationModifiedEventListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationRepresentationModifiedEventListener.js":
/*!******************************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationRepresentationModifiedEventListener.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utilities_segmentation_triggerSegmentationRender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/segmentation/triggerSegmentationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/triggerSegmentationRender.js");

const segmentationRepresentationModifiedListener = function (evt) {
    const { toolGroupId } = evt.detail;
    (0,_utilities_segmentation_triggerSegmentationRender__WEBPACK_IMPORTED_MODULE_0__["default"])(toolGroupId);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (segmentationRepresentationModifiedListener);
//# sourceMappingURL=segmentationRepresentationModifiedEventListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationRepresentationRemovedEventListener.js":
/*!*****************************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/segmentationRepresentationRemovedEventListener.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utilities_segmentation_triggerSegmentationRender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities/segmentation/triggerSegmentationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/triggerSegmentationRender.js");

const segmentationRepresentationRemovedEventListener = function (evt) {
    const { toolGroupId, segmentationRepresentationUID } = evt.detail;
    (0,_utilities_segmentation_triggerSegmentationRender__WEBPACK_IMPORTED_MODULE_0__["default"])(toolGroupId);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (segmentationRepresentationRemovedEventListener);
//# sourceMappingURL=segmentationRepresentationRemovedEventListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/getTouchEventPoints.js":
/*!*******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/getTouchEventPoints.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getTouchEventPoints)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function getTouchEventPoints(evt, element) {
    const elementToUse = element || evt.currentTarget;
    const touches = evt.type === 'touchend' ? evt.changedTouches : evt.touches;
    return Object.keys(touches).map((i) => {
        const clientPoint = _clientToPoint(touches[i]);
        const pagePoint = _pageToPoint(touches[i]);
        const canvasPoint = _pagePointsToCanvasPoints(elementToUse, pagePoint);
        const { viewport } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(elementToUse);
        const worldPoint = viewport.canvasToWorld(canvasPoint);
        return {
            page: pagePoint,
            client: clientPoint,
            canvas: canvasPoint,
            world: worldPoint,
            touch: {
                identifier: i,
                radiusX: touches[i].radiusX,
                radiusY: touches[i].radiusY,
                force: touches[i].force,
                rotationAngle: touches[i].rotationAngle,
            },
        };
    });
}
function _pagePointsToCanvasPoints(element, pagePoint) {
    const rect = element.getBoundingClientRect();
    return [
        pagePoint[0] - rect.left - window.pageXOffset,
        pagePoint[1] - rect.top - window.pageYOffset,
    ];
}
function _pageToPoint(touch) {
    return [touch.pageX, touch.pageY];
}
function _clientToPoint(touch) {
    return [touch.clientX, touch.clientY];
}
//# sourceMappingURL=getTouchEventPoints.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/index.js":
/*!*****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _preventGhostClick__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./preventGhostClick */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/preventGhostClick.js");
/* harmony import */ var _touchStartListener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./touchStartListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/touchStartListener.js");


function disable(element) {
    _preventGhostClick__WEBPACK_IMPORTED_MODULE_0__["default"].disable(element);
    element.removeEventListener('touchstart', _touchStartListener__WEBPACK_IMPORTED_MODULE_1__["default"]);
}
function enable(element) {
    disable(element);
    _preventGhostClick__WEBPACK_IMPORTED_MODULE_0__["default"].enable(element);
    element.addEventListener('touchstart', _touchStartListener__WEBPACK_IMPORTED_MODULE_1__["default"], {
        passive: false,
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    enable,
    disable,
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/preventGhostClick.js":
/*!*****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/preventGhostClick.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const antiGhostDelay = 2000, pointerType = {
    mouse: 0,
    touch: 1,
};
let lastInteractionType, lastInteractionTime;
function handleTap(type, e) {
    const now = Date.now();
    if (type !== lastInteractionType) {
        if (now - lastInteractionTime <= antiGhostDelay) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            return false;
        }
        lastInteractionType = type;
    }
    lastInteractionTime = now;
}
const handleTapMouse = handleTap.bind(null, pointerType.mouse);
const handleTapTouch = handleTap.bind(null, pointerType.touch);
function attachEvents(element, eventList, interactionType) {
    const tapHandler = interactionType ? handleTapMouse : handleTapTouch;
    eventList.forEach(function (eventName) {
        element.addEventListener(eventName, tapHandler, { passive: false });
    });
}
function removeEvents(element, eventList, interactionType) {
    const tapHandler = interactionType ? handleTapMouse : handleTapTouch;
    eventList.forEach(function (eventName) {
        element.removeEventListener(eventName, tapHandler);
    });
}
const mouseEvents = ['mousedown', 'mouseup', 'mousemove'];
const touchEvents = ['touchstart', 'touchend'];
function disable(element) {
    removeEvents(element, mouseEvents, pointerType.mouse);
    removeEvents(element, touchEvents, pointerType.touch);
}
function enable(element) {
    disable(element);
    attachEvents(element, mouseEvents, pointerType.mouse);
    attachEvents(element, touchEvents, pointerType.touch);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    enable,
    disable,
});
//# sourceMappingURL=preventGhostClick.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/touchStartListener.js":
/*!******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/touchStartListener.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums_Events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums/Events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js");
/* harmony import */ var _enums_Touch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../enums/Touch */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js");
/* harmony import */ var _getTouchEventPoints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getTouchEventPoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/touch/getTouchEventPoints.js");
/* harmony import */ var _utilities_touch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/touch */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js");






const runtimeSettings = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Settings.getRuntimeSettings();
const { TOUCH_START, TOUCH_START_ACTIVATE, TOUCH_PRESS, TOUCH_DRAG, TOUCH_END, TOUCH_TAP, TOUCH_SWIPE, } = _enums_Events__WEBPACK_IMPORTED_MODULE_1__["default"];
const zeroIPoint = {
    page: [0, 0],
    client: [0, 0],
    canvas: [0, 0],
    world: [0, 0, 0],
};
const zeroIDistance = {
    page: 0,
    client: 0,
    canvas: 0,
    world: 0,
};
const defaultState = {
    renderingEngineId: undefined,
    viewportId: undefined,
    element: null,
    startPointsList: [
        {
            ...zeroIPoint,
            touch: null,
        },
    ],
    lastPointsList: [
        {
            ...zeroIPoint,
            touch: null,
        },
    ],
    isTouchStart: false,
    startTime: null,
    pressTimeout: null,
    pressDelay: 700,
    pressMaxDistance: 5,
    accumulatedDistance: zeroIDistance,
    swipeDistanceThreshold: 48,
    swiped: false,
    swipeToleranceMs: 300,
};
const defaultTapState = {
    renderingEngineId: undefined,
    viewportId: undefined,
    element: null,
    startPointsList: [
        {
            ...zeroIPoint,
            touch: null,
        },
    ],
    taps: 0,
    tapTimeout: null,
    tapMaxDistance: 24,
    tapToleranceMs: 300,
};
let state = JSON.parse(JSON.stringify(defaultState));
let tapState = JSON.parse(JSON.stringify(defaultTapState));
function triggerEventCallback(ele, name, eventDetail) {
    if (runtimeSettings.get('debug')) {
        if (name === 'CORNERSTONE_TOOLS_TOUCH_DRAG') {
            console.debug(name);
        }
        else {
            console.debug(name, eventDetail);
        }
    }
    return (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(ele, name, eventDetail);
}
function touchStartListener(evt) {
    state.element = evt.currentTarget;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(state.element);
    const { renderingEngineId, viewportId } = enabledElement;
    state.renderingEngineId = renderingEngineId;
    state.viewportId = viewportId;
    if (state.isTouchStart)
        return;
    clearTimeout(state.pressTimeout);
    state.pressTimeout = setTimeout(() => _onTouchPress(evt), state.pressDelay);
    _onTouchStart(evt);
    document.addEventListener('touchmove', _onTouchDrag);
    document.addEventListener('touchend', _onTouchEnd);
}
function _onTouchPress(evt) {
    const totalDistance = state.accumulatedDistance.canvas;
    if (totalDistance > state.pressMaxDistance)
        return;
    const eventDetail = {
        event: evt,
        eventName: TOUCH_PRESS,
        renderingEngineId: state.renderingEngineId,
        viewportId: state.viewportId,
        camera: {},
        element: state.element,
        startPointsList: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.copyPointsList)(state.startPointsList),
        lastPointsList: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.copyPointsList)(state.lastPointsList),
        startPoints: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.copyPoints)((0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getMeanTouchPoints)(state.startPointsList)),
        lastPoints: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.copyPoints)((0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getMeanTouchPoints)(state.lastPointsList)),
    };
    triggerEventCallback(eventDetail.element, TOUCH_PRESS, eventDetail);
}
function _onTouchStart(evt) {
    state.isTouchStart = true;
    state.startTime = new Date();
    const startPointsList = (0,_getTouchEventPoints__WEBPACK_IMPORTED_MODULE_3__["default"])(evt, state.element);
    const startPoints = (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getMeanTouchPoints)(startPointsList);
    const deltaPoints = zeroIPoint;
    const deltaDistance = zeroIDistance;
    const eventDetail = {
        event: evt,
        eventName: TOUCH_START,
        element: state.element,
        renderingEngineId: state.renderingEngineId,
        viewportId: state.viewportId,
        camera: {},
        startPointsList: startPointsList,
        lastPointsList: startPointsList,
        currentPointsList: startPointsList,
        startPoints: startPoints,
        lastPoints: startPoints,
        currentPoints: startPoints,
        deltaPoints,
        deltaDistance,
    };
    state.startPointsList = (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.copyPointsList)(eventDetail.startPointsList);
    state.lastPointsList = (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.copyPointsList)(eventDetail.lastPointsList);
    const eventDidPropagate = triggerEventCallback(eventDetail.element, TOUCH_START, eventDetail);
    if (eventDidPropagate) {
        triggerEventCallback(eventDetail.element, TOUCH_START_ACTIVATE, eventDetail);
    }
}
function _onTouchDrag(evt) {
    const currentPointsList = (0,_getTouchEventPoints__WEBPACK_IMPORTED_MODULE_3__["default"])(evt, state.element);
    const lastPointsList = _updateTouchEventsLastPoints(state.element, state.lastPointsList);
    const deltaPoints = currentPointsList.length === lastPointsList.length
        ? (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getDeltaPoints)(currentPointsList, lastPointsList)
        : zeroIPoint;
    const deltaDistance = currentPointsList.length === lastPointsList.length
        ? (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getDeltaDistanceBetweenIPoints)(currentPointsList, lastPointsList)
        : zeroIDistance;
    const totalDistance = currentPointsList.length === lastPointsList.length
        ? (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getDeltaDistance)(currentPointsList, state.lastPointsList)
        : zeroIDistance;
    state.accumulatedDistance = {
        page: state.accumulatedDistance.page + totalDistance.page,
        client: state.accumulatedDistance.client + totalDistance.client,
        canvas: state.accumulatedDistance.canvas + totalDistance.canvas,
        world: state.accumulatedDistance.world + totalDistance.world,
    };
    const eventDetail = {
        event: evt,
        eventName: TOUCH_DRAG,
        renderingEngineId: state.renderingEngineId,
        viewportId: state.viewportId,
        camera: {},
        element: state.element,
        startPoints: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getMeanTouchPoints)(state.startPointsList),
        lastPoints: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getMeanTouchPoints)(lastPointsList),
        currentPoints: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getMeanTouchPoints)(currentPointsList),
        startPointsList: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.copyPointsList)(state.startPointsList),
        lastPointsList: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.copyPointsList)(lastPointsList),
        currentPointsList,
        deltaPoints: deltaPoints,
        deltaDistance: deltaDistance,
    };
    triggerEventCallback(state.element, TOUCH_DRAG, eventDetail);
    _checkTouchSwipe(evt, deltaPoints);
    state.lastPointsList = (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.copyPointsList)(currentPointsList);
}
function _onTouchEnd(evt) {
    clearTimeout(state.pressTimeout);
    const currentPointsList = (0,_getTouchEventPoints__WEBPACK_IMPORTED_MODULE_3__["default"])(evt, state.element);
    const lastPointsList = _updateTouchEventsLastPoints(state.element, state.lastPointsList);
    const deltaPoints = currentPointsList.length === lastPointsList.length
        ? (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getDeltaPoints)(currentPointsList, lastPointsList)
        : (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getDeltaPoints)(currentPointsList, currentPointsList);
    const deltaDistance = currentPointsList.length === lastPointsList.length
        ? (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getDeltaDistanceBetweenIPoints)(currentPointsList, lastPointsList)
        : (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getDeltaDistanceBetweenIPoints)(currentPointsList, currentPointsList);
    const eventDetail = {
        event: evt,
        eventName: TOUCH_END,
        element: state.element,
        renderingEngineId: state.renderingEngineId,
        viewportId: state.viewportId,
        camera: {},
        startPointsList: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.copyPointsList)(state.startPointsList),
        lastPointsList: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.copyPointsList)(lastPointsList),
        currentPointsList,
        startPoints: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getMeanTouchPoints)(state.startPointsList),
        lastPoints: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getMeanTouchPoints)(lastPointsList),
        currentPoints: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getMeanTouchPoints)(currentPointsList),
        deltaPoints,
        deltaDistance,
    };
    triggerEventCallback(eventDetail.element, TOUCH_END, eventDetail);
    _checkTouchTap(evt);
    state = JSON.parse(JSON.stringify(defaultState));
    document.removeEventListener('touchmove', _onTouchDrag);
    document.removeEventListener('touchend', _onTouchEnd);
}
function _checkTouchTap(evt) {
    const currentTime = new Date().getTime();
    const startTime = state.startTime.getTime();
    if (currentTime - startTime > tapState.tapToleranceMs)
        return;
    if (tapState.taps === 0) {
        tapState.element = state.element;
        tapState.renderingEngineId = state.renderingEngineId;
        tapState.viewportId = state.viewportId;
        tapState.startPointsList = state.startPointsList;
    }
    if (tapState.taps > 0 &&
        !(tapState.element == state.element &&
            tapState.renderingEngineId == state.renderingEngineId &&
            tapState.viewportId == state.viewportId)) {
        return;
    }
    const currentPointsList = (0,_getTouchEventPoints__WEBPACK_IMPORTED_MODULE_3__["default"])(evt, tapState.element);
    const distanceFromStart = (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getDeltaDistance)(currentPointsList, tapState.startPointsList).canvas;
    if (distanceFromStart > tapState.tapMaxDistance)
        return;
    clearTimeout(tapState.tapTimeout);
    tapState.taps += 1;
    tapState.tapTimeout = setTimeout(() => {
        const eventDetail = {
            event: evt,
            eventName: TOUCH_TAP,
            element: tapState.element,
            renderingEngineId: tapState.renderingEngineId,
            viewportId: tapState.viewportId,
            camera: {},
            currentPointsList,
            currentPoints: (0,_utilities_touch__WEBPACK_IMPORTED_MODULE_4__.getMeanTouchPoints)(currentPointsList),
            taps: tapState.taps,
        };
        triggerEventCallback(eventDetail.element, TOUCH_TAP, eventDetail);
        tapState = JSON.parse(JSON.stringify(defaultTapState));
    }, tapState.tapToleranceMs);
}
function _checkTouchSwipe(evt, deltaPoints) {
    const currentTime = new Date().getTime();
    const startTime = state.startTime.getTime();
    if (state.swiped || currentTime - startTime > state.swipeToleranceMs)
        return;
    const [x, y] = deltaPoints.canvas;
    const eventDetail = {
        event: evt,
        eventName: TOUCH_SWIPE,
        renderingEngineId: state.renderingEngineId,
        viewportId: state.viewportId,
        camera: {},
        element: state.element,
        swipe: null,
    };
    if (Math.abs(x) > state.swipeDistanceThreshold) {
        eventDetail.swipe = x > 0 ? _enums_Touch__WEBPACK_IMPORTED_MODULE_2__.Swipe.RIGHT : _enums_Touch__WEBPACK_IMPORTED_MODULE_2__.Swipe.LEFT;
        triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);
        state.swiped = true;
    }
    if (Math.abs(y) > state.swipeDistanceThreshold) {
        eventDetail.swipe = y > 0 ? _enums_Touch__WEBPACK_IMPORTED_MODULE_2__.Swipe.DOWN : _enums_Touch__WEBPACK_IMPORTED_MODULE_2__.Swipe.UP;
        triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);
        state.swiped = true;
    }
}
function _updateTouchEventsLastPoints(element, lastPoints) {
    const { viewport } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    return lastPoints.map((lp) => {
        const world = viewport.canvasToWorld(lp.canvas);
        return {
            page: lp.page,
            client: lp.client,
            canvas: lp.canvas,
            world,
            touch: lp.touch,
        };
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (touchStartListener);
//# sourceMappingURL=touchStartListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/index.js":
/*!*****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _wheelListener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wheelListener */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/wheelListener.js");

function enable(element) {
    disable(element);
    element.addEventListener('wheel', _wheelListener__WEBPACK_IMPORTED_MODULE_0__["default"], { passive: false });
}
function disable(element) {
    element.removeEventListener('wheel', _wheelListener__WEBPACK_IMPORTED_MODULE_0__["default"]);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    enable,
    disable,
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/normalizeWheel.js":
/*!**************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/normalizeWheel.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ normalizeWheel)
/* harmony export */ });
const PIXEL_STEP = 10;
const LINE_HEIGHT = 40;
const PAGE_HEIGHT = 800;
function normalizeWheel(event) {
    let spinX = 0, spinY = 0, pixelX = 0, pixelY = 0;
    if ('detail' in event) {
        spinY = event.detail;
    }
    if ('wheelDelta' in event) {
        spinY = -event.wheelDelta / 120;
    }
    if ('wheelDeltaY' in event) {
        spinY = -event.wheelDeltaY / 120;
    }
    if ('wheelDeltaX' in event) {
        spinX = -event.wheelDeltaX / 120;
    }
    pixelX = spinX * PIXEL_STEP;
    pixelY = spinY * PIXEL_STEP;
    if ('deltaY' in event) {
        pixelY = event.deltaY;
    }
    if ('deltaX' in event) {
        pixelX = event.deltaX;
    }
    if ((pixelX || pixelY) && event.deltaMode) {
        if (event.deltaMode === 1) {
            pixelX *= LINE_HEIGHT;
            pixelY *= LINE_HEIGHT;
        }
        else {
            pixelX *= PAGE_HEIGHT;
            pixelY *= PAGE_HEIGHT;
        }
    }
    if (pixelX && !spinX) {
        spinX = pixelX < 1 ? -1 : 1;
    }
    if (pixelY && !spinY) {
        spinY = pixelY < 1 ? -1 : 1;
    }
    return {
        spinX,
        spinY,
        pixelX,
        pixelY,
    };
}
//# sourceMappingURL=normalizeWheel.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/wheelListener.js":
/*!*************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/wheelListener.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _normalizeWheel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./normalizeWheel */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/wheel/normalizeWheel.js");
/* harmony import */ var _enums_Events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../enums/Events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Events.js");
/* harmony import */ var _mouse_getMouseEventPoints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mouse/getMouseEventPoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/mouse/getMouseEventPoints.js");




function wheelListener(evt) {
    const element = evt.currentTarget;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { renderingEngineId, viewportId } = enabledElement;
    if (evt.deltaY > -1 && evt.deltaY < 1) {
        return;
    }
    evt.preventDefault();
    const { spinX, spinY, pixelX, pixelY } = (0,_normalizeWheel__WEBPACK_IMPORTED_MODULE_1__["default"])(evt);
    const direction = spinY < 0 ? -1 : 1;
    const eventDetail = {
        event: evt,
        eventName: _enums_Events__WEBPACK_IMPORTED_MODULE_2__["default"].MOUSE_WHEEL,
        renderingEngineId,
        viewportId,
        element,
        camera: {},
        detail: evt,
        wheel: {
            spinX,
            spinY,
            pixelX,
            pixelY,
            direction,
        },
        points: (0,_mouse_getMouseEventPoints__WEBPACK_IMPORTED_MODULE_3__["default"])(evt),
    };
    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(element, _enums_Events__WEBPACK_IMPORTED_MODULE_2__["default"].MOUSE_WHEEL, eventDetail);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (wheelListener);
//# sourceMappingURL=wheelListener.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/index.js":
/*!********************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AngleTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.AngleTool),
/* harmony export */   AnnotationTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.AnnotationTool),
/* harmony export */   ArrowAnnotateTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.ArrowAnnotateTool),
/* harmony export */   BaseTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.BaseTool),
/* harmony export */   BidirectionalTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.BidirectionalTool),
/* harmony export */   BrushTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.BrushTool),
/* harmony export */   CONSTANTS: () => (/* reexport module object */ _constants__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   CircleROITool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.CircleROITool),
/* harmony export */   CircleScissorsTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.CircleScissorsTool),
/* harmony export */   CobbAngleTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.CobbAngleTool),
/* harmony export */   CrosshairsTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.CrosshairsTool),
/* harmony export */   DragProbeTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.DragProbeTool),
/* harmony export */   EllipticalROITool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.EllipticalROITool),
/* harmony export */   Enums: () => (/* reexport module object */ _enums__WEBPACK_IMPORTED_MODULE_11__),
/* harmony export */   LengthTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.LengthTool),
/* harmony export */   MIPJumpToClickTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.MIPJumpToClickTool),
/* harmony export */   MagnifyTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.MagnifyTool),
/* harmony export */   PaintFillTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.PaintFillTool),
/* harmony export */   PanTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.PanTool),
/* harmony export */   PlanarFreehandROITool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.PlanarFreehandROITool),
/* harmony export */   PlanarRotateTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.PlanarRotateTool),
/* harmony export */   ProbeTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.ProbeTool),
/* harmony export */   RectangleROIStartEndThresholdTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.RectangleROIStartEndThresholdTool),
/* harmony export */   RectangleROIThresholdTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.RectangleROIThresholdTool),
/* harmony export */   RectangleROITool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.RectangleROITool),
/* harmony export */   RectangleScissorsTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.RectangleScissorsTool),
/* harmony export */   ReferenceCursors: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.ReferenceCursors),
/* harmony export */   ReferenceLines: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.ReferenceLines),
/* harmony export */   ReferenceLinesTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.ReferenceLinesTool),
/* harmony export */   ScaleOverlayTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.ScaleOverlayTool),
/* harmony export */   SegmentationDisplayTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.SegmentationDisplayTool),
/* harmony export */   SphereScissorsTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.SphereScissorsTool),
/* harmony export */   StackScrollMouseWheelTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.StackScrollMouseWheelTool),
/* harmony export */   StackScrollTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.StackScrollTool),
/* harmony export */   Synchronizer: () => (/* reexport safe */ _store__WEBPACK_IMPORTED_MODULE_1__.Synchronizer),
/* harmony export */   SynchronizerManager: () => (/* reexport safe */ _store__WEBPACK_IMPORTED_MODULE_1__.SynchronizerManager),
/* harmony export */   ToolGroupManager: () => (/* reexport safe */ _store__WEBPACK_IMPORTED_MODULE_1__.ToolGroupManager),
/* harmony export */   TrackballRotateTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.TrackballRotateTool),
/* harmony export */   Types: () => (/* reexport module object */ _types__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   VolumeRotateMouseWheelTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.VolumeRotateMouseWheelTool),
/* harmony export */   WindowLevelTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.WindowLevelTool),
/* harmony export */   ZoomTool: () => (/* reexport safe */ _tools__WEBPACK_IMPORTED_MODULE_10__.ZoomTool),
/* harmony export */   addTool: () => (/* reexport safe */ _store__WEBPACK_IMPORTED_MODULE_1__.addTool),
/* harmony export */   annotation: () => (/* reexport module object */ _stateManagement_annotation__WEBPACK_IMPORTED_MODULE_8__),
/* harmony export */   cancelActiveManipulations: () => (/* reexport safe */ _store__WEBPACK_IMPORTED_MODULE_1__.cancelActiveManipulations),
/* harmony export */   cursors: () => (/* reexport module object */ _cursors__WEBPACK_IMPORTED_MODULE_6__),
/* harmony export */   destroy: () => (/* reexport safe */ _init__WEBPACK_IMPORTED_MODULE_0__.destroy),
/* harmony export */   drawing: () => (/* reexport module object */ _drawingSvg__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   init: () => (/* reexport safe */ _init__WEBPACK_IMPORTED_MODULE_0__.init),
/* harmony export */   removeTool: () => (/* reexport safe */ _store__WEBPACK_IMPORTED_MODULE_1__.removeTool),
/* harmony export */   segmentation: () => (/* reexport module object */ _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_9__),
/* harmony export */   state: () => (/* reexport safe */ _store__WEBPACK_IMPORTED_MODULE_1__.state),
/* harmony export */   synchronizers: () => (/* reexport module object */ _synchronizers__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   utilities: () => (/* reexport module object */ _utilities__WEBPACK_IMPORTED_MODULE_5__)
/* harmony export */ });
/* harmony import */ var _init__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./init */ "../../../node_modules/@cornerstonejs/tools/dist/esm/init.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "../../../node_modules/@cornerstonejs/tools/dist/esm/constants/index.js");
/* harmony import */ var _synchronizers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./synchronizers */ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/index.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");
/* harmony import */ var _cursors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cursors */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/index.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types */ "../../../node_modules/@cornerstonejs/tools/dist/esm/types/index.js");
/* harmony import */ var _stateManagement_annotation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stateManagement/annotation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/index.js");
/* harmony import */ var _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./stateManagement/segmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js");
/* harmony import */ var _tools__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tools */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");













//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/init.js":
/*!*******************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/init.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   destroy: () => (/* binding */ destroy),
/* harmony export */   init: () => (/* binding */ init)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _store_state__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./store/state */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/state.js");
/* harmony import */ var _eventListeners__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./eventListeners */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/index.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");








let csToolsInitialized = false;
function init(defaultConfiguration = {}) {
    if (csToolsInitialized) {
        return;
    }
    _addCornerstoneEventListeners();
    _addCornerstoneToolsEventListeners();
    csToolsInitialized = true;
}
function destroy() {
    _removeCornerstoneEventListeners();
    _removeCornerstoneToolsEventListeners();
    _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_7__.destroy();
    (0,_store_state__WEBPACK_IMPORTED_MODULE_5__.resetCornerstoneToolsState)();
    const annotationManager = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_1__.getAnnotationManager)();
    const segmentationStateManager = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_2__.getDefaultSegmentationStateManager)();
    annotationManager.restoreAnnotations({});
    segmentationStateManager.resetState();
    csToolsInitialized = false;
}
function _addCornerstoneEventListeners() {
    _removeCornerstoneEventListeners();
    const elementEnabledEvent = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.ELEMENT_ENABLED;
    const elementDisabledEvent = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.ELEMENT_DISABLED;
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.addEventListener(elementEnabledEvent, _store__WEBPACK_IMPORTED_MODULE_4__.addEnabledElement);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.addEventListener(elementDisabledEvent, _store__WEBPACK_IMPORTED_MODULE_4__.removeEnabledElement);
}
function _removeCornerstoneEventListeners() {
    const elementEnabledEvent = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.ELEMENT_ENABLED;
    const elementDisabledEvent = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.ELEMENT_DISABLED;
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.removeEventListener(elementEnabledEvent, _store__WEBPACK_IMPORTED_MODULE_4__.addEnabledElement);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.removeEventListener(elementDisabledEvent, _store__WEBPACK_IMPORTED_MODULE_4__.removeEnabledElement);
}
function _addCornerstoneToolsEventListeners() {
    _removeCornerstoneToolsEventListeners();
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.ANNOTATION_MODIFIED, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.annotationModifiedListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.ANNOTATION_SELECTION_CHANGE, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.annotationSelectionListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.ANNOTATION_SELECTION_CHANGE, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.annotationSelectionListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.SEGMENTATION_MODIFIED, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.segmentationModifiedListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.SEGMENTATION_DATA_MODIFIED, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.segmentationDataModifiedEventListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.SEGMENTATION_REPRESENTATION_MODIFIED, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.segmentationRepresentationModifiedEventListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.SEGMENTATION_REPRESENTATION_REMOVED, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.segmentationRepresentationRemovedEventListener);
}
function _removeCornerstoneToolsEventListeners() {
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.ANNOTATION_MODIFIED, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.annotationModifiedListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.ANNOTATION_SELECTION_CHANGE, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.annotationSelectionListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.ANNOTATION_SELECTION_CHANGE, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.annotationSelectionListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.SEGMENTATION_MODIFIED, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.segmentationModifiedListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.SEGMENTATION_DATA_MODIFIED, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.segmentationDataModifiedEventListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.SEGMENTATION_REPRESENTATION_MODIFIED, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.segmentationRepresentationModifiedEventListener);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.SEGMENTATION_REPRESENTATION_REMOVED, _eventListeners__WEBPACK_IMPORTED_MODULE_6__.segmentationRepresentationRemovedEventListener);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);
//# sourceMappingURL=init.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.js":
/*!***********************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultFrameOfReferenceSpecificAnnotationManager: () => (/* binding */ defaultFrameOfReferenceSpecificAnnotationManager)
/* harmony export */ });
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.clonedeep */ "../../../node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _annotationLocking__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _annotationVisibility__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");




class FrameOfReferenceSpecificAnnotationManager {
    constructor(uid) {
        this.getGroupKey = (annotationGroupSelector) => {
            if (typeof annotationGroupSelector === 'string') {
                return annotationGroupSelector;
            }
            const element = annotationGroupSelector;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            if (!enabledElement) {
                throw new Error('Element not enabled, you must have an enabled element if you are not providing a FrameOfReferenceUID');
            }
            return enabledElement.FrameOfReferenceUID;
        };
        this._imageVolumeModifiedHandler = (evt) => {
            const eventDetail = evt.detail;
            const { FrameOfReferenceUID } = eventDetail;
            const annotations = this.annotations;
            const frameOfReferenceSpecificAnnotations = annotations[FrameOfReferenceUID];
            if (!frameOfReferenceSpecificAnnotations) {
                return;
            }
            Object.keys(frameOfReferenceSpecificAnnotations).forEach((toolName) => {
                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];
                toolSpecificAnnotations.forEach((annotation) => {
                    const invalidated = annotation.invalidated;
                    if (invalidated !== undefined) {
                        annotation.invalidated = true;
                    }
                });
            });
        };
        this.getFramesOfReference = () => {
            return Object.keys(this.annotations);
        };
        this.getAnnotations = (groupKey, toolName) => {
            const annotations = this.annotations;
            if (!annotations[groupKey]) {
                return [];
            }
            if (toolName) {
                return annotations[groupKey][toolName];
            }
            return annotations[groupKey];
        };
        this.getAnnotation = (annotationUID) => {
            const annotations = this.annotations;
            for (const frameOfReferenceUID in annotations) {
                const frameOfReferenceAnnotations = annotations[frameOfReferenceUID];
                for (const toolName in frameOfReferenceAnnotations) {
                    const toolSpecificAnnotations = frameOfReferenceAnnotations[toolName];
                    for (const annotation of toolSpecificAnnotations) {
                        if (annotationUID === annotation.annotationUID) {
                            return annotation;
                        }
                    }
                }
            }
        };
        this.getNumberOfAnnotations = (groupKey, toolName) => {
            const annotations = this.getAnnotations(groupKey, toolName);
            if (!annotations.length) {
                return 0;
            }
            if (toolName) {
                return annotations.length;
            }
            let total = 0;
            for (const toolName in annotations) {
                total += annotations[toolName].length;
            }
            return total;
        };
        this.addAnnotation = (annotation, groupKey) => {
            const { metadata } = annotation;
            const { FrameOfReferenceUID, toolName } = metadata;
            groupKey = groupKey || FrameOfReferenceUID;
            const annotations = this.annotations;
            let frameOfReferenceSpecificAnnotations = annotations[groupKey];
            if (!frameOfReferenceSpecificAnnotations) {
                annotations[groupKey] = {};
                frameOfReferenceSpecificAnnotations = annotations[groupKey];
            }
            let toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];
            if (!toolSpecificAnnotations) {
                frameOfReferenceSpecificAnnotations[toolName] = [];
                toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];
            }
            toolSpecificAnnotations.push(annotation);
            (0,_annotationLocking__WEBPACK_IMPORTED_MODULE_2__.checkAndDefineIsLockedProperty)(annotation);
            (0,_annotationVisibility__WEBPACK_IMPORTED_MODULE_3__.checkAndDefineIsVisibleProperty)(annotation);
        };
        this.removeAnnotation = (annotationUID) => {
            const { annotations } = this;
            for (const groupKey in annotations) {
                const groupAnnotations = annotations[groupKey];
                for (const toolName in groupAnnotations) {
                    const toolAnnotations = groupAnnotations[toolName];
                    const index = toolAnnotations.findIndex((annotation) => annotation.annotationUID === annotationUID);
                    if (index !== -1) {
                        toolAnnotations.splice(index, 1);
                        if (toolAnnotations.length === 0) {
                            delete groupAnnotations[toolName];
                        }
                    }
                }
                if (Object.keys(groupAnnotations).length === 0) {
                    delete annotations[groupKey];
                }
            }
        };
        this.removeAnnotations = (groupKey, toolName) => {
            const annotations = this.annotations;
            if (annotations[groupKey]) {
                if (toolName) {
                    delete annotations[groupKey][toolName];
                }
                else {
                    delete annotations[groupKey];
                }
            }
        };
        this.saveAnnotations = (groupKey, toolName) => {
            const annotations = this.annotations;
            if (groupKey && toolName) {
                const frameOfReferenceSpecificAnnotations = annotations[groupKey];
                if (!frameOfReferenceSpecificAnnotations) {
                    return;
                }
                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];
                return lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default()(toolSpecificAnnotations);
            }
            else if (groupKey) {
                const frameOfReferenceSpecificAnnotations = annotations[groupKey];
                return lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default()(frameOfReferenceSpecificAnnotations);
            }
            return lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default()(annotations);
        };
        this.restoreAnnotations = (state, groupKey, toolName) => {
            const annotations = this.annotations;
            if (groupKey && toolName) {
                let frameOfReferenceSpecificAnnotations = annotations[groupKey];
                if (!frameOfReferenceSpecificAnnotations) {
                    annotations[groupKey] = {};
                    frameOfReferenceSpecificAnnotations = annotations[groupKey];
                }
                frameOfReferenceSpecificAnnotations[toolName] = state;
            }
            else if (groupKey) {
                annotations[groupKey] = state;
            }
            else {
                this.annotations = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default()(state);
            }
        };
        this.getNumberOfAllAnnotations = () => {
            let count = 0;
            const annotations = this.annotations;
            for (const groupKey in annotations) {
                const frameOfReferenceSpecificAnnotations = annotations[groupKey];
                for (const toolName in frameOfReferenceSpecificAnnotations) {
                    const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];
                    count += toolSpecificAnnotations.length;
                }
            }
            return count;
        };
        this.removeAllAnnotations = () => {
            this.annotations = {};
        };
        if (!uid) {
            uid = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.uuidv4();
        }
        this.annotations = {};
        this.uid = uid;
        _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget.addEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.Enums.Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedHandler);
    }
}
const defaultFrameOfReferenceSpecificAnnotationManager = new FrameOfReferenceSpecificAnnotationManager('DEFAULT');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FrameOfReferenceSpecificAnnotationManager);
//# sourceMappingURL=FrameOfReferenceSpecificAnnotationManager.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkAndDefineIsLockedProperty: () => (/* binding */ checkAndDefineIsLockedProperty),
/* harmony export */   getAnnotationsLocked: () => (/* binding */ getAnnotationsLocked),
/* harmony export */   getAnnotationsLockedCount: () => (/* binding */ getAnnotationsLockedCount),
/* harmony export */   isAnnotationLocked: () => (/* binding */ isAnnotationLocked),
/* harmony export */   setAnnotationLocked: () => (/* binding */ setAnnotationLocked),
/* harmony export */   unlockAllAnnotations: () => (/* binding */ unlockAllAnnotations)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");


const globalLockedAnnotationsSet = new Set();
function setAnnotationLocked(annotation, locked = true) {
    const detail = makeEventDetail();
    if (annotation) {
        if (locked) {
            lock(annotation, globalLockedAnnotationsSet, detail);
        }
        else {
            unlock(annotation, globalLockedAnnotationsSet, detail);
        }
    }
    publish(detail, globalLockedAnnotationsSet);
}
function unlockAllAnnotations() {
    const detail = makeEventDetail();
    clearLockedAnnotationsSet(globalLockedAnnotationsSet, detail);
    publish(detail, globalLockedAnnotationsSet);
}
function getAnnotationsLocked() {
    return Array.from(globalLockedAnnotationsSet);
}
function isAnnotationLocked(annotation) {
    return globalLockedAnnotationsSet.has(annotation);
}
function getAnnotationsLockedCount() {
    return globalLockedAnnotationsSet.size;
}
function checkAndDefineIsLockedProperty(annotation) {
    if (annotation) {
        const isLocked = !!annotation.isLocked;
        if (shouldDefineIsLockedProperty(annotation)) {
            Object.defineProperty(annotation, 'isLocked', {
                configurable: false,
                enumerable: true,
                set: setIsLocked,
                get: getIsLocked,
            });
        }
        setAnnotationLocked(annotation, isLocked);
    }
}
function makeEventDetail() {
    return Object.freeze({
        added: [],
        removed: [],
        locked: [],
    });
}
function lock(annotation, lockedAnnotationsSet, detail) {
    if (!lockedAnnotationsSet.has(annotation)) {
        lockedAnnotationsSet.add(annotation);
        detail.added.push(annotation);
    }
}
function unlock(annotation, lockedAnnotationsSet, detail) {
    if (lockedAnnotationsSet.delete(annotation)) {
        detail.removed.push(annotation);
    }
}
function clearLockedAnnotationsSet(lockedAnnotationsSet, detail) {
    lockedAnnotationsSet.forEach((annotation) => {
        unlock(annotation, lockedAnnotationsSet, detail);
    });
}
function publish(detail, lockedAnnotationsSet) {
    if (detail.added.length > 0 || detail.removed.length > 0) {
        lockedAnnotationsSet.forEach((item) => void detail.locked.push(item));
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, _enums__WEBPACK_IMPORTED_MODULE_1__.Events.ANNOTATION_LOCK_CHANGE, detail);
    }
}
function shouldDefineIsLockedProperty(annotation) {
    const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isLocked');
    if (descriptor) {
        return (descriptor.configurable &&
            (descriptor.set !== setIsLocked || descriptor.get !== getIsLocked));
    }
    return Object.isExtensible(annotation);
}
function setIsLocked(locked) {
    setAnnotationLocked(this, locked);
}
function getIsLocked() {
    return isAnnotationLocked(this);
}

//# sourceMappingURL=annotationLocking.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deselectAnnotation: () => (/* binding */ deselectAnnotation),
/* harmony export */   getAnnotationsSelected: () => (/* binding */ getAnnotationsSelected),
/* harmony export */   getAnnotationsSelectedByToolName: () => (/* binding */ getAnnotationsSelectedByToolName),
/* harmony export */   getAnnotationsSelectedCount: () => (/* binding */ getAnnotationsSelectedCount),
/* harmony export */   isAnnotationSelected: () => (/* binding */ isAnnotationSelected),
/* harmony export */   setAnnotationSelected: () => (/* binding */ setAnnotationSelected)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _annotationState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");



const selectedAnnotationUIDs = new Set();
function setAnnotationSelected(annotationUID, selected = true, preserveSelected = false) {
    if (selected) {
        selectAnnotation(annotationUID, preserveSelected);
    }
    else {
        deselectAnnotation(annotationUID);
    }
}
function selectAnnotation(annotationUID, preserveSelected = false) {
    const detail = makeEventDetail();
    if (!preserveSelected) {
        clearSelectionSet(selectedAnnotationUIDs, detail);
    }
    if (annotationUID && !selectedAnnotationUIDs.has(annotationUID)) {
        selectedAnnotationUIDs.add(annotationUID);
        detail.added.push(annotationUID);
    }
    publish(detail, selectedAnnotationUIDs);
}
function deselectAnnotation(annotationUID) {
    const detail = makeEventDetail();
    if (annotationUID) {
        if (selectedAnnotationUIDs.delete(annotationUID)) {
            detail.removed.push(annotationUID);
        }
    }
    else {
        clearSelectionSet(selectedAnnotationUIDs, detail);
    }
    publish(detail, selectedAnnotationUIDs);
}
function getAnnotationsSelected() {
    return Array.from(selectedAnnotationUIDs);
}
function getAnnotationsSelectedByToolName(toolName) {
    return getAnnotationsSelected().filter((annotationUID) => {
        const annotation = (0,_annotationState__WEBPACK_IMPORTED_MODULE_2__.getAnnotation)(annotationUID);
        return annotation.metadata.toolName === toolName;
    });
}
function isAnnotationSelected(annotationUID) {
    return selectedAnnotationUIDs.has(annotationUID);
}
function getAnnotationsSelectedCount() {
    return selectedAnnotationUIDs.size;
}
function makeEventDetail() {
    return Object.freeze({
        added: [],
        removed: [],
        selection: [],
    });
}
function clearSelectionSet(selectionSet, detail) {
    selectionSet.forEach((value) => {
        if (selectionSet.delete(value)) {
            detail.removed.push(value);
        }
    });
}
function publish(detail, selectionSet) {
    if (detail.added.length > 0 || detail.removed.length > 0) {
        selectionSet.forEach((item) => void detail.selection.push(item));
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, _enums__WEBPACK_IMPORTED_MODULE_1__.Events.ANNOTATION_SELECTION_CHANGE, detail);
    }
}

//# sourceMappingURL=annotationSelection.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js":
/*!*********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addAnnotation: () => (/* binding */ addAnnotation),
/* harmony export */   getAnnotation: () => (/* binding */ getAnnotation),
/* harmony export */   getAnnotationManager: () => (/* binding */ getAnnotationManager),
/* harmony export */   getAnnotations: () => (/* binding */ getAnnotations),
/* harmony export */   getNumberOfAnnotations: () => (/* binding */ getNumberOfAnnotations),
/* harmony export */   removeAllAnnotations: () => (/* binding */ removeAllAnnotations),
/* harmony export */   removeAnnotation: () => (/* binding */ removeAnnotation),
/* harmony export */   resetAnnotationManager: () => (/* binding */ resetAnnotationManager),
/* harmony export */   setAnnotationManager: () => (/* binding */ setAnnotationManager)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _FrameOfReferenceSpecificAnnotationManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FrameOfReferenceSpecificAnnotationManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.js");
/* harmony import */ var _helpers_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/state */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/helpers/state.js");




let defaultManager = _FrameOfReferenceSpecificAnnotationManager__WEBPACK_IMPORTED_MODULE_2__.defaultFrameOfReferenceSpecificAnnotationManager;
function getAnnotationManager() {
    return defaultManager;
}
function setAnnotationManager(annotationManager) {
    defaultManager = annotationManager;
}
function resetAnnotationManager() {
    defaultManager = _FrameOfReferenceSpecificAnnotationManager__WEBPACK_IMPORTED_MODULE_2__.defaultFrameOfReferenceSpecificAnnotationManager;
}
function getAnnotations(toolName, annotationGroupSelector) {
    const manager = getAnnotationManager();
    const groupKey = manager.getGroupKey(annotationGroupSelector);
    return manager.getAnnotations(groupKey, toolName);
}
function addAnnotation(annotation, annotationGroupSelector) {
    if (annotation.annotationUID === undefined) {
        annotation.annotationUID = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.uuidv4();
    }
    const manager = getAnnotationManager();
    const groupKey = manager.getGroupKey(annotationGroupSelector);
    manager.addAnnotation(annotation, groupKey);
    if (annotationGroupSelector instanceof HTMLDivElement) {
        (0,_helpers_state__WEBPACK_IMPORTED_MODULE_3__.triggerAnnotationAddedForElement)(annotation, annotationGroupSelector);
    }
    else {
        (0,_helpers_state__WEBPACK_IMPORTED_MODULE_3__.triggerAnnotationAddedForFOR)(annotation);
    }
    return annotation.annotationUID;
}
function getNumberOfAnnotations(toolName, annotationGroupSelector) {
    const manager = getAnnotationManager();
    const groupKey = manager.getGroupKey(annotationGroupSelector);
    return manager.getNumberOfAnnotations(groupKey, toolName);
}
function removeAnnotation(annotationUID) {
    const manager = getAnnotationManager();
    const annotation = manager.getAnnotation(annotationUID);
    if (!annotation) {
        return;
    }
    manager.removeAnnotation(annotationUID);
    const eventType = _enums__WEBPACK_IMPORTED_MODULE_1__.Events.ANNOTATION_REMOVED;
    const eventDetail = {
        annotation,
        annotationManagerUID: manager.uid,
    };
    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, eventType, eventDetail);
}
function getAnnotation(annotationUID) {
    const manager = getAnnotationManager();
    const annotation = manager.getAnnotation(annotationUID);
    return annotation;
}
function removeAllAnnotations() {
    const manager = getAnnotationManager();
    manager.removeAllAnnotations();
}

//# sourceMappingURL=annotationState.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js":
/*!**************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkAndDefineIsVisibleProperty: () => (/* binding */ checkAndDefineIsVisibleProperty),
/* harmony export */   isAnnotationVisible: () => (/* binding */ isAnnotationVisible),
/* harmony export */   setAnnotationVisibility: () => (/* binding */ setAnnotationVisibility),
/* harmony export */   showAllAnnotations: () => (/* binding */ showAllAnnotations)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _annotationState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _annotationSelection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./annotationSelection */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js");




const globalHiddenAnnotationUIDsSet = new Set();
function setAnnotationVisibility(annotationUID, visible = true) {
    const detail = makeEventDetail();
    if (annotationUID) {
        if (visible) {
            show(annotationUID, globalHiddenAnnotationUIDsSet, detail);
        }
        else {
            hide(annotationUID, globalHiddenAnnotationUIDsSet, detail);
        }
    }
    publish(detail);
}
function showAllAnnotations() {
    const detail = makeEventDetail();
    globalHiddenAnnotationUIDsSet.forEach((annotationUID) => {
        show(annotationUID, globalHiddenAnnotationUIDsSet, detail);
    });
    publish(detail);
}
function isAnnotationVisible(annotationUID) {
    const annotation = (0,_annotationState__WEBPACK_IMPORTED_MODULE_1__.getAnnotation)(annotationUID);
    if (annotation) {
        return !globalHiddenAnnotationUIDsSet.has(annotationUID);
    }
}
function checkAndDefineIsVisibleProperty(annotation) {
    if (annotation) {
        const isVisible = annotation.isVisible ?? true;
        if (shouldDefineIsVisibleProperty(annotation)) {
            Object.defineProperty(annotation, 'isVisible', {
                configurable: false,
                enumerable: true,
                set: setIsVisible,
                get: getIsVisible,
            });
        }
        setAnnotationVisibility(annotation.annotationUID, isVisible);
    }
}
function makeEventDetail() {
    return Object.freeze({
        lastVisible: [],
        lastHidden: [],
        hidden: [],
    });
}
function show(annotationUID, annotationUIDsSet, detail) {
    if (annotationUIDsSet.delete(annotationUID)) {
        detail.lastVisible.push(annotationUID);
    }
}
function hide(annotationUID, annotationUIDsSet, detail) {
    if (!annotationUIDsSet.has(annotationUID)) {
        annotationUIDsSet.add(annotationUID);
        if ((0,_annotationSelection__WEBPACK_IMPORTED_MODULE_3__.isAnnotationSelected)(annotationUID)) {
            (0,_annotationSelection__WEBPACK_IMPORTED_MODULE_3__.deselectAnnotation)(annotationUID);
        }
        detail.lastHidden.push(annotationUID);
    }
}
function publish(detail) {
    if (detail.lastHidden.length > 0 || detail.lastVisible.length > 0) {
        globalHiddenAnnotationUIDsSet.forEach((item) => void detail.hidden.push(item));
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, _enums__WEBPACK_IMPORTED_MODULE_2__.Events.ANNOTATION_VISIBILITY_CHANGE, detail);
    }
}
function shouldDefineIsVisibleProperty(annotation) {
    const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isVisible');
    if (descriptor) {
        return (descriptor.configurable &&
            (descriptor.set !== setIsVisible || descriptor.get !== getIsVisible));
    }
    return Object.isExtensible(annotation);
}
function setIsVisible(hidden) {
    setAnnotationVisibility(this.annotationUID, hidden);
}
function getIsVisible() {
    return isAnnotationVisible(this.annotationUID);
}

//# sourceMappingURL=annotationVisibility.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/ToolStyle.js":
/*!**********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/ToolStyle.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
class ToolStyle {
    constructor() {
        const defaultConfig = {
            color: 'rgb(255, 255, 0)',
            colorHighlighted: 'rgb(0, 255, 0)',
            colorSelected: 'rgb(0, 220, 0)',
            colorLocked: 'rgb(255, 255, 0)',
            lineWidth: '1',
            lineDash: '',
            shadow: true,
            textBoxFontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',
            textBoxFontSize: '14px',
            textBoxColor: 'rgb(255, 255, 0)',
            textBoxColorHighlighted: 'rgb(0, 255, 0)',
            textBoxColorSelected: 'rgb(0, 255, 0)',
            textBoxColorLocked: 'rgb(255, 255, 0)',
            textBoxBackground: '',
            textBoxLinkLineWidth: '1',
            textBoxLinkLineDash: '2,3',
            textBoxShadow: true,
        };
        this._initializeConfig(defaultConfig);
    }
    getAnnotationToolStyles(annotationUID) {
        return this.config.annotations && this.config.annotations[annotationUID];
    }
    getViewportToolStyles(viewportId) {
        return this.config.viewports && this.config.viewports[viewportId];
    }
    getToolGroupToolStyles(toolGroupId) {
        return this.config.toolGroups && this.config.toolGroups[toolGroupId];
    }
    getDefaultToolStyles() {
        return this.config.default;
    }
    setAnnotationStyles(annotationUID, styles) {
        let annotationSpecificStyles = this.config.annotations;
        if (!annotationSpecificStyles) {
            this.config = {
                ...this.config,
                annotations: {},
            };
            annotationSpecificStyles = this.config.annotations;
        }
        annotationSpecificStyles[annotationUID] = styles;
    }
    setViewportToolStyles(viewportId, styles) {
        let viewportSpecificStyles = this.config.viewports;
        if (!viewportSpecificStyles) {
            this.config = {
                ...this.config,
                viewports: {},
            };
            viewportSpecificStyles = this.config.viewports;
        }
        viewportSpecificStyles[viewportId] = styles;
    }
    setToolGroupToolStyles(toolGroupId, styles) {
        let toolGroupSpecificStyles = this.config.toolGroups;
        if (!toolGroupSpecificStyles) {
            this.config = {
                ...this.config,
                toolGroups: {},
            };
            toolGroupSpecificStyles = this.config.toolGroups;
        }
        toolGroupSpecificStyles[toolGroupId] = styles;
    }
    setDefaultToolStyles(styles) {
        this.config.default = styles;
    }
    getStyleProperty(toolStyle, specifications) {
        const { annotationUID, viewportId, toolGroupId, toolName } = specifications;
        return this._getToolStyle(toolStyle, annotationUID, viewportId, toolGroupId, toolName);
    }
    _getToolStyle(property, annotationUID, viewportId, toolGroupId, toolName) {
        if (annotationUID) {
            const styles = this.getAnnotationToolStyles(annotationUID);
            if (styles) {
                if (styles[property]) {
                    return styles[property];
                }
            }
        }
        if (viewportId) {
            const styles = this.getViewportToolStyles(viewportId);
            if (styles) {
                if (styles[toolName] && styles[toolName][property]) {
                    return styles[toolName][property];
                }
                if (styles.global && styles.global[property]) {
                    return styles.global[property];
                }
            }
        }
        if (toolGroupId) {
            const styles = this.getToolGroupToolStyles(toolGroupId);
            if (styles) {
                if (styles[toolName] && styles[toolName][property]) {
                    return styles[toolName][property];
                }
                if (styles.global && styles.global[property]) {
                    return styles.global[property];
                }
            }
        }
        const globalStyles = this.getDefaultToolStyles();
        if (globalStyles[toolName] && globalStyles[toolName][property]) {
            return globalStyles[toolName][property];
        }
        if (globalStyles.global && globalStyles.global[property]) {
            return globalStyles.global[property];
        }
    }
    _initializeConfig(config) {
        const toolStyles = {};
        for (const name in config) {
            toolStyles[name] = config[name];
        }
        this.config = {
            default: {
                global: toolStyles,
            },
        };
    }
}
const toolStyle = new ToolStyle();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toolStyle);
//# sourceMappingURL=ToolStyle.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getFont.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getFont.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/helpers.js");

function getFont(styleSpecifier, state, mode) {
    const fontSize = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getStyleProperty)('textBoxFontSize', styleSpecifier, state, mode);
    const fontFamily = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getStyleProperty)('textBoxFontFamily', styleSpecifier, state, mode);
    return `${fontSize}px ${fontFamily}`;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getFont);
//# sourceMappingURL=getFont.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getState.js":
/*!*********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getState.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _annotationLocking__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _annotationSelection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../annotationSelection */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");



function getState(annotation) {
    if (annotation) {
        if (annotation.data && annotation.highlighted)
            return _enums__WEBPACK_IMPORTED_MODULE_2__.AnnotationStyleStates.Highlighted;
        if ((0,_annotationSelection__WEBPACK_IMPORTED_MODULE_1__.isAnnotationSelected)(annotation.annotationUID))
            return _enums__WEBPACK_IMPORTED_MODULE_2__.AnnotationStyleStates.Selected;
        if ((0,_annotationLocking__WEBPACK_IMPORTED_MODULE_0__.isAnnotationLocked)(annotation))
            return _enums__WEBPACK_IMPORTED_MODULE_2__.AnnotationStyleStates.Locked;
    }
    return _enums__WEBPACK_IMPORTED_MODULE_2__.AnnotationStyleStates.Default;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getState);
//# sourceMappingURL=getState.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/helpers.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/helpers.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getStyleProperty: () => (/* binding */ getStyleProperty)
/* harmony export */ });
/* harmony import */ var _ToolStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ToolStyle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/ToolStyle.js");

function getHierarchalPropertyStyles(property, state, mode) {
    const list = [`${property}`];
    if (state)
        list.push(`${list[0]}${state}`);
    if (mode)
        list.push(`${list[list.length - 1]}${mode}`);
    return list;
}
function getStyleProperty(property, styleSpecifier, state, mode) {
    const alternatives = getHierarchalPropertyStyles(property, state, mode);
    for (let i = alternatives.length - 1; i >= 0; --i) {
        const style = _ToolStyle__WEBPACK_IMPORTED_MODULE_0__["default"].getStyleProperty(alternatives[i], styleSpecifier);
        if (style !== undefined) {
            return style;
        }
    }
}

//# sourceMappingURL=helpers.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/index.js":
/*!******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/index.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFont: () => (/* reexport safe */ _getFont__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   getState: () => (/* reexport safe */ _getState__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   style: () => (/* reexport safe */ _ToolStyle__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _getState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getState.js");
/* harmony import */ var _getFont__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getFont */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/getFont.js");
/* harmony import */ var _ToolStyle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ToolStyle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/ToolStyle.js");




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/helpers/state.js":
/*!*******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/helpers/state.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   triggerAnnotationAddedForElement: () => (/* binding */ triggerAnnotationAddedForElement),
/* harmony export */   triggerAnnotationAddedForFOR: () => (/* binding */ triggerAnnotationAddedForFOR)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");



function triggerAnnotationAddedForElement(annotation, element) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { renderingEngine, viewportId } = enabledElement;
    const eventType = _enums__WEBPACK_IMPORTED_MODULE_1__.Events.ANNOTATION_ADDED;
    const eventDetail = {
        annotation,
        viewportId,
        renderingEngineId: renderingEngine.id,
    };
    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, eventType, eventDetail);
}
function triggerAnnotationAddedForFOR(annotation) {
    const { toolName } = annotation.metadata;
    const toolGroups = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_2__.getToolGroupsWithToolName)(toolName);
    if (!toolGroups.length) {
        return;
    }
    const viewportsToRender = [];
    toolGroups.forEach((toolGroup) => {
        toolGroup.viewportsInfo.forEach((viewportInfo) => {
            const { renderingEngineId, viewportId } = viewportInfo;
            const { FrameOfReferenceUID } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElementByIds)(viewportId, renderingEngineId);
            if (annotation.metadata.FrameOfReferenceUID === FrameOfReferenceUID) {
                viewportsToRender.push(viewportInfo);
            }
        });
    });
    if (!viewportsToRender.length) {
        return;
    }
    const eventType = _enums__WEBPACK_IMPORTED_MODULE_1__.Events.ANNOTATION_ADDED;
    viewportsToRender.forEach(({ renderingEngineId, viewportId }) => {
        const eventDetail = {
            annotation,
            viewportId,
            renderingEngineId,
        };
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, eventType, eventDetail);
    });
}

//# sourceMappingURL=state.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/index.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FrameOfReferenceSpecificAnnotationManager: () => (/* reexport safe */ _FrameOfReferenceSpecificAnnotationManager__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   config: () => (/* reexport module object */ _config__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   locking: () => (/* reexport module object */ _annotationLocking__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   selection: () => (/* reexport module object */ _annotationSelection__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   state: () => (/* reexport module object */ _annotationState__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   visibility: () => (/* reexport module object */ _annotationVisibility__WEBPACK_IMPORTED_MODULE_4__)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/index.js");
/* harmony import */ var _annotationLocking__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _annotationSelection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./annotationSelection */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js");
/* harmony import */ var _annotationState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _annotationVisibility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");
/* harmony import */ var _FrameOfReferenceSpecificAnnotationManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./FrameOfReferenceSpecificAnnotationManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.js");







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/index.js":
/*!************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FrameOfReferenceSpecificAnnotationManager: () => (/* reexport safe */ _annotation_FrameOfReferenceSpecificAnnotationManager__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   addAnnotation: () => (/* reexport safe */ _annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.addAnnotation),
/* harmony export */   addSegmentationRepresentations: () => (/* reexport safe */ _segmentation__WEBPACK_IMPORTED_MODULE_4__.addSegmentationRepresentations),
/* harmony export */   annotationLocking: () => (/* reexport module object */ _annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   annotationSelection: () => (/* reexport module object */ _annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   defaultFrameOfReferenceSpecificAnnotationManager: () => (/* reexport safe */ _annotation_FrameOfReferenceSpecificAnnotationManager__WEBPACK_IMPORTED_MODULE_0__.defaultFrameOfReferenceSpecificAnnotationManager),
/* harmony export */   getAnnotation: () => (/* reexport safe */ _annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getAnnotation),
/* harmony export */   getAnnotationManager: () => (/* reexport safe */ _annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getAnnotationManager),
/* harmony export */   getAnnotations: () => (/* reexport safe */ _annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getAnnotations),
/* harmony export */   getNumberOfAnnotations: () => (/* reexport safe */ _annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getNumberOfAnnotations),
/* harmony export */   removeAnnotation: () => (/* reexport safe */ _annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.removeAnnotation),
/* harmony export */   removeSegmentationsFromToolGroup: () => (/* reexport safe */ _segmentation__WEBPACK_IMPORTED_MODULE_4__.removeSegmentationsFromToolGroup),
/* harmony export */   resetAnnotationManager: () => (/* reexport safe */ _annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.resetAnnotationManager),
/* harmony export */   setAnnotationManager: () => (/* reexport safe */ _annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.setAnnotationManager)
/* harmony export */ });
/* harmony import */ var _annotation_FrameOfReferenceSpecificAnnotationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./annotation/FrameOfReferenceSpecificAnnotationManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.js");
/* harmony import */ var _annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _annotation_annotationSelection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./annotation/annotationSelection */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationSelection.js");
/* harmony import */ var _annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _segmentation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./segmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js");






//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js":
/*!********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SegmentationStateManager),
/* harmony export */   defaultSegmentationStateManager: () => (/* binding */ defaultSegmentationStateManager)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.clonedeep */ "../../../node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _constants_COLOR_LUT__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../constants/COLOR_LUT */ "../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _tools_displayTools_Contour_contourConfig__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../tools/displayTools/Contour/contourConfig */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourConfig.js");
/* harmony import */ var _tools_displayTools_Labelmap_labelmapConfig__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../tools/displayTools/Labelmap/labelmapConfig */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapConfig.js");






const defaultLabelmapConfig = (0,_tools_displayTools_Labelmap_labelmapConfig__WEBPACK_IMPORTED_MODULE_5__["default"])();
const defaultContourConfig = (0,_tools_displayTools_Contour_contourConfig__WEBPACK_IMPORTED_MODULE_4__["default"])();
const newGlobalConfig = {
    renderInactiveSegmentations: true,
    representations: {
        [_enums__WEBPACK_IMPORTED_MODULE_3__.SegmentationRepresentations.Labelmap]: defaultLabelmapConfig,
        [_enums__WEBPACK_IMPORTED_MODULE_3__.SegmentationRepresentations.Contour]: defaultContourConfig,
    },
};
const initialDefaultState = {
    colorLUT: [],
    segmentations: [],
    globalConfig: newGlobalConfig,
    toolGroups: {},
};
class SegmentationStateManager {
    constructor(uid) {
        if (!uid) {
            uid = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.uuidv4();
        }
        this.state = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1___default()(initialDefaultState);
        this.uid = uid;
    }
    getState() {
        return this.state;
    }
    getToolGroups() {
        return Object.keys(this.state.toolGroups);
    }
    getColorLUT(lutIndex) {
        return this.state.colorLUT[lutIndex];
    }
    resetState() {
        this.state = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1___default()(initialDefaultState);
    }
    getSegmentation(segmentationId) {
        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);
    }
    addSegmentation(segmentation) {
        this._initDefaultColorLUTIfNecessary();
        if (this.getSegmentation(segmentation.segmentationId)) {
            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);
        }
        this.state.segmentations.push(segmentation);
    }
    getSegmentationRepresentations(toolGroupId) {
        const toolGroupSegRepresentationsWithConfig = this.state.toolGroups[toolGroupId];
        if (!toolGroupSegRepresentationsWithConfig) {
            return;
        }
        return toolGroupSegRepresentationsWithConfig.segmentationRepresentations;
    }
    addSegmentationRepresentation(toolGroupId, segmentationRepresentation) {
        if (!this.state.toolGroups[toolGroupId]) {
            this.state.toolGroups[toolGroupId] = {
                segmentationRepresentations: [],
                config: {},
            };
        }
        this.state.toolGroups[toolGroupId].segmentationRepresentations.push(segmentationRepresentation);
        this._handleActiveSegmentation(toolGroupId, segmentationRepresentation);
    }
    getGlobalConfig() {
        return this.state.globalConfig;
    }
    setGlobalConfig(config) {
        this.state.globalConfig = config;
    }
    getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID) {
        const toolGroupSegRepresentations = this.getSegmentationRepresentations(toolGroupId);
        const segmentationData = toolGroupSegRepresentations.find((representation) => representation.segmentationRepresentationUID ===
            segmentationRepresentationUID);
        return segmentationData;
    }
    removeSegmentation(segmentationId) {
        this.state.segmentations = this.state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);
    }
    removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID) {
        const toolGroupSegmentationRepresentations = this.getSegmentationRepresentations(toolGroupId);
        if (!toolGroupSegmentationRepresentations ||
            !toolGroupSegmentationRepresentations.length) {
            throw new Error(`No viewport specific segmentation state found for viewport ${toolGroupId}`);
        }
        const state = toolGroupSegmentationRepresentations;
        const index = state.findIndex((segData) => segData.segmentationRepresentationUID === segmentationRepresentationUID);
        if (index === -1) {
            console.warn(`No viewport specific segmentation state data found for viewport ${toolGroupId} and segmentation data UID ${segmentationRepresentationUID}`);
        }
        const removedSegmentationRepresentation = toolGroupSegmentationRepresentations[index];
        toolGroupSegmentationRepresentations.splice(index, 1);
        this._handleActiveSegmentation(toolGroupId, removedSegmentationRepresentation);
    }
    setActiveSegmentationRepresentation(toolGroupId, segmentationRepresentationUID) {
        const toolGroupSegmentations = this.getSegmentationRepresentations(toolGroupId);
        if (!toolGroupSegmentations || !toolGroupSegmentations.length) {
            throw new Error(`No segmentation data found for toolGroupId: ${toolGroupId}`);
        }
        const segmentationData = toolGroupSegmentations.find((segmentationData) => segmentationData.segmentationRepresentationUID ===
            segmentationRepresentationUID);
        if (!segmentationData) {
            throw new Error(`No segmentation data found for segmentation data UID ${segmentationRepresentationUID}`);
        }
        segmentationData.active = true;
        this._handleActiveSegmentation(toolGroupId, segmentationData);
    }
    getToolGroupSpecificConfig(toolGroupId) {
        const toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];
        if (!toolGroupStateWithConfig) {
            return;
        }
        return toolGroupStateWithConfig.config;
    }
    getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID) {
        const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);
        if (!segmentationRepresentation) {
            return;
        }
        return segmentationRepresentation.segmentationRepresentationSpecificConfig;
    }
    setSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID, config) {
        const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);
        if (!segmentationRepresentation) {
            return;
        }
        segmentationRepresentation.segmentationRepresentationSpecificConfig =
            config;
    }
    getSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, segmentIndex) {
        const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);
        if (!segmentationRepresentation) {
            return;
        }
        return segmentationRepresentation.segmentSpecificConfig[segmentIndex];
    }
    setSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, config) {
        const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);
        if (!segmentationRepresentation) {
            return;
        }
        segmentationRepresentation.segmentSpecificConfig = config;
    }
    setSegmentationRepresentationConfig(toolGroupId, config) {
        let toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];
        if (!toolGroupStateWithConfig) {
            this.state.toolGroups[toolGroupId] = {
                segmentationRepresentations: [],
                config: {
                    renderInactiveSegmentations: true,
                    representations: {},
                },
            };
            toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];
        }
        toolGroupStateWithConfig.config = {
            ...toolGroupStateWithConfig.config,
            ...config,
        };
    }
    addColorLUT(colorLUT, lutIndex) {
        if (this.state.colorLUT[lutIndex]) {
            console.log('Color LUT table already exists, overwriting');
        }
        this.state.colorLUT[lutIndex] = colorLUT;
    }
    removeColorLUT(colorLUTIndex) {
        delete this.state.colorLUT[colorLUTIndex];
    }
    _handleActiveSegmentation(toolGroupId, recentlyAddedOrRemovedSegmentationRepresentation) {
        const segmentationRepresentations = this.getSegmentationRepresentations(toolGroupId);
        if (segmentationRepresentations.length === 0) {
            return;
        }
        if (segmentationRepresentations.length === 1) {
            segmentationRepresentations[0].active = true;
            return;
        }
        const activeSegmentationRepresentations = segmentationRepresentations.filter((representation) => representation.active);
        if (activeSegmentationRepresentations.length === 0) {
            segmentationRepresentations[0].active = true;
            return;
        }
        if (recentlyAddedOrRemovedSegmentationRepresentation.active) {
            segmentationRepresentations.forEach((representation) => {
                if (representation.segmentationRepresentationUID !==
                    recentlyAddedOrRemovedSegmentationRepresentation.segmentationRepresentationUID) {
                    representation.active = false;
                }
            });
        }
    }
    _initDefaultColorLUTIfNecessary() {
        if (this.state.colorLUT.length === 0 || !this.state.colorLUT[0]) {
            this.addColorLUT(_constants_COLOR_LUT__WEBPACK_IMPORTED_MODULE_2__["default"], 0);
        }
    }
}
const defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');

//# sourceMappingURL=SegmentationStateManager.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js":
/*!**************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getActiveSegmentationRepresentation: () => (/* binding */ getActiveSegmentationRepresentation),
/* harmony export */   setActiveSegmentationRepresentation: () => (/* binding */ setActiveSegmentationRepresentation)
/* harmony export */ });
/* harmony import */ var _segmentationState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");
/* harmony import */ var _triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");


function getActiveSegmentationRepresentation(toolGroupId) {
    const segmentationStateManager = (0,_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getDefaultSegmentationStateManager)();
    const toolGroupSegmentationRepresentations = segmentationStateManager.getSegmentationRepresentations(toolGroupId);
    if (!toolGroupSegmentationRepresentations) {
        return;
    }
    const activeRepresentation = toolGroupSegmentationRepresentations.find((representation) => representation.active);
    return activeRepresentation;
}
function setActiveSegmentationRepresentation(toolGroupId, segmentationRepresentationUID) {
    const segmentationStateManager = (0,_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getDefaultSegmentationStateManager)();
    segmentationStateManager.setActiveSegmentationRepresentation(toolGroupId, segmentationRepresentationUID);
    (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationRepresentationModified)(toolGroupId, segmentationRepresentationUID);
}

//# sourceMappingURL=activeSegmentation.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentations.js":
/*!**************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentations.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../enums/SegmentationRepresentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");
/* harmony import */ var _tools_displayTools_Labelmap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tools/displayTools/Labelmap */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/index.js");
/* harmony import */ var _tools_displayTools_Contour__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tools/displayTools/Contour */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/index.js");




async function addSegmentationRepresentations(toolGroupId, representationInputArray, toolGroupSpecificRepresentationConfig) {
    const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_1__.getToolGroup)(toolGroupId);
    if (!toolGroup) {
        throw new Error(`No tool group found for toolGroupId: ${toolGroupId}`);
    }
    const promises = representationInputArray.map((representationInput) => {
        return _addSegmentationRepresentation(toolGroupId, representationInput, toolGroupSpecificRepresentationConfig);
    });
    const segmentationRepresentationUIDs = await Promise.all(promises);
    return segmentationRepresentationUIDs;
}
async function _addSegmentationRepresentation(toolGroupId, representationInput, toolGroupSpecificRepresentationConfig) {
    let segmentationRepresentationUID;
    if (representationInput.type === _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_0__["default"].Labelmap) {
        segmentationRepresentationUID =
            await _tools_displayTools_Labelmap__WEBPACK_IMPORTED_MODULE_2__.labelmapDisplay.addSegmentationRepresentation(toolGroupId, representationInput, toolGroupSpecificRepresentationConfig);
    }
    else if (representationInput.type === _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_0__["default"].Contour) {
        segmentationRepresentationUID =
            await _tools_displayTools_Contour__WEBPACK_IMPORTED_MODULE_3__.contourDisplay.addSegmentationRepresentation(toolGroupId, representationInput, toolGroupSpecificRepresentationConfig);
    }
    else {
        throw new Error(`The representation type ${representationInput.type} is not supported`);
    }
    return segmentationRepresentationUID;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addSegmentationRepresentations);
//# sourceMappingURL=addSegmentationRepresentations.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.clonedeep */ "../../../node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/index.js");
/* harmony import */ var _segmentationState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");



function addSegmentations(segmentationInputArray) {
    (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.validateSegmentationInput)(segmentationInputArray);
    segmentationInputArray.map((segInput) => {
        const segmentationInput = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default()(segInput);
        (0,_segmentationState__WEBPACK_IMPORTED_MODULE_2__.addSegmentation)(segmentationInput);
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addSegmentations);
//# sourceMappingURL=addSegmentations.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/index.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/index.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   color: () => (/* reexport module object */ _segmentationColor__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   getGlobalConfig: () => (/* reexport safe */ _segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.getGlobalConfig),
/* harmony export */   getGlobalRepresentationConfig: () => (/* reexport safe */ _segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.getGlobalRepresentationConfig),
/* harmony export */   getSegmentSpecificConfig: () => (/* reexport safe */ _segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.getSegmentSpecificConfig),
/* harmony export */   getSegmentationRepresentationSpecificConfig: () => (/* reexport safe */ _segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.getSegmentationRepresentationSpecificConfig),
/* harmony export */   getToolGroupSpecificConfig: () => (/* reexport safe */ _segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.getToolGroupSpecificConfig),
/* harmony export */   setGlobalConfig: () => (/* reexport safe */ _segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.setGlobalConfig),
/* harmony export */   setGlobalRepresentationConfig: () => (/* reexport safe */ _segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.setGlobalRepresentationConfig),
/* harmony export */   setSegmentSpecificConfig: () => (/* reexport safe */ _segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.setSegmentSpecificConfig),
/* harmony export */   setSegmentationRepresentationSpecificConfig: () => (/* reexport safe */ _segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.setSegmentationRepresentationSpecificConfig),
/* harmony export */   setToolGroupSpecificConfig: () => (/* reexport safe */ _segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.setToolGroupSpecificConfig),
/* harmony export */   visibility: () => (/* reexport module object */ _segmentationVisibility__WEBPACK_IMPORTED_MODULE_1__)
/* harmony export */ });
/* harmony import */ var _segmentationColor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./segmentationColor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js");
/* harmony import */ var _segmentationVisibility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./segmentationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationVisibility.js");
/* harmony import */ var _segmentationConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./segmentationConfig */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationConfig.js");




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js":
/*!********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addColorLUT: () => (/* binding */ addColorLUT),
/* harmony export */   getColorForSegmentIndex: () => (/* binding */ getColorForSegmentIndex),
/* harmony export */   setColorForSegmentIndex: () => (/* binding */ setColorForSegmentIndex),
/* harmony export */   setColorLUT: () => (/* binding */ setColorLUT)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");
/* harmony import */ var _triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");



function addColorLUT(colorLUT, colorLUTIndex) {
    if (!colorLUT) {
        throw new Error('addColorLUT: colorLUT is required');
    }
    if (!_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.isEqual(colorLUT[0], [0, 0, 0, 0])) {
        console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');
        colorLUT.unshift([0, 0, 0, 0]);
    }
    _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__.addColorLUT(colorLUT, colorLUTIndex);
}
function setColorLUT(toolGroupId, segmentationRepresentationUID, colorLUTIndex) {
    const segRepresentation = _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);
    if (!segRepresentation) {
        throw new Error(`setColorLUT: could not find segmentation representation with UID ${segmentationRepresentationUID}`);
    }
    if (!_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__.getColorLUT(colorLUTIndex)) {
        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTIndex}`);
    }
    segRepresentation.colorLUTIndex = colorLUTIndex;
    (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_2__.triggerSegmentationRepresentationModified)(toolGroupId, segmentationRepresentationUID);
}
function getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex) {
    const segmentationRepresentation = _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);
    if (!segmentationRepresentation) {
        throw new Error(`segmentation representation with UID ${segmentationRepresentationUID} does not exist for tool group ${toolGroupId}`);
    }
    const { colorLUTIndex } = segmentationRepresentation;
    const colorLUT = _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__.getColorLUT(colorLUTIndex);
    return colorLUT[segmentIndex];
}
function setColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex, color) {
    const colorReference = getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex);
    for (let i = 0; i < color.length; i++) {
        colorReference[i] = color[i];
    }
    (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_2__.triggerSegmentationRepresentationModified)(toolGroupId, segmentationRepresentationUID);
}

//# sourceMappingURL=segmentationColor.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationConfig.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationConfig.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getGlobalConfig: () => (/* binding */ getGlobalConfig),
/* harmony export */   getGlobalRepresentationConfig: () => (/* binding */ getGlobalRepresentationConfig),
/* harmony export */   getSegmentSpecificConfig: () => (/* binding */ getSegmentSpecificConfig),
/* harmony export */   getSegmentationRepresentationSpecificConfig: () => (/* binding */ getSegmentationRepresentationSpecificConfig),
/* harmony export */   getToolGroupSpecificConfig: () => (/* binding */ getToolGroupSpecificConfig),
/* harmony export */   setGlobalConfig: () => (/* binding */ setGlobalConfig),
/* harmony export */   setGlobalRepresentationConfig: () => (/* binding */ setGlobalRepresentationConfig),
/* harmony export */   setSegmentSpecificConfig: () => (/* binding */ setSegmentSpecificConfig),
/* harmony export */   setSegmentationRepresentationSpecificConfig: () => (/* binding */ setSegmentationRepresentationSpecificConfig),
/* harmony export */   setToolGroupSpecificConfig: () => (/* binding */ setToolGroupSpecificConfig)
/* harmony export */ });
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");

function getGlobalConfig() {
    return _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getGlobalConfig();
}
function setGlobalConfig(segmentationConfig) {
    _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.setGlobalConfig(segmentationConfig);
}
function getGlobalRepresentationConfig(representationType) {
    const globalConfig = getGlobalConfig();
    return globalConfig.representations[representationType];
}
function setGlobalRepresentationConfig(representationType, config) {
    const globalConfig = getGlobalConfig();
    setGlobalConfig({
        ...globalConfig,
        representations: {
            ...globalConfig.representations,
            [representationType]: {
                ...globalConfig.representations[representationType],
                ...config,
            },
        },
    });
}
function getToolGroupSpecificConfig(toolGroupId) {
    return _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getToolGroupSpecificConfig(toolGroupId);
}
function setToolGroupSpecificConfig(toolGroupId, segmentationRepresentationConfig) {
    _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.setToolGroupSpecificConfig(toolGroupId, segmentationRepresentationConfig);
}
function getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID) {
    return _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID);
}
function setSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID, config) {
    _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.setSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID, config);
}
function getSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, segmentIndex) {
    return _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getSegmentSpecificRepresentationConfig(toolGroupId, segmentationRepresentationUID, segmentIndex);
}
function setSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, config) {
    _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.setSegmentSpecificRepresentationConfig(toolGroupId, segmentationRepresentationUID, config);
}

//# sourceMappingURL=segmentationConfig.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationVisibility.js":
/*!*************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationVisibility.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSegmentationVisibility: () => (/* binding */ getSegmentationVisibility),
/* harmony export */   setSegmentVisibility: () => (/* binding */ setSegmentVisibility),
/* harmony export */   setSegmentationVisibility: () => (/* binding */ setSegmentationVisibility),
/* harmony export */   setSegmentsVisibility: () => (/* binding */ setSegmentsVisibility)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");
/* harmony import */ var _triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");
/* harmony import */ var _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../enums/SegmentationRepresentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js");





function getSegmentationIndices(segmentationId) {
    const segmentation = _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__.getSegmentation(segmentationId);
    if (segmentation.type === _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_3__["default"].Labelmap) {
        const volume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(segmentationId);
        const scalarData = volume.getScalarData();
        const keySet = {};
        for (let i = 0; i < scalarData.length; i++) {
            const segmentIndex = scalarData[i];
            if (segmentIndex !== 0 && !keySet[segmentIndex]) {
                keySet[segmentIndex] = true;
            }
        }
        return Object.keys(keySet).map((it) => parseInt(it, 10));
    }
    else if (segmentation.type === _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_3__["default"].Contour) {
        const geometryIds = segmentation.representationData.CONTOUR?.geometryIds;
        if (!geometryIds) {
            throw new Error(`No geometryIds found for segmentationId ${segmentationId}`);
        }
        return geometryIds.map((geometryId) => {
            const geometry = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getGeometry(geometryId);
            return geometry.data.getSegmentIndex();
        });
    }
}
function setSegmentationVisibility(toolGroupId, segmentationRepresentationUID, visibility) {
    const toolGroupSegmentationRepresentations = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__.getSegmentationRepresentations)(toolGroupId);
    if (!toolGroupSegmentationRepresentations) {
        return;
    }
    const representation = toolGroupSegmentationRepresentations.find((representation) => representation.segmentationRepresentationUID ===
        segmentationRepresentationUID);
    if (!representation) {
        return;
    }
    const { segmentsHidden, segmentationId } = representation;
    const indices = getSegmentationIndices(segmentationId);
    if (visibility) {
        segmentsHidden.clear();
    }
    else {
        indices.forEach((index) => {
            segmentsHidden.add(index);
        });
    }
    (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_2__.triggerSegmentationRepresentationModified)(toolGroupId, representation.segmentationRepresentationUID);
}
function getSegmentationVisibility(toolGroupId, segmentationRepresentationUID) {
    const toolGroupSegmentationRepresentations = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__.getSegmentationRepresentations)(toolGroupId);
    const representation = toolGroupSegmentationRepresentations.find((representation) => representation.segmentationRepresentationUID ===
        segmentationRepresentationUID);
    if (!representation) {
        return;
    }
    const { segmentsHidden } = representation;
    return segmentsHidden.size === 0;
}
function setSegmentsVisibility(toolGroupId, segmentationRepresentationUID, segmentIndices, visibility) {
    const segRepresentation = _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);
    if (!segRepresentation) {
        return;
    }
    segmentIndices.forEach((segmentIndex) => {
        visibility
            ? segRepresentation.segmentsHidden.delete(segmentIndex)
            : segRepresentation.segmentsHidden.add(segmentIndex);
    });
    (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_2__.triggerSegmentationRepresentationModified)(toolGroupId, segmentationRepresentationUID);
}
function setSegmentVisibility(toolGroupId, segmentationRepresentationUID, segmentIndex, visibility) {
    const segRepresentation = _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_1__.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);
    if (!segRepresentation) {
        return;
    }
    visibility
        ? segRepresentation.segmentsHidden.delete(segmentIndex)
        : segRepresentation.segmentsHidden.add(segmentIndex);
    (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_2__.triggerSegmentationRepresentationModified)(toolGroupId, segmentationRepresentationUID);
}

//# sourceMappingURL=segmentationVisibility.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/index.js":
/*!*********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/index.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   validateSegmentationInput: () => (/* reexport safe */ _validateSegmentationInput__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _validateSegmentationInput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validateSegmentationInput */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/validateSegmentationInput.js");


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js":
/*!******************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function normalizeSegmentationInput(segmentationInput) {
    const { segmentationId, representation } = segmentationInput;
    return {
        segmentationId,
        cachedStats: {},
        segmentLabels: {},
        label: null,
        segmentsLocked: new Set(),
        type: representation.type,
        activeSegmentIndex: 1,
        representationData: {
            [representation.type]: {
                ...representation.data,
            },
        },
    };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (normalizeSegmentationInput);
//# sourceMappingURL=normalizeSegmentationInput.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/validateSegmentationInput.js":
/*!*****************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/validateSegmentationInput.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _tools_displayTools_Labelmap_validateRepresentationData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../tools/displayTools/Labelmap/validateRepresentationData */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/validateRepresentationData.js");


function validateSegmentationInput(segmentationInputArray) {
    if (!segmentationInputArray || !segmentationInputArray.length) {
        throw new Error('The segmentationInputArray is undefined or empty array');
    }
    segmentationInputArray.forEach((segmentationInput) => {
        if (segmentationInput.segmentationId === undefined) {
            throw new Error('The segmentationInput.segmentationId is undefined, please provide a valid segmentationId');
        }
        if (segmentationInput.representation === undefined) {
            throw new Error('The segmentationInput.representation is undefined, please provide a valid representation');
        }
        if (segmentationInput.representation.type ===
            _enums__WEBPACK_IMPORTED_MODULE_0__.SegmentationRepresentations.Labelmap) {
            (0,_tools_displayTools_Labelmap_validateRepresentationData__WEBPACK_IMPORTED_MODULE_1__["default"])(segmentationInput);
        }
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validateSegmentationInput);
//# sourceMappingURL=validateSegmentationInput.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js":
/*!*************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   activeSegmentation: () => (/* reexport module object */ _activeSegmentation__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   addSegmentationRepresentations: () => (/* reexport safe */ _addSegmentationRepresentations__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   addSegmentations: () => (/* reexport safe */ _addSegmentations__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   config: () => (/* reexport module object */ _config__WEBPACK_IMPORTED_MODULE_6__),
/* harmony export */   removeSegmentationsFromToolGroup: () => (/* reexport safe */ _removeSegmentationsFromToolGroup__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   segmentIndex: () => (/* reexport module object */ _segmentIndex__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   segmentLocking: () => (/* reexport module object */ _segmentLocking__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   state: () => (/* reexport module object */ _segmentationState__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   triggerSegmentationEvents: () => (/* reexport module object */ _triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_8__)
/* harmony export */ });
/* harmony import */ var _removeSegmentationsFromToolGroup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./removeSegmentationsFromToolGroup */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationsFromToolGroup.js");
/* harmony import */ var _addSegmentations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./addSegmentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js");
/* harmony import */ var _addSegmentationRepresentations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./addSegmentationRepresentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentations.js");
/* harmony import */ var _activeSegmentation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./activeSegmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js");
/* harmony import */ var _segmentLocking__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./segmentLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js");
/* harmony import */ var _segmentationState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./config */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/index.js");
/* harmony import */ var _segmentIndex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./segmentIndex */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js");
/* harmony import */ var _triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");










//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationsFromToolGroup.js":
/*!****************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationsFromToolGroup.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../enums/SegmentationRepresentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js");
/* harmony import */ var _tools_displayTools_Labelmap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tools/displayTools/Labelmap */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/index.js");
/* harmony import */ var _tools_displayTools_Contour__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tools/displayTools/Contour */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/index.js");
/* harmony import */ var _segmentationState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");




function removeSegmentationsFromToolGroup(toolGroupId, segmentationRepresentationUIDs, immediate) {
    const toolGroupSegRepresentations = (0,_segmentationState__WEBPACK_IMPORTED_MODULE_3__.getSegmentationRepresentations)(toolGroupId);
    if (!toolGroupSegRepresentations ||
        toolGroupSegRepresentations.length === 0) {
        return;
    }
    const toolGroupSegRepresentationUIDs = toolGroupSegRepresentations.map((representation) => representation.segmentationRepresentationUID);
    let segRepresentationUIDsToRemove = segmentationRepresentationUIDs;
    if (segRepresentationUIDsToRemove) {
        const invalidSegRepresentationUIDs = segmentationRepresentationUIDs.filter((segRepresentationUID) => !toolGroupSegRepresentationUIDs.includes(segRepresentationUID));
        if (invalidSegRepresentationUIDs.length > 0) {
            throw new Error(`The following segmentationRepresentationUIDs are not part of the toolGroup: ${JSON.stringify(invalidSegRepresentationUIDs)}`);
        }
    }
    else {
        segRepresentationUIDsToRemove = toolGroupSegRepresentationUIDs;
    }
    segRepresentationUIDsToRemove.forEach((segmentationDataUID) => {
        _removeSegmentation(toolGroupId, segmentationDataUID, immediate);
    });
}
function _removeSegmentation(toolGroupId, segmentationRepresentationUID, immediate) {
    const segmentationRepresentation = (0,_segmentationState__WEBPACK_IMPORTED_MODULE_3__.getSegmentationRepresentationByUID)(toolGroupId, segmentationRepresentationUID);
    const { type } = segmentationRepresentation;
    if (type === _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_0__["default"].Labelmap) {
        _tools_displayTools_Labelmap__WEBPACK_IMPORTED_MODULE_1__.labelmapDisplay.removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID, immediate);
    }
    else if (type === _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_0__["default"].Contour) {
        _tools_displayTools_Contour__WEBPACK_IMPORTED_MODULE_2__.contourDisplay.removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID, immediate);
    }
    else {
        throw new Error(`The representation ${type} is not supported yet`);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (removeSegmentationsFromToolGroup);
//# sourceMappingURL=removeSegmentationsFromToolGroup.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getActiveSegmentIndex: () => (/* binding */ getActiveSegmentIndex),
/* harmony export */   setActiveSegmentIndex: () => (/* binding */ setActiveSegmentIndex)
/* harmony export */ });
/* harmony import */ var _segmentationState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");
/* harmony import */ var _triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");


function setActiveSegmentIndex(segmentationId, segmentIndex) {
    const segmentation = (0,_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getSegmentation)(segmentationId);
    if (segmentation?.activeSegmentIndex !== segmentIndex) {
        segmentation.activeSegmentIndex = segmentIndex;
        (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationModified)(segmentationId);
    }
}
function getActiveSegmentIndex(segmentationId) {
    const segmentation = (0,_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getSegmentation)(segmentationId);
    if (segmentation) {
        return segmentation.activeSegmentIndex;
    }
}

//# sourceMappingURL=segmentIndex.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js":
/*!**********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getLockedSegments: () => (/* binding */ getLockedSegments),
/* harmony export */   isSegmentIndexLocked: () => (/* binding */ isSegmentIndexLocked),
/* harmony export */   setSegmentIndexLocked: () => (/* binding */ setSegmentIndexLocked)
/* harmony export */ });
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");
/* harmony import */ var _triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");


function isSegmentIndexLocked(segmentationId, segmentIndex) {
    const segmentation = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getSegmentation)(segmentationId);
    if (!segmentation) {
        throw new Error(`No segmentation state found for ${segmentationId}`);
    }
    const { segmentsLocked } = segmentation;
    return segmentsLocked.has(segmentIndex);
}
function setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {
    const segmentation = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getSegmentation)(segmentationId);
    if (!segmentation) {
        throw new Error(`No segmentation state found for ${segmentationId}`);
    }
    const { segmentsLocked } = segmentation;
    if (locked) {
        segmentsLocked.add(segmentIndex);
    }
    else {
        segmentsLocked.delete(segmentIndex);
    }
    (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationModified)(segmentationId);
}
function getLockedSegments(segmentationId) {
    const segmentation = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_0__.getSegmentation)(segmentationId);
    if (!segmentation) {
        throw new Error(`No segmentation state found for ${segmentationId}`);
    }
    const { segmentsLocked } = segmentation;
    return Array.from(segmentsLocked);
}

//# sourceMappingURL=segmentLocking.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addColorLUT: () => (/* binding */ addColorLUT),
/* harmony export */   addSegmentation: () => (/* binding */ addSegmentation),
/* harmony export */   addSegmentationRepresentation: () => (/* binding */ addSegmentationRepresentation),
/* harmony export */   getColorLUT: () => (/* binding */ getColorLUT),
/* harmony export */   getDefaultSegmentationStateManager: () => (/* binding */ getDefaultSegmentationStateManager),
/* harmony export */   getGlobalConfig: () => (/* binding */ getGlobalConfig),
/* harmony export */   getSegmentSpecificRepresentationConfig: () => (/* binding */ getSegmentSpecificRepresentationConfig),
/* harmony export */   getSegmentation: () => (/* binding */ getSegmentation),
/* harmony export */   getSegmentationRepresentationByUID: () => (/* binding */ getSegmentationRepresentationByUID),
/* harmony export */   getSegmentationRepresentationSpecificConfig: () => (/* binding */ getSegmentationRepresentationSpecificConfig),
/* harmony export */   getSegmentationRepresentations: () => (/* binding */ getSegmentationRepresentations),
/* harmony export */   getSegmentations: () => (/* binding */ getSegmentations),
/* harmony export */   getToolGroupIdsWithSegmentation: () => (/* binding */ getToolGroupIdsWithSegmentation),
/* harmony export */   getToolGroupSpecificConfig: () => (/* binding */ getToolGroupSpecificConfig),
/* harmony export */   removeColorLUT: () => (/* binding */ removeColorLUT),
/* harmony export */   removeSegmentation: () => (/* binding */ removeSegmentation),
/* harmony export */   removeSegmentationRepresentation: () => (/* binding */ removeSegmentationRepresentation),
/* harmony export */   setGlobalConfig: () => (/* binding */ setGlobalConfig),
/* harmony export */   setSegmentSpecificRepresentationConfig: () => (/* binding */ setSegmentSpecificRepresentationConfig),
/* harmony export */   setSegmentationRepresentationSpecificConfig: () => (/* binding */ setSegmentationRepresentationSpecificConfig),
/* harmony export */   setToolGroupSpecificConfig: () => (/* binding */ setToolGroupSpecificConfig)
/* harmony export */ });
/* harmony import */ var _SegmentationStateManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SegmentationStateManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js");
/* harmony import */ var _triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");
/* harmony import */ var _helpers_normalizeSegmentationInput__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/normalizeSegmentationInput */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js");



function getDefaultSegmentationStateManager() {
    return _SegmentationStateManager__WEBPACK_IMPORTED_MODULE_0__.defaultSegmentationStateManager;
}
function getSegmentation(segmentationId) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    return segmentationStateManager.getSegmentation(segmentationId);
}
function getSegmentations() {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    const state = segmentationStateManager.getState();
    return state.segmentations;
}
function addSegmentation(segmentationInput, suppressEvents) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    const segmentation = (0,_helpers_normalizeSegmentationInput__WEBPACK_IMPORTED_MODULE_2__["default"])(segmentationInput);
    segmentationStateManager.addSegmentation(segmentation);
    if (!suppressEvents) {
        (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationModified)(segmentation.segmentationId);
    }
}
function getSegmentationRepresentations(toolGroupId) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    return segmentationStateManager.getSegmentationRepresentations(toolGroupId);
}
function getToolGroupIdsWithSegmentation(segmentationId) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    const state = segmentationStateManager.getState();
    const toolGroupIds = Object.keys(state.toolGroups);
    const foundToolGroupIds = [];
    toolGroupIds.forEach((toolGroupId) => {
        const toolGroupSegmentationRepresentations = segmentationStateManager.getSegmentationRepresentations(toolGroupId);
        toolGroupSegmentationRepresentations.forEach((representation) => {
            if (representation.segmentationId === segmentationId) {
                foundToolGroupIds.push(toolGroupId);
            }
        });
    });
    return foundToolGroupIds;
}
function getToolGroupSpecificConfig(toolGroupId) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    return segmentationStateManager.getToolGroupSpecificConfig(toolGroupId);
}
function setToolGroupSpecificConfig(toolGroupId, config, suppressEvents) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    segmentationStateManager.setSegmentationRepresentationConfig(toolGroupId, config);
    if (!suppressEvents) {
        (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationRepresentationModified)(toolGroupId);
    }
}
function setSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID, config, suppressEvents = false) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    segmentationStateManager.setSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID, config);
    if (!suppressEvents) {
        (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationRepresentationModified)(toolGroupId, segmentationRepresentationUID);
    }
}
function getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    return segmentationStateManager.getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID);
}
function getSegmentSpecificRepresentationConfig(toolGroupId, segmentationRepresentationUID, segmentIndex) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    return segmentationStateManager.getSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, segmentIndex);
}
function setSegmentSpecificRepresentationConfig(toolGroupId, segmentationRepresentationUID, config, suppressEvents = false) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    segmentationStateManager.setSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, config);
    if (!suppressEvents) {
        (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationRepresentationModified)(toolGroupId, segmentationRepresentationUID);
    }
}
function addSegmentationRepresentation(toolGroupId, segmentationRepresentation, suppressEvents) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    segmentationStateManager.addSegmentationRepresentation(toolGroupId, segmentationRepresentation);
    if (!suppressEvents) {
        (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationRepresentationModified)(toolGroupId, segmentationRepresentation.segmentationRepresentationUID);
    }
}
function getGlobalConfig() {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    return segmentationStateManager.getGlobalConfig();
}
function setGlobalConfig(config, suppressEvents) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    segmentationStateManager.setGlobalConfig(config);
    if (!suppressEvents) {
        (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationModified)();
    }
}
function getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    return segmentationStateManager.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);
}
function removeSegmentation(segmentationId) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    segmentationStateManager.removeSegmentation(segmentationId);
    (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationRemoved)(segmentationId);
}
function removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    segmentationStateManager.removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID);
    (0,_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationRepresentationRemoved)(toolGroupId, segmentationRepresentationUID);
}
function removeColorLUT(colorLUTIndex) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    segmentationStateManager.removeColorLUT(colorLUTIndex);
}
function getColorLUT(index) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    return segmentationStateManager.getColorLUT(index);
}
function addColorLUT(colorLUT, index) {
    const segmentationStateManager = getDefaultSegmentationStateManager();
    segmentationStateManager.addColorLUT(colorLUT, index);
}

//# sourceMappingURL=segmentationState.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   triggerSegmentationDataModified: () => (/* binding */ triggerSegmentationDataModified),
/* harmony export */   triggerSegmentationModified: () => (/* binding */ triggerSegmentationModified),
/* harmony export */   triggerSegmentationRemoved: () => (/* binding */ triggerSegmentationRemoved),
/* harmony export */   triggerSegmentationRepresentationModified: () => (/* binding */ triggerSegmentationRepresentationModified),
/* harmony export */   triggerSegmentationRepresentationRemoved: () => (/* binding */ triggerSegmentationRepresentationRemoved)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");



function triggerSegmentationRemoved(segmentationId) {
    const eventDetail = {
        segmentationId,
    };
    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, _enums__WEBPACK_IMPORTED_MODULE_1__.Events.SEGMENTATION_REMOVED, eventDetail);
}
function triggerSegmentationRepresentationRemoved(toolGroupId, segmentationRepresentationUID) {
    const eventDetail = {
        toolGroupId,
        segmentationRepresentationUID,
    };
    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, _enums__WEBPACK_IMPORTED_MODULE_1__.Events.SEGMENTATION_REPRESENTATION_REMOVED, eventDetail);
}
function triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentationUID) {
    const eventDetail = {
        toolGroupId,
        segmentationRepresentationUID,
    };
    if (segmentationRepresentationUID) {
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, _enums__WEBPACK_IMPORTED_MODULE_1__.Events.SEGMENTATION_REPRESENTATION_MODIFIED, eventDetail);
        return;
    }
    const segmentationRepresentations = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_2__.getSegmentationRepresentations)(toolGroupId) || [];
    segmentationRepresentations.forEach((segmentationRepresentation) => {
        const { segmentationRepresentationUID } = segmentationRepresentation;
        const eventDetail = {
            toolGroupId,
            segmentationRepresentationUID,
        };
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, _enums__WEBPACK_IMPORTED_MODULE_1__.Events.SEGMENTATION_REPRESENTATION_MODIFIED, eventDetail);
    });
}
function triggerSegmentationModified(segmentationId) {
    let segmentationIds;
    if (segmentationId) {
        segmentationIds = [segmentationId];
    }
    else {
        segmentationIds = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_2__.getSegmentations)().map(({ segmentationId }) => segmentationId);
    }
    segmentationIds.forEach((segmentationId) => {
        const eventDetail = {
            segmentationId,
        };
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, _enums__WEBPACK_IMPORTED_MODULE_1__.Events.SEGMENTATION_MODIFIED, eventDetail);
    });
}
function triggerSegmentationDataModified(segmentationId, modifiedSlicesToUse) {
    const eventDetail = {
        segmentationId,
        modifiedSlicesToUse,
    };
    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, _enums__WEBPACK_IMPORTED_MODULE_1__.Events.SEGMENTATION_DATA_MODIFIED, eventDetail);
}

//# sourceMappingURL=triggerSegmentationEvents.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/Synchronizer.js":
/*!*****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/Synchronizer.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

class Synchronizer {
    constructor(synchronizerId, eventName, eventHandler) {
        this._viewportOptions = {};
        this._onEvent = (evt) => {
            if (this._ignoreFiredEvents === true) {
                return;
            }
            if (!this._targetViewports.length) {
                return;
            }
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(evt.currentTarget);
            if (!enabledElement) {
                return;
            }
            const { renderingEngineId, viewportId } = enabledElement;
            if (!this._sourceViewports.find((s) => s.viewportId === viewportId)) {
                return;
            }
            this.fireEvent({
                renderingEngineId,
                viewportId,
            }, evt);
        };
        this._enabled = true;
        this._eventName = eventName;
        this._eventHandler = eventHandler;
        this._ignoreFiredEvents = false;
        this._sourceViewports = [];
        this._targetViewports = [];
        this.id = synchronizerId;
    }
    isDisabled() {
        return !this._enabled || !this._hasSourceElements();
    }
    setOptions(viewportId, options = {}) {
        this._viewportOptions[viewportId] = options;
    }
    getOptions(viewportId) {
        return this._viewportOptions[viewportId];
    }
    add(viewportInfo) {
        this.addTarget(viewportInfo);
        this.addSource(viewportInfo);
    }
    addSource(viewportInfo) {
        if (_containsViewport(this._sourceViewports, viewportInfo)) {
            return;
        }
        const { renderingEngineId, viewportId } = viewportInfo;
        const { element } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getRenderingEngine)(renderingEngineId).getViewport(viewportId);
        element.addEventListener(this._eventName, this._onEvent.bind(this));
        this._updateDisableHandlers();
        this._sourceViewports.push(viewportInfo);
    }
    addTarget(viewportInfo) {
        if (_containsViewport(this._targetViewports, viewportInfo)) {
            return;
        }
        this._targetViewports.push(viewportInfo);
        this._updateDisableHandlers();
    }
    getSourceViewports() {
        return this._sourceViewports;
    }
    getTargetViewports() {
        return this._targetViewports;
    }
    destroy() {
        this._sourceViewports.forEach((s) => this.removeSource(s));
        this._targetViewports.forEach((t) => this.removeTarget(t));
    }
    remove(viewportInfo) {
        this.removeTarget(viewportInfo);
        this.removeSource(viewportInfo);
    }
    removeSource(viewportInfo) {
        const index = _getViewportIndex(this._sourceViewports, viewportInfo);
        if (index === -1) {
            return;
        }
        const element = _getViewportElement(viewportInfo);
        this._sourceViewports.splice(index, 1);
        element.removeEventListener(this._eventName, this._eventHandler);
        this._updateDisableHandlers();
    }
    removeTarget(viewportInfo) {
        const index = _getViewportIndex(this._targetViewports, viewportInfo);
        if (index === -1) {
            return;
        }
        this._targetViewports.splice(index, 1);
        this._updateDisableHandlers();
    }
    hasSourceViewport(renderingEngineId, viewportId) {
        return _containsViewport(this._sourceViewports, {
            renderingEngineId,
            viewportId,
        });
    }
    hasTargetViewport(renderingEngineId, viewportId) {
        return _containsViewport(this._targetViewports, {
            renderingEngineId,
            viewportId,
        });
    }
    fireEvent(sourceViewport, sourceEvent) {
        if (this.isDisabled() || this._ignoreFiredEvents) {
            return;
        }
        this._ignoreFiredEvents = true;
        try {
            for (let i = 0; i < this._targetViewports.length; i++) {
                const targetViewport = this._targetViewports[i];
                const targetIsSource = sourceViewport.viewportId === targetViewport.viewportId;
                if (targetIsSource) {
                    continue;
                }
                this._eventHandler(this, sourceViewport, targetViewport, sourceEvent);
            }
        }
        catch (ex) {
            console.warn(`Synchronizer, for: ${this._eventName}`, ex);
        }
        finally {
            this._ignoreFiredEvents = false;
        }
    }
    _hasSourceElements() {
        return this._sourceViewports.length !== 0;
    }
    _updateDisableHandlers() {
        const viewports = _getUniqueViewports(this._sourceViewports, this._targetViewports);
        const _remove = this.remove;
        const disableHandler = (elementDisabledEvent) => {
            _remove(elementDisabledEvent.detail.element);
        };
        viewports.forEach(function (vUid) {
            const renderingEngine = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getRenderingEngine)(vUid.renderingEngineId).getViewport(vUid.viewportId);
            if (!renderingEngine) {
                return;
            }
            const { element } = renderingEngine;
            element.removeEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.ELEMENT_DISABLED, disableHandler);
            element.addEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.ELEMENT_DISABLED, disableHandler);
        });
    }
}
function _getUniqueViewports(vp1, vp2) {
    const unique = [];
    const vps = vp1.concat(vp2);
    for (let i = 0; i < vps.length; i++) {
        const vp = vps[i];
        if (!unique.some((u) => vp.renderingEngineId === u.renderingEngineId &&
            vp.viewportId === u.viewportId)) {
            unique.push(vp);
        }
    }
    return unique;
}
function _getViewportIndex(arr, vp) {
    return arr.findIndex((ar) => vp.renderingEngineId === ar.renderingEngineId &&
        vp.viewportId === ar.viewportId);
}
function _containsViewport(arr, vp) {
    return arr.some((ar) => ar.renderingEngineId === vp.renderingEngineId &&
        ar.viewportId === vp.viewportId);
}
function _getViewportElement(vp) {
    const renderingEngine = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getRenderingEngine)(vp.renderingEngineId);
    if (!renderingEngine) {
        throw new Error(`No RenderingEngine for Id: ${vp.renderingEngineId}`);
    }
    return renderingEngine.getViewport(vp.viewportId).element;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Synchronizer);
//# sourceMappingURL=Synchronizer.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/createSynchronizer.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/createSynchronizer.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _Synchronizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Synchronizer */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/Synchronizer.js");


function createSynchronizer(synchronizerId, eventName, eventHandler) {
    const synchronizerWithSameIdExists = _index__WEBPACK_IMPORTED_MODULE_0__.state.synchronizers.some((sync) => sync.id === synchronizerId);
    if (synchronizerWithSameIdExists) {
        throw new Error(`Synchronizer with id '${synchronizerId}' already exists.`);
    }
    const synchronizer = new _Synchronizer__WEBPACK_IMPORTED_MODULE_1__["default"](synchronizerId, eventName, eventHandler);
    _index__WEBPACK_IMPORTED_MODULE_0__.state.synchronizers.push(synchronizer);
    return synchronizer;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createSynchronizer);
//# sourceMappingURL=createSynchronizer.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroy.js":
/*!************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroy.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");

function destroy() {
    while (_index__WEBPACK_IMPORTED_MODULE_0__.state.synchronizers.length > 0) {
        const synchronizer = _index__WEBPACK_IMPORTED_MODULE_0__.state.synchronizers.pop();
        synchronizer.destroy();
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (destroy);
//# sourceMappingURL=destroy.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroySynchronizer.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroySynchronizer.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");

function destroySynchronizer(synchronizerId) {
    const synchronizerIndex = _index__WEBPACK_IMPORTED_MODULE_0__.state.synchronizers.findIndex((sync) => sync.id === synchronizerId);
    if (synchronizerIndex > -1) {
        const synchronizer = _index__WEBPACK_IMPORTED_MODULE_0__.state.synchronizers[synchronizerIndex];
        synchronizer.destroy();
        _index__WEBPACK_IMPORTED_MODULE_0__.state.synchronizers.splice(synchronizerIndex, 1);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (destroySynchronizer);
//# sourceMappingURL=destroySynchronizer.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getAllSynchronizers.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getAllSynchronizers.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");

function getAllSynchronizers() {
    return _index__WEBPACK_IMPORTED_MODULE_0__.state.synchronizers;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getAllSynchronizers);
//# sourceMappingURL=getAllSynchronizers.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizer.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizer.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");

function getSynchronizer(synchronizerId) {
    return _index__WEBPACK_IMPORTED_MODULE_0__.state.synchronizers.find((s) => s.id === synchronizerId);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getSynchronizer);
//# sourceMappingURL=getSynchronizer.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizersForViewport.js":
/*!********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizersForViewport.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");

function getSynchronizersForViewport(viewportId, renderingEngineId) {
    const synchronizersFilteredByIds = [];
    if (!renderingEngineId && !viewportId) {
        throw new Error('At least one of renderingEngineId or viewportId should be given');
    }
    for (let i = 0; i < _index__WEBPACK_IMPORTED_MODULE_0__.state.synchronizers.length; i++) {
        const synchronizer = _index__WEBPACK_IMPORTED_MODULE_0__.state.synchronizers[i];
        const notDisabled = !synchronizer.isDisabled();
        const hasSourceViewport = synchronizer.hasSourceViewport(renderingEngineId, viewportId);
        const hasTargetViewport = synchronizer.hasTargetViewport(renderingEngineId, viewportId);
        if (notDisabled && (hasSourceViewport || hasTargetViewport)) {
            synchronizersFilteredByIds.push(synchronizer);
        }
    }
    return synchronizersFilteredByIds;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getSynchronizersForViewport);
//# sourceMappingURL=getSynchronizersForViewport.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/index.js":
/*!**********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSynchronizer: () => (/* reexport safe */ _createSynchronizer__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   destroy: () => (/* reexport safe */ _destroy__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   destroySynchronizer: () => (/* reexport safe */ _destroySynchronizer__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   getAllSynchronizers: () => (/* reexport safe */ _getAllSynchronizers__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   getSynchronizer: () => (/* reexport safe */ _getSynchronizer__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   getSynchronizersForViewport: () => (/* reexport safe */ _getSynchronizersForViewport__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _createSynchronizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createSynchronizer */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/createSynchronizer.js");
/* harmony import */ var _destroy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./destroy */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroy.js");
/* harmony import */ var _getSynchronizersForViewport__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getSynchronizersForViewport */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizersForViewport.js");
/* harmony import */ var _getSynchronizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getSynchronizer */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizer.js");
/* harmony import */ var _getAllSynchronizers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getAllSynchronizers */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getAllSynchronizers.js");
/* harmony import */ var _destroySynchronizer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./destroySynchronizer */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/destroySynchronizer.js");







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/ToolGroup.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/ToolGroup.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ToolGroup)
/* harmony export */ });
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.clonedeep */ "../../../node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash.get */ "../../../node_modules/lodash.get/index.js");
/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _cursors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../cursors */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");







const { Active, Passive, Enabled, Disabled } = _enums__WEBPACK_IMPORTED_MODULE_0__.ToolModes;
class ToolGroup {
    constructor(id) {
        this.viewportsInfo = [];
        this.toolOptions = {};
        this._toolInstances = {};
        this.id = id;
    }
    getViewportIds() {
        return this.viewportsInfo.map(({ viewportId }) => viewportId);
    }
    getViewportsInfo() {
        return this.viewportsInfo.slice();
    }
    getToolInstance(toolInstanceName) {
        const toolInstance = this._toolInstances[toolInstanceName];
        if (!toolInstance) {
            console.warn(`'${toolInstanceName}' is not registered with this toolGroup.`);
            return;
        }
        return toolInstance;
    }
    addTool(toolName, configuration = {}) {
        const toolDefinition = _index__WEBPACK_IMPORTED_MODULE_4__.state.tools[toolName];
        const hasToolName = typeof toolName !== 'undefined' && toolName !== '';
        const localToolInstance = this.toolOptions[toolName];
        if (!hasToolName) {
            console.warn('Tool with configuration did not produce a toolName: ', configuration);
            return;
        }
        if (!toolDefinition) {
            console.warn(`'${toolName}' is not registered with the library. You need to use cornerstoneTools.addTool to register it.`);
            return;
        }
        if (localToolInstance) {
            console.warn(`'${toolName}' is already registered for ToolGroup ${this.id}.`);
            return;
        }
        const { toolClass: ToolClass } = toolDefinition;
        const toolProps = {
            name: toolName,
            toolGroupId: this.id,
            configuration,
        };
        const instantiatedTool = new ToolClass(toolProps);
        this._toolInstances[toolName] = instantiatedTool;
    }
    addToolInstance(toolName, parentClassName, configuration = {}) {
        let ToolClassToUse = _index__WEBPACK_IMPORTED_MODULE_4__.state.tools[toolName]
            ?.toolClass;
        if (!ToolClassToUse) {
            const ParentClass = _index__WEBPACK_IMPORTED_MODULE_4__.state.tools[parentClassName]
                .toolClass;
            class ToolInstance extends ParentClass {
            }
            ToolInstance.toolName = toolName;
            ToolClassToUse = ToolInstance;
            _index__WEBPACK_IMPORTED_MODULE_4__.state.tools[toolName] = {
                toolClass: ToolInstance,
            };
        }
        this.addTool(ToolClassToUse.toolName, configuration);
    }
    addViewport(viewportId, renderingEngineId) {
        const renderingEngines = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_3__.getRenderingEngines)();
        if (!renderingEngineId && renderingEngines.length > 1) {
            throw new Error('You must specify a renderingEngineId when there are multiple rendering engines.');
        }
        const renderingEngineUIDToUse = renderingEngineId || renderingEngines[0].id;
        if (!this.viewportsInfo.some(({ viewportId: vpId }) => vpId === viewportId)) {
            this.viewportsInfo.push({
                viewportId,
                renderingEngineId: renderingEngineUIDToUse,
            });
        }
        const toolName = this.getActivePrimaryMouseButtonTool();
        const runtimeSettings = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_3__.Settings.getRuntimeSettings();
        if (runtimeSettings.get('useCursors')) {
            this.setViewportsCursorByToolName(toolName);
        }
    }
    removeViewports(renderingEngineId, viewportId) {
        const indices = [];
        this.viewportsInfo.forEach((vpInfo, index) => {
            let match = false;
            if (vpInfo.renderingEngineId === renderingEngineId) {
                match = true;
                if (viewportId && vpInfo.viewportId !== viewportId) {
                    match = false;
                }
            }
            if (match) {
                indices.push(index);
            }
        });
        if (indices.length) {
            for (let i = indices.length - 1; i >= 0; i--) {
                this.viewportsInfo.splice(indices[i], 1);
            }
        }
    }
    setActiveStrategy(toolName, strategyName) {
        const toolInstance = this._toolInstances[toolName];
        if (toolInstance === undefined) {
            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool configuration.`);
            return;
        }
        toolInstance.setActiveStrategy(strategyName);
    }
    setToolMode(toolName, mode, options = {}) {
        if (!toolName) {
            console.warn('setToolMode: toolName must be defined');
            return;
        }
        if (mode === _enums__WEBPACK_IMPORTED_MODULE_0__.ToolModes.Active) {
            this.setToolActive(toolName, options);
            return;
        }
        if (mode === _enums__WEBPACK_IMPORTED_MODULE_0__.ToolModes.Passive) {
            this.setToolPassive(toolName);
            return;
        }
        if (mode === _enums__WEBPACK_IMPORTED_MODULE_0__.ToolModes.Enabled) {
            this.setToolEnabled(toolName);
            return;
        }
        if (mode === _enums__WEBPACK_IMPORTED_MODULE_0__.ToolModes.Disabled) {
            this.setToolDisabled(toolName);
            return;
        }
        console.warn('setToolMode: mode must be defined');
    }
    setToolActive(toolName, toolBindingsOptions = {}) {
        const toolInstance = this._toolInstances[toolName];
        if (toolInstance === undefined) {
            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);
            return;
        }
        if (!toolInstance) {
            console.warn(`'${toolName}' instance ${toolInstance} is not registered with this toolGroup, can't set tool mode.`);
            return;
        }
        const prevBindings = this.toolOptions[toolName]
            ? this.toolOptions[toolName].bindings
            : [];
        const newBindings = toolBindingsOptions.bindings
            ? toolBindingsOptions.bindings
            : [];
        const bindingsToUse = [...prevBindings, ...newBindings].reduce((unique, binding) => {
            const TouchBinding = binding.numTouchPoints !== undefined;
            const MouseBinding = binding.mouseButton !== undefined;
            if (!unique.some((obj) => hasSameBinding(obj, binding)) &&
                (TouchBinding || MouseBinding)) {
                unique.push(binding);
            }
            return unique;
        }, []);
        const toolOptions = {
            bindings: bindingsToUse,
            mode: Active,
        };
        this.toolOptions[toolName] = toolOptions;
        this._toolInstances[toolName].mode = Active;
        const runtimeSettings = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_3__.Settings.getRuntimeSettings();
        const useCursor = runtimeSettings.get('useCursors');
        if (this._hasMousePrimaryButtonBinding(toolBindingsOptions) && useCursor) {
            this.setViewportsCursorByToolName(toolName);
        }
        else {
            const activeToolIdentifier = this.getActivePrimaryMouseButtonTool();
            if (!activeToolIdentifier && useCursor) {
                const cursor = _cursors__WEBPACK_IMPORTED_MODULE_5__.MouseCursor.getDefinedCursor('default');
                this._setCursorForViewports(cursor);
            }
        }
        if (typeof toolInstance.onSetToolActive === 'function') {
            toolInstance.onSetToolActive();
        }
        this._renderViewports();
    }
    setToolPassive(toolName) {
        const toolInstance = this._toolInstances[toolName];
        if (toolInstance === undefined) {
            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);
            return;
        }
        const prevToolOptions = this.getToolOptions(toolName);
        const toolOptions = Object.assign({
            bindings: prevToolOptions ? prevToolOptions.bindings : [],
        }, prevToolOptions, {
            mode: Passive,
        });
        const defaultMousePrimary = this.getDefaultMousePrimary();
        toolOptions.bindings = toolOptions.bindings.filter((binding) => binding.mouseButton !== defaultMousePrimary || binding.modifierKey);
        let mode = Passive;
        if (toolOptions.bindings.length !== 0) {
            mode = Active;
            toolOptions.mode = mode;
        }
        this.toolOptions[toolName] = toolOptions;
        toolInstance.mode = mode;
        if (typeof toolInstance.onSetToolPassive === 'function') {
            toolInstance.onSetToolPassive();
        }
        this._renderViewports();
    }
    setToolEnabled(toolName) {
        const toolInstance = this._toolInstances[toolName];
        if (toolInstance === undefined) {
            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);
            return;
        }
        const toolOptions = {
            bindings: [],
            mode: Enabled,
        };
        this.toolOptions[toolName] = toolOptions;
        toolInstance.mode = Enabled;
        if (typeof toolInstance.onSetToolEnabled === 'function') {
            toolInstance.onSetToolEnabled();
        }
        this._renderViewports();
    }
    setToolDisabled(toolName) {
        const toolInstance = this._toolInstances[toolName];
        if (toolInstance === undefined) {
            console.warn(`Tool ${toolName} not added to toolGroup, can't set tool mode.`);
            return;
        }
        const toolOptions = {
            bindings: [],
            mode: Disabled,
        };
        this.toolOptions[toolName] = toolOptions;
        toolInstance.mode = Disabled;
        if (typeof toolInstance.onSetToolDisabled === 'function') {
            toolInstance.onSetToolDisabled();
        }
        this._renderViewports();
    }
    getToolOptions(toolName) {
        const toolOptionsForTool = this.toolOptions[toolName];
        if (toolOptionsForTool === undefined) {
            return;
        }
        return toolOptionsForTool;
    }
    getActivePrimaryMouseButtonTool() {
        return Object.keys(this.toolOptions).find((toolName) => {
            const toolOptions = this.toolOptions[toolName];
            return (toolOptions.mode === Active &&
                this._hasMousePrimaryButtonBinding(toolOptions));
        });
    }
    setViewportsCursorByToolName(toolName, strategyName) {
        const cursor = this._getCursor(toolName, strategyName);
        this._setCursorForViewports(cursor);
    }
    _getCursor(toolName, strategyName) {
        let cursorName;
        let cursor;
        if (strategyName) {
            cursorName = `${toolName}.${strategyName}`;
            cursor = _cursors__WEBPACK_IMPORTED_MODULE_5__.SVGMouseCursor.getDefinedCursor(cursorName, true);
            if (cursor) {
                return cursor;
            }
        }
        cursorName = `${toolName}`;
        cursor = _cursors__WEBPACK_IMPORTED_MODULE_5__.SVGMouseCursor.getDefinedCursor(cursorName, true);
        if (cursor) {
            return cursor;
        }
        cursorName = toolName;
        cursor = _cursors__WEBPACK_IMPORTED_MODULE_5__.SVGMouseCursor.getDefinedCursor(cursorName, true);
        if (cursor) {
            return cursor;
        }
        return _cursors__WEBPACK_IMPORTED_MODULE_5__.MouseCursor.getDefinedCursor('default');
    }
    _setCursorForViewports(cursor) {
        this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_3__.getEnabledElementByIds)(viewportId, renderingEngineId);
            if (!enabledElement) {
                return;
            }
            const { viewport } = enabledElement;
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_6__.initElementCursor)(viewport.element, cursor);
        });
    }
    setToolConfiguration(toolName, configuration, overwrite) {
        if (this._toolInstances[toolName] === undefined) {
            console.warn(`Tool ${toolName} not present, can't set tool configuration.`);
            return false;
        }
        let _configuration;
        if (overwrite) {
            _configuration = configuration;
        }
        else {
            _configuration = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_3__.utilities.deepMerge(this._toolInstances[toolName].configuration, configuration);
        }
        this._toolInstances[toolName].configuration = _configuration;
        this._renderViewports();
        return true;
    }
    getDefaultMousePrimary() {
        return _enums__WEBPACK_IMPORTED_MODULE_0__.MouseBindings.Primary;
    }
    getToolConfiguration(toolName, configurationPath) {
        if (this._toolInstances[toolName] === undefined) {
            console.warn(`Tool ${toolName} not present, can't set tool configuration.`);
            return;
        }
        const _configuration = lodash_get__WEBPACK_IMPORTED_MODULE_2___default()(this._toolInstances[toolName].configuration, configurationPath);
        return lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1___default()(_configuration);
    }
    _hasMousePrimaryButtonBinding(toolOptions) {
        const defaultMousePrimary = this.getDefaultMousePrimary();
        return toolOptions?.bindings?.some((binding) => binding.mouseButton === defaultMousePrimary &&
            binding.modifierKey === undefined);
    }
    _renderViewports() {
        this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {
            (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_3__.getRenderingEngine)(renderingEngineId).renderViewport(viewportId);
        });
    }
}
function hasSameBinding(binding1, binding2) {
    if (binding1.mouseButton !== binding2.mouseButton) {
        return false;
    }
    return binding1.modifierKey === binding2.modifierKey;
}
//# sourceMappingURL=ToolGroup.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/createToolGroup.js":
/*!*****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/createToolGroup.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _ToolGroup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ToolGroup */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/ToolGroup.js");


function createToolGroup(toolGroupId) {
    const toolGroupWithIdExists = _index__WEBPACK_IMPORTED_MODULE_0__.state.toolGroups.some((tg) => tg.id === toolGroupId);
    if (toolGroupWithIdExists) {
        console.warn(`'${toolGroupId}' already exists.`);
        return;
    }
    const toolGroup = new _ToolGroup__WEBPACK_IMPORTED_MODULE_1__["default"](toolGroupId);
    _index__WEBPACK_IMPORTED_MODULE_0__.state.toolGroups.push(toolGroup);
    return toolGroup;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createToolGroup);
//# sourceMappingURL=createToolGroup.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroy.js":
/*!*********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroy.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _destroyToolGroup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./destroyToolGroup */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroyToolGroup.js");


function destroy() {
    const toolGroups = [..._index__WEBPACK_IMPORTED_MODULE_0__.state.toolGroups];
    for (const toolGroup of toolGroups) {
        (0,_destroyToolGroup__WEBPACK_IMPORTED_MODULE_1__["default"])(toolGroup.id);
    }
    _index__WEBPACK_IMPORTED_MODULE_0__.state.toolGroups = [];
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (destroy);
//# sourceMappingURL=destroy.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroyToolGroup.js":
/*!******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroyToolGroup.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../stateManagement/segmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js");
/* harmony import */ var _utilities_segmentation_triggerSegmentationRender__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/segmentation/triggerSegmentationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/triggerSegmentationRender.js");



function destroyToolGroup(toolGroupId) {
    const toolGroupIndex = _index__WEBPACK_IMPORTED_MODULE_0__.state.toolGroups.findIndex((tg) => tg.id === toolGroupId);
    if (toolGroupIndex > -1) {
        _utilities_segmentation_triggerSegmentationRender__WEBPACK_IMPORTED_MODULE_2__.segmentationRenderingEngine.removeToolGroup(toolGroupId);
        (0,_stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_1__.removeSegmentationsFromToolGroup)(toolGroupId);
        _index__WEBPACK_IMPORTED_MODULE_0__.state.toolGroups.splice(toolGroupIndex, 1);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (destroyToolGroup);
//# sourceMappingURL=destroyToolGroup.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getAllToolGroups.js":
/*!******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getAllToolGroups.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");

function getAllToolGroups() {
    return _index__WEBPACK_IMPORTED_MODULE_0__.state.toolGroups;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getAllToolGroups);
//# sourceMappingURL=getAllToolGroups.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroup.js":
/*!**************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroup.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");

function getToolGroup(toolGroupId) {
    return _index__WEBPACK_IMPORTED_MODULE_0__.state.toolGroups.find((s) => s.id === toolGroupId);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getToolGroup);
//# sourceMappingURL=getToolGroup.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupForViewport.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupForViewport.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");

function getToolGroupForViewport(viewportId, renderingEngineId) {
    const toolGroupFilteredByIds = _index__WEBPACK_IMPORTED_MODULE_0__.state.toolGroups.filter((tg) => tg.viewportsInfo.some((vp) => vp.renderingEngineId === renderingEngineId &&
        (!vp.viewportId || vp.viewportId === viewportId)));
    if (!toolGroupFilteredByIds.length) {
        return;
    }
    if (toolGroupFilteredByIds.length > 1) {
        throw new Error(`Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only
      have one tool group per viewport in a renderingEngine.`);
    }
    return toolGroupFilteredByIds[0];
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getToolGroupForViewport);
//# sourceMappingURL=getToolGroupForViewport.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupsWithToolName.js":
/*!***************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupsWithToolName.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");


const MODES = [_enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes.Active, _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes.Passive, _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes.Enabled];
function getToolGroupsWithToolName(toolName) {
    return _index__WEBPACK_IMPORTED_MODULE_0__.state.toolGroups.filter(({ toolOptions }) => {
        const toolGroupToolNames = Object.keys(toolOptions);
        for (let i = 0; i < toolGroupToolNames.length; i++) {
            if (toolName !== toolGroupToolNames[i])
                continue;
            if (!toolOptions[toolName]) {
                continue;
            }
            if (MODES.includes(toolOptions[toolName].mode)) {
                return true;
            }
        }
        return false;
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getToolGroupsWithToolName);
//# sourceMappingURL=getToolGroupsWithToolName.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js":
/*!*******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createToolGroup: () => (/* reexport safe */ _createToolGroup__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   destroy: () => (/* reexport safe */ _destroy__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   destroyToolGroup: () => (/* reexport safe */ _destroyToolGroup__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   getAllToolGroups: () => (/* reexport safe */ _getAllToolGroups__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   getToolGroup: () => (/* reexport safe */ _getToolGroup__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   getToolGroupForViewport: () => (/* reexport safe */ _getToolGroupForViewport__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   getToolGroupsWithToolName: () => (/* reexport safe */ _getToolGroupsWithToolName__WEBPACK_IMPORTED_MODULE_6__["default"])
/* harmony export */ });
/* harmony import */ var _createToolGroup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createToolGroup */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/createToolGroup.js");
/* harmony import */ var _destroyToolGroup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./destroyToolGroup */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroyToolGroup.js");
/* harmony import */ var _destroy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./destroy */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/destroy.js");
/* harmony import */ var _getToolGroup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getToolGroup */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroup.js");
/* harmony import */ var _getToolGroupForViewport__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getToolGroupForViewport */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupForViewport.js");
/* harmony import */ var _getAllToolGroups__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getAllToolGroups */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getAllToolGroups.js");
/* harmony import */ var _getToolGroupsWithToolName__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getToolGroupsWithToolName */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupsWithToolName.js");








//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/addEnabledElement.js":
/*!**************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/addEnabledElement.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ addEnabledElement)
/* harmony export */ });
/* harmony import */ var _eventListeners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../eventListeners */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/index.js");
/* harmony import */ var _eventDispatchers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../eventDispatchers */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/index.js");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/state.js");
/* harmony import */ var _utilities_triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/triggerAnnotationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js");




function addEnabledElement(evt) {
    const { element, viewportId } = evt.detail;
    const svgLayer = _createSvgAnnotationLayer(viewportId);
    _setSvgNodeCache(element);
    _appendChild(svgLayer, element);
    _utilities_triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_3__.annotationRenderingEngine.addViewportElement(viewportId, element);
    _eventListeners__WEBPACK_IMPORTED_MODULE_0__.mouseEventListeners.enable(element);
    _eventListeners__WEBPACK_IMPORTED_MODULE_0__.wheelEventListener.enable(element);
    _eventListeners__WEBPACK_IMPORTED_MODULE_0__.touchEventListeners.enable(element);
    _eventListeners__WEBPACK_IMPORTED_MODULE_0__.keyEventListener.enable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_1__.imageRenderedEventDispatcher.enable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_1__.cameraModifiedEventDispatcher.enable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_1__.imageSpacingCalibratedEventDispatcher.enable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_1__.mouseToolEventDispatcher.enable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_1__.keyboardToolEventDispatcher.enable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_1__.touchToolEventDispatcher.enable(element);
    _state__WEBPACK_IMPORTED_MODULE_2__.state.enabledElements.push(element);
}
function _createSvgAnnotationLayer(viewportId) {
    const svgns = 'http://www.w3.org/2000/svg';
    const svgLayer = document.createElementNS(svgns, 'svg');
    const svgLayerId = `svg-layer-${viewportId}`;
    svgLayer.classList.add('svg-layer');
    svgLayer.setAttribute('id', svgLayerId);
    svgLayer.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
    svgLayer.style.width = '100%';
    svgLayer.style.height = '100%';
    svgLayer.style.pointerEvents = 'none';
    svgLayer.style.position = 'absolute';
    const defs = document.createElementNS(svgns, 'defs');
    const filter = document.createElementNS(svgns, 'filter');
    const feOffset = document.createElementNS(svgns, 'feOffset');
    const feColorMatrix = document.createElementNS(svgns, 'feColorMatrix');
    const feBlend = document.createElementNS(svgns, 'feBlend');
    filter.setAttribute('id', `shadow-${svgLayerId}`);
    filter.setAttribute('filterUnits', 'userSpaceOnUse');
    feOffset.setAttribute('result', 'offOut');
    feOffset.setAttribute('in', 'SourceGraphic');
    feOffset.setAttribute('dx', '0.5');
    feOffset.setAttribute('dy', '0.5');
    feColorMatrix.setAttribute('result', 'matrixOut');
    feColorMatrix.setAttribute('in', 'offOut');
    feColorMatrix.setAttribute('in2', 'matrix');
    feColorMatrix.setAttribute('values', '0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0');
    feBlend.setAttribute('in', 'SourceGraphic');
    feBlend.setAttribute('in2', 'matrixOut');
    feBlend.setAttribute('mode', 'normal');
    filter.appendChild(feOffset);
    filter.appendChild(feColorMatrix);
    filter.appendChild(feBlend);
    defs.appendChild(filter);
    svgLayer.appendChild(defs);
    return svgLayer;
}
function _setSvgNodeCache(element) {
    const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } = element.dataset;
    const elementHash = `${viewportId}:${renderingEngineId}`;
    _state__WEBPACK_IMPORTED_MODULE_2__.state.svgNodeCache[elementHash] = {};
}
function _appendChild(newNode, referenceNode) {
    referenceNode.querySelector('div.viewport-element').appendChild(newNode);
}
//# sourceMappingURL=addEnabledElement.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/addTool.js":
/*!****************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/addTool.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addTool: () => (/* binding */ addTool),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   removeTool: () => (/* binding */ removeTool)
/* harmony export */ });
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/state.js");

function addTool(ToolClass) {
    const toolName = ToolClass.toolName;
    const toolAlreadyAdded = _state__WEBPACK_IMPORTED_MODULE_0__.state.tools[toolName] !== undefined;
    if (!toolName) {
        throw new Error(`No Tool Found for the ToolClass ${ToolClass.name}`);
    }
    if (toolAlreadyAdded) {
        throw new Error(`${toolName} has already been added globally`);
    }
    _state__WEBPACK_IMPORTED_MODULE_0__.state.tools[toolName] = {
        toolClass: ToolClass,
    };
}
function removeTool(ToolClass) {
    const toolName = ToolClass.toolName;
    if (!toolName) {
        throw new Error(`No tool found for: ${ToolClass.name}`);
    }
    if (!_state__WEBPACK_IMPORTED_MODULE_0__.state.tools[toolName] !== undefined) {
        delete _state__WEBPACK_IMPORTED_MODULE_0__.state.tools[toolName];
    }
    else {
        throw new Error(`${toolName} cannot be removed because it has not been added`);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addTool);
//# sourceMappingURL=addTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/cancelActiveManipulations.js":
/*!**********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/cancelActiveManipulations.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ cancelActiveManipulations)
/* harmony export */ });
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _utilities_getToolsWithModesForElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilities/getToolsWithModesForElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getToolsWithModesForElement.js");
/* harmony import */ var _filterToolsWithAnnotationsForElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filterToolsWithAnnotationsForElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithAnnotationsForElement.js");



function cancelActiveManipulations(element) {
    const tools = (0,_utilities_getToolsWithModesForElement__WEBPACK_IMPORTED_MODULE_1__["default"])(element, [
        _enums__WEBPACK_IMPORTED_MODULE_0__.ToolModes.Active,
        _enums__WEBPACK_IMPORTED_MODULE_0__.ToolModes.Passive,
    ]);
    const toolsWithData = (0,_filterToolsWithAnnotationsForElement__WEBPACK_IMPORTED_MODULE_2__["default"])(element, tools);
    for (const { tool } of toolsWithData) {
        const annotationUID = tool.cancel(element);
        if (annotationUID) {
            return annotationUID;
        }
    }
}
//# sourceMappingURL=cancelActiveManipulations.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterMoveableAnnotationTools.js":
/*!**************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterMoveableAnnotationTools.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ filterMoveableAnnotationTools)
/* harmony export */ });
function filterMoveableAnnotationTools(element, ToolAndAnnotations, canvasCoords, interactionType = 'mouse') {
    const proximity = interactionType === 'touch' ? 36 : 6;
    const moveableAnnotationTools = [];
    ToolAndAnnotations.forEach(({ tool, annotations }) => {
        for (const annotation of annotations) {
            if (annotation.isLocked || !annotation.isVisible) {
                continue;
            }
            const near = tool.isPointNearTool(element, annotation, canvasCoords, proximity, interactionType);
            if (near) {
                moveableAnnotationTools.push({
                    tool,
                    annotation,
                });
                break;
            }
        }
    });
    return moveableAnnotationTools;
}
//# sourceMappingURL=filterMoveableAnnotationTools.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithAnnotationsForElement.js":
/*!*********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithAnnotationsForElement.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ filterToolsWithAnnotationsForElement)
/* harmony export */ });
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");

function filterToolsWithAnnotationsForElement(element, tools) {
    const result = [];
    for (let i = 0; i < tools.length; i++) {
        const tool = tools[i];
        if (!tool) {
            console.warn('undefined tool in filterToolsWithAnnotationsForElement');
            continue;
        }
        let annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_0__.getAnnotations)(tool.constructor.toolName, element);
        if (!annotations?.length) {
            continue;
        }
        if (typeof tool.filterInteractableAnnotationsForElement === 'function') {
            annotations = tool.filterInteractableAnnotationsForElement(element, annotations);
        }
        if (annotations.length > 0) {
            result.push({ tool, annotations });
        }
    }
    return result;
}
//# sourceMappingURL=filterToolsWithAnnotationsForElement.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithMoveableHandles.js":
/*!***************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithMoveableHandles.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ filterToolsWithMoveableHandles)
/* harmony export */ });
function filterToolsWithMoveableHandles(element, ToolAndAnnotations, canvasCoords, interactionType = 'mouse') {
    const proximity = interactionType === 'touch' ? 36 : 6;
    const toolsWithMoveableHandles = [];
    ToolAndAnnotations.forEach(({ tool, annotations }) => {
        for (const annotation of annotations) {
            if (annotation.isLocked || !annotation.isVisible) {
                continue;
            }
            const handle = tool.getHandleNearImagePoint(element, annotation, canvasCoords, proximity);
            if (handle) {
                toolsWithMoveableHandles.push({
                    tool,
                    annotation,
                    handle,
                });
                break;
            }
        }
    });
    return toolsWithMoveableHandles;
}
//# sourceMappingURL=filterToolsWithMoveableHandles.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js":
/*!**************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Synchronizer: () => (/* reexport safe */ _SynchronizerManager_Synchronizer__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   SynchronizerManager: () => (/* reexport module object */ _SynchronizerManager__WEBPACK_IMPORTED_MODULE_8__),
/* harmony export */   ToolGroupManager: () => (/* reexport module object */ _ToolGroupManager__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   addEnabledElement: () => (/* reexport safe */ _addEnabledElement__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   addTool: () => (/* reexport safe */ _addTool__WEBPACK_IMPORTED_MODULE_0__.addTool),
/* harmony export */   cancelActiveManipulations: () => (/* reexport safe */ _cancelActiveManipulations__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   removeEnabledElement: () => (/* reexport safe */ _removeEnabledElement__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   removeTool: () => (/* reexport safe */ _addTool__WEBPACK_IMPORTED_MODULE_0__.removeTool),
/* harmony export */   state: () => (/* reexport safe */ _state__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   svgNodeCache: () => (/* reexport safe */ _svgNodeCache__WEBPACK_IMPORTED_MODULE_5__["default"])
/* harmony export */ });
/* harmony import */ var _addTool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/addTool.js");
/* harmony import */ var _addEnabledElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./addEnabledElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/addEnabledElement.js");
/* harmony import */ var _removeEnabledElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./removeEnabledElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/removeEnabledElement.js");
/* harmony import */ var _cancelActiveManipulations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cancelActiveManipulations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/cancelActiveManipulations.js");
/* harmony import */ var _SynchronizerManager_Synchronizer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SynchronizerManager/Synchronizer */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/Synchronizer.js");
/* harmony import */ var _svgNodeCache__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./svgNodeCache */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./state */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/state.js");
/* harmony import */ var _ToolGroupManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");
/* harmony import */ var _SynchronizerManager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SynchronizerManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/index.js");










//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/removeEnabledElement.js":
/*!*****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/removeEnabledElement.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _eventListeners__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../eventListeners */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/index.js");
/* harmony import */ var _eventDispatchers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../eventDispatchers */ "../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/index.js");
/* harmony import */ var _filterToolsWithAnnotationsForElement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filterToolsWithAnnotationsForElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/filterToolsWithAnnotationsForElement.js");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./state */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/state.js");
/* harmony import */ var _utilities_getToolsWithModesForElement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/getToolsWithModesForElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getToolsWithModesForElement.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _stateManagement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../stateManagement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/index.js");
/* harmony import */ var _SynchronizerManager_getSynchronizersForViewport__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SynchronizerManager/getSynchronizersForViewport */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/getSynchronizersForViewport.js");
/* harmony import */ var _ToolGroupManager_getToolGroupForViewport__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ToolGroupManager/getToolGroupForViewport */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupForViewport.js");
/* harmony import */ var _utilities_triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utilities/triggerAnnotationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js");











const VIEWPORT_ELEMENT = 'viewport-element';
function removeEnabledElement(elementDisabledEvt) {
    const { element, viewportId } = elementDisabledEvt.detail;
    _resetSvgNodeCache(element);
    _removeSvgNode(element);
    _utilities_triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_10__.annotationRenderingEngine.removeViewportElement(viewportId, element);
    _eventListeners__WEBPACK_IMPORTED_MODULE_1__.mouseEventListeners.disable(element);
    _eventListeners__WEBPACK_IMPORTED_MODULE_1__.wheelEventListener.disable(element);
    _eventListeners__WEBPACK_IMPORTED_MODULE_1__.touchEventListeners.disable(element);
    _eventListeners__WEBPACK_IMPORTED_MODULE_1__.keyEventListener.disable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_2__.imageRenderedEventDispatcher.disable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_2__.cameraModifiedEventDispatcher.disable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_2__.imageSpacingCalibratedEventDispatcher.disable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_2__.mouseToolEventDispatcher.disable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_2__.keyboardToolEventDispatcher.disable(element);
    _eventDispatchers__WEBPACK_IMPORTED_MODULE_2__.touchToolEventDispatcher.disable(element);
    _removeViewportFromSynchronizers(element);
    _removeViewportFromToolGroup(element);
    _removeEnabledElement(element);
}
const _removeViewportFromSynchronizers = (element) => {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const synchronizers = (0,_SynchronizerManager_getSynchronizersForViewport__WEBPACK_IMPORTED_MODULE_8__["default"])(enabledElement.viewportId, enabledElement.renderingEngineId);
    synchronizers.forEach((sync) => {
        sync.remove(enabledElement);
    });
};
const _removeViewportFromToolGroup = (element) => {
    const { renderingEngineId, viewportId } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const toolGroup = (0,_ToolGroupManager_getToolGroupForViewport__WEBPACK_IMPORTED_MODULE_9__["default"])(viewportId, renderingEngineId);
    if (toolGroup) {
        toolGroup.removeViewports(renderingEngineId, viewportId);
    }
};
const _removeAllToolsForElement = function (element) {
    const tools = (0,_utilities_getToolsWithModesForElement__WEBPACK_IMPORTED_MODULE_5__["default"])(element, [
        _enums__WEBPACK_IMPORTED_MODULE_6__.ToolModes.Active,
        _enums__WEBPACK_IMPORTED_MODULE_6__.ToolModes.Passive,
    ]);
    const toolsWithData = (0,_filterToolsWithAnnotationsForElement__WEBPACK_IMPORTED_MODULE_3__["default"])(element, tools);
    toolsWithData.forEach(({ annotations }) => {
        annotations.forEach((annotation) => {
            (0,_stateManagement__WEBPACK_IMPORTED_MODULE_7__.removeAnnotation)(annotation.annotationUID);
        });
    });
};
function _resetSvgNodeCache(element) {
    const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } = element.dataset;
    const elementHash = `${viewportId}:${renderingEngineId}`;
    delete _state__WEBPACK_IMPORTED_MODULE_4__.state.svgNodeCache[elementHash];
}
function _removeSvgNode(element) {
    const internalViewportNode = element.querySelector(`div.${VIEWPORT_ELEMENT}`);
    const svgLayer = internalViewportNode.querySelector('svg');
    if (svgLayer) {
        internalViewportNode.removeChild(svgLayer);
    }
}
const _removeEnabledElement = function (element) {
    const foundElementIndex = _state__WEBPACK_IMPORTED_MODULE_4__.state.enabledElements.findIndex((el) => el === element);
    if (foundElementIndex > -1) {
        _state__WEBPACK_IMPORTED_MODULE_4__.state.enabledElements.splice(foundElementIndex, 1);
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (removeEnabledElement);
//# sourceMappingURL=removeEnabledElement.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/state.js":
/*!**************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/state.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ state),
/* harmony export */   resetCornerstoneToolsState: () => (/* binding */ resetCornerstoneToolsState),
/* harmony export */   state: () => (/* binding */ state)
/* harmony export */ });
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.clonedeep */ "../../../node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _svgNodeCache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./svgNodeCache */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js");


const defaultState = {
    isInteractingWithTool: false,
    isMultiPartToolActive: false,
    tools: {},
    toolGroups: [],
    synchronizers: [],
    svgNodeCache: _svgNodeCache__WEBPACK_IMPORTED_MODULE_1__["default"],
    enabledElements: [],
    handleRadius: 6,
};
let state = {
    isInteractingWithTool: false,
    isMultiPartToolActive: false,
    tools: {},
    toolGroups: [],
    synchronizers: [],
    svgNodeCache: _svgNodeCache__WEBPACK_IMPORTED_MODULE_1__["default"],
    enabledElements: [],
    handleRadius: 6,
};
function resetCornerstoneToolsState() {
    (0,_svgNodeCache__WEBPACK_IMPORTED_MODULE_1__.resetSvgNodeCache)();
    state = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default()(defaultState);
}

//# sourceMappingURL=state.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js":
/*!*********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   resetSvgNodeCache: () => (/* binding */ resetSvgNodeCache)
/* harmony export */ });
let svgNodeCache = {};
function resetSvgNodeCache() {
    svgNodeCache = {};
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (svgNodeCache);
//# sourceMappingURL=svgNodeCache.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/areViewportsCoplanar .js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/areViewportsCoplanar .js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ areViewportsCoplanar)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");

function areViewportsCoplanar(viewport1, viewport2) {
    const { viewPlaneNormal: viewPlaneNormal1 } = viewport1.getCamera();
    const { viewPlaneNormal: viewPlaneNormal2 } = viewport2.getCamera();
    const dotProducts = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.dot(viewPlaneNormal1, viewPlaneNormal2);
    return Math.abs(dotProducts) > 0.9;
}
//# sourceMappingURL=areViewportsCoplanar%20.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/cameraSyncCallback.js":
/*!*********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/cameraSyncCallback.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ cameraSyncCallback)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function cameraSyncCallback(synchronizerInstance, sourceViewport, targetViewport, cameraModifiedEvent) {
    const { camera } = cameraModifiedEvent.detail;
    const renderingEngine = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getRenderingEngine)(targetViewport.renderingEngineId);
    if (!renderingEngine) {
        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);
    }
    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);
    tViewport.setCamera(camera);
    tViewport.render();
}
//# sourceMappingURL=cameraSyncCallback.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/stackImageSyncCallback.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/stackImageSyncCallback.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ stackImageSyncCallback)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");
/* harmony import */ var _areViewportsCoplanar___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./areViewportsCoplanar  */ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/areViewportsCoplanar .js");




async function stackImageSyncCallback(synchronizerInstance, sourceViewport, targetViewport) {
    const renderingEngine = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getRenderingEngine)(targetViewport.renderingEngineId);
    if (!renderingEngine) {
        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);
    }
    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);
    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);
    const frameOfReferenceUID1 = sViewport.getFrameOfReferenceUID();
    const frameOfReferenceUID2 = tViewport.getFrameOfReferenceUID();
    const imageId1 = sViewport.getCurrentImageId();
    const imagePlaneModule1 = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.metaData.get('imagePlaneModule', imageId1);
    const sourceImagePositionPatient = imagePlaneModule1.imagePositionPatient;
    const targetImageIds = tViewport.getImageIds();
    if (!(0,_areViewportsCoplanar___WEBPACK_IMPORTED_MODULE_3__["default"])(sViewport, tViewport)) {
        return;
    }
    if (frameOfReferenceUID1 === frameOfReferenceUID2) {
        const closestImageIdIndex = _getClosestImageIdIndex(sourceImagePositionPatient, targetImageIds);
        if (closestImageIdIndex.index !== -1 &&
            tViewport.getCurrentImageIdIndex() !== closestImageIdIndex.index) {
            await (0,_utilities__WEBPACK_IMPORTED_MODULE_2__.jumpToSlice)(tViewport.element, {
                imageIndex: closestImageIdIndex.index,
            });
            return;
        }
    }
    else {
        const registrationMatrixMat4 = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.spatialRegistrationMetadataProvider.get('spatialRegistrationModule', [targetViewport.viewportId, sourceViewport.viewportId]);
        if (!registrationMatrixMat4) {
            throw new Error(`No registration matrix found for sourceViewport: ${sourceViewport.viewportId} and targetViewport: ${targetViewport.viewportId}, viewports with different frameOfReferenceUIDs must have a registration matrix in the registrationMetadataProvider. Use calculateViewportsRegistrationMatrix to calculate the matrix.`);
        }
        const targetImagePositionPatientWithRegistrationMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), sourceImagePositionPatient, registrationMatrixMat4);
        const closestImageIdIndex2 = _getClosestImageIdIndex(targetImagePositionPatientWithRegistrationMatrix, targetImageIds);
        if (closestImageIdIndex2.index !== -1 &&
            tViewport.getCurrentImageIdIndex() !== closestImageIdIndex2.index) {
            await (0,_utilities__WEBPACK_IMPORTED_MODULE_2__.jumpToSlice)(tViewport.element, {
                imageIndex: closestImageIdIndex2.index,
            });
        }
    }
}
function _getClosestImageIdIndex(targetPoint, imageIds) {
    return imageIds.reduce((closestImageIdIndex, imageId, index) => {
        const { imagePositionPatient } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.metaData.get('imagePlaneModule', imageId);
        const distance = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.distance(imagePositionPatient, targetPoint);
        if (distance < closestImageIdIndex.distance) {
            return {
                distance,
                index,
            };
        }
        return closestImageIdIndex;
    }, {
        distance: Infinity,
        index: -1,
    });
}
//# sourceMappingURL=stackImageSyncCallback.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/voiSyncCallback.js":
/*!******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/voiSyncCallback.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ voiSyncCallback)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function voiSyncCallback(synchronizerInstance, sourceViewport, targetViewport, voiModifiedEvent) {
    const eventDetail = voiModifiedEvent.detail;
    const { volumeId, range } = eventDetail;
    const renderingEngine = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getRenderingEngine)(targetViewport.renderingEngineId);
    if (!renderingEngine) {
        throw new Error(`Rendering Engine does not exist: ${targetViewport.renderingEngineId}`);
    }
    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);
    if (tViewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.VolumeViewport) {
        tViewport.setProperties({
            voiRange: range,
        }, volumeId);
    }
    else if (tViewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
        tViewport.setProperties({
            voiRange: range,
        });
    }
    else {
        throw new Error('Viewport type not supported.');
    }
    tViewport.render();
}
//# sourceMappingURL=voiSyncCallback.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/zoomPanSyncCallback.js":
/*!**********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/zoomPanSyncCallback.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ zoomPanSyncCallback)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function zoomPanSyncCallback(synchronizerInstance, sourceViewport, targetViewport) {
    const renderingEngine = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getRenderingEngine)(targetViewport.renderingEngineId);
    if (!renderingEngine) {
        throw new Error(`No RenderingEngine for Id: ${targetViewport.renderingEngineId}`);
    }
    const options = synchronizerInstance.getOptions(targetViewport.viewportId);
    const tViewport = renderingEngine.getViewport(targetViewport.viewportId);
    const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);
    if (options?.syncZoom !== false) {
        const srcZoom = sViewport.getZoom();
        tViewport.setZoom(srcZoom);
    }
    if (options?.syncPan !== false) {
        const srcPan = sViewport.getPan();
        tViewport.setPan(srcPan);
    }
    tViewport.render();
}
//# sourceMappingURL=zoomPanSyncCallback.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/index.js":
/*!**********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCameraPositionSynchronizer: () => (/* reexport safe */ _synchronizers_createCameraPositionSynchronizer__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   createStackImageSynchronizer: () => (/* reexport safe */ _synchronizers_createStackImageSynchronizer__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   createVOISynchronizer: () => (/* reexport safe */ _synchronizers_createVOISynchronizer__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   createZoomPanSynchronizer: () => (/* reexport safe */ _synchronizers_createZoomPanSynchronizer__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _synchronizers_createCameraPositionSynchronizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./synchronizers/createCameraPositionSynchronizer */ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js");
/* harmony import */ var _synchronizers_createVOISynchronizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./synchronizers/createVOISynchronizer */ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createVOISynchronizer.js");
/* harmony import */ var _synchronizers_createZoomPanSynchronizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./synchronizers/createZoomPanSynchronizer */ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js");
/* harmony import */ var _synchronizers_createStackImageSynchronizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./synchronizers/createStackImageSynchronizer */ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createStackImageSynchronizer.js");





//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js":
/*!***************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createCameraPositionSynchronizer)
/* harmony export */ });
/* harmony import */ var _store_SynchronizerManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store/SynchronizerManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _callbacks_cameraSyncCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../callbacks/cameraSyncCallback */ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/cameraSyncCallback.js");



const { CAMERA_MODIFIED } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.Enums.Events;
function createCameraPositionSynchronizer(synchronizerName) {
    const cameraPositionSynchronizer = (0,_store_SynchronizerManager__WEBPACK_IMPORTED_MODULE_0__.createSynchronizer)(synchronizerName, CAMERA_MODIFIED, _callbacks_cameraSyncCallback__WEBPACK_IMPORTED_MODULE_2__["default"]);
    return cameraPositionSynchronizer;
}
//# sourceMappingURL=createCameraPositionSynchronizer.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createStackImageSynchronizer.js":
/*!***********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createStackImageSynchronizer.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createStackImageSynchronizer)
/* harmony export */ });
/* harmony import */ var _store_SynchronizerManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store/SynchronizerManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _callbacks_stackImageSyncCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../callbacks/stackImageSyncCallback */ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/stackImageSyncCallback.js");



const { STACK_NEW_IMAGE } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.Enums.Events;
function createStackImageSynchronizer(synchronizerName) {
    const stackImageSynchronizer = (0,_store_SynchronizerManager__WEBPACK_IMPORTED_MODULE_0__.createSynchronizer)(synchronizerName, STACK_NEW_IMAGE, _callbacks_stackImageSyncCallback__WEBPACK_IMPORTED_MODULE_2__["default"]);
    return stackImageSynchronizer;
}
//# sourceMappingURL=createStackImageSynchronizer.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createVOISynchronizer.js":
/*!****************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createVOISynchronizer.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createVOISynchronizer)
/* harmony export */ });
/* harmony import */ var _store_SynchronizerManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store/SynchronizerManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _callbacks_voiSyncCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../callbacks/voiSyncCallback */ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/voiSyncCallback.js");



function createVOISynchronizer(synchronizerName) {
    const VOISynchronizer = (0,_store_SynchronizerManager__WEBPACK_IMPORTED_MODULE_0__.createSynchronizer)(synchronizerName, _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.Enums.Events.VOI_MODIFIED, _callbacks_voiSyncCallback__WEBPACK_IMPORTED_MODULE_2__["default"]);
    return VOISynchronizer;
}
//# sourceMappingURL=createVOISynchronizer.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js":
/*!********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createZoomPanSynchronizer)
/* harmony export */ });
/* harmony import */ var _store_SynchronizerManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store/SynchronizerManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/SynchronizerManager/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _callbacks_zoomPanSyncCallback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../callbacks/zoomPanSyncCallback */ "../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/callbacks/zoomPanSyncCallback.js");



const { CAMERA_MODIFIED } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.Enums.Events;
function createZoomPanSynchronizer(synchronizerName) {
    const zoomPanSynchronizer = (0,_store_SynchronizerManager__WEBPACK_IMPORTED_MODULE_0__.createSynchronizer)(synchronizerName, CAMERA_MODIFIED, _callbacks_zoomPanSyncCallback__WEBPACK_IMPORTED_MODULE_2__["default"]);
    return zoomPanSynchronizer;
}
//# sourceMappingURL=createZoomPanSynchronizer.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js":
/*!***********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @kitware/vtk.js/Common/Core/Math */ "../../../node_modules/@kitware/vtk.js/Common/Core/Math.js");
/* harmony import */ var _kitware_vtk_js_Common_Core_MatrixBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @kitware/vtk.js/Common/Core/MatrixBuilder */ "../../../node_modules/@kitware/vtk.js/Common/Core/MatrixBuilder.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_math_vec2_liangBarksyClip__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utilities/math/vec2/liangBarksyClip */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/liangBarksyClip.js");
/* harmony import */ var _utilities_math_line__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utilities/math/line */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/index.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");

















const { RENDERING_DEFAULTS } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.CONSTANTS;
function defaultReferenceLineColor() {
    return 'rgb(0, 200, 0)';
}
function defaultReferenceLineControllable() {
    return true;
}
function defaultReferenceLineDraggableRotatable() {
    return true;
}
function defaultReferenceLineSlabThicknessControlsOn() {
    return true;
}
const OPERATION = {
    DRAG: 1,
    ROTATE: 2,
    SLAB: 3,
};
const EPSILON = 1e-3;
class CrosshairsTool extends _base__WEBPACK_IMPORTED_MODULE_3__.AnnotationTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse'],
        configuration: {
            shadow: true,
            viewportIndicators: true,
            autoPan: {
                enabled: false,
                panSize: 10,
            },
            referenceLinesCenterGapRadius: 20,
            filterActorUIDsToSetSlabThickness: [],
            slabThicknessBlendMode: _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,
            mobile: {
                enabled: false,
                opacity: 0.8,
                handleRadius: 9,
            },
        },
    }) {
        super(toolProps, defaultToolProps);
        this.toolCenter = [0, 0, 0];
        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElementByIds)(viewportId, renderingEngineId);
            const { FrameOfReferenceUID, viewport } = enabledElement;
            const { element } = viewport;
            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();
            let annotations = this._getAnnotations(enabledElement);
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (annotations.length) {
                (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_6__.removeAnnotation)(annotations[0].annotationUID);
            }
            const annotation = {
                highlighted: false,
                metadata: {
                    cameraPosition: [...position],
                    cameraFocalPoint: [...focalPoint],
                    FrameOfReferenceUID,
                    toolName: this.getToolName(),
                },
                data: {
                    handles: {
                        rotationPoints: [],
                        slabThicknessPoints: [],
                        toolCenter: this.toolCenter,
                    },
                    activeOperation: null,
                    activeViewportIds: [],
                    viewportId,
                },
            };
            (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_6__.addAnnotation)(annotation, element);
            return {
                normal: viewPlaneNormal,
                point: viewport.canvasToWorld([
                    viewport.canvas.clientWidth / 2,
                    viewport.canvas.clientHeight / 2,
                ]),
            };
        };
        this._getViewportsInfo = () => {
            const viewports = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_5__.getToolGroup)(this.toolGroupId).viewportsInfo;
            return viewports;
        };
        this.computeToolCenter = (viewportsInfo) => {
            if (!viewportsInfo.length || viewportsInfo.length === 1) {
                throw new Error('For crosshairs to operate, at least two viewports must be given.');
            }
            const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;
            const { normal: normal1, point: point1 } = this.initializeViewport(firstViewport);
            const { normal: normal2, point: point2 } = this.initializeViewport(secondViewport);
            let normal3 = [0, 0, 0];
            let point3 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create();
            if (thirdViewport) {
                ({ normal: normal3, point: point3 } =
                    this.initializeViewport(thirdViewport));
            }
            else {
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.add(point3, point1, point2);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.scale(point3, point3, 0.5);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.cross(normal3, normal1, normal2);
            }
            const firstPlane = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.planar.planeEquation(normal1, point1);
            const secondPlane = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.planar.planeEquation(normal2, point2);
            const thirdPlane = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.planar.planeEquation(normal3, point3);
            this.toolCenter = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane);
            const { renderingEngine } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElementByIds)(viewportsInfo[0].viewportId, viewportsInfo[0].renderingEngineId);
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_15__["default"])(renderingEngine, viewportsInfo.map(({ viewportId }) => viewportId));
        };
        this.addNewAnnotation = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { currentPoints } = eventDetail;
            const jumpWorld = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            this._jump(enabledElement, jumpWorld);
            const annotations = this._getAnnotations(enabledElement);
            const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);
            const { data } = filteredAnnotations[0];
            const { rotationPoints } = data.handles;
            const viewportIdArray = [];
            for (let i = 0; i < rotationPoints.length - 1; ++i) {
                const otherViewport = rotationPoints[i][1];
                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
                if (!viewportControllable || !viewportDraggableRotatable) {
                    continue;
                }
                viewportIdArray.push(otherViewport.id);
                i++;
            }
            data.activeViewportIds = [...viewportIdArray];
            data.handles.activeOperation = OPERATION.DRAG;
            evt.preventDefault();
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_11__.hideElementCursor)(element);
            this._activateModify(element);
            return filteredAnnotations[0];
        };
        this.cancel = () => {
            console.log('Not implemented yet');
        };
        this.handleSelectedCallback = (evt, annotation) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            annotation.highlighted = true;
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_11__.hideElementCursor)(element);
            evt.preventDefault();
        };
        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {
                return true;
            }
            return false;
        };
        this.toolSelectedCallback = (evt, annotation, interactionType) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            annotation.highlighted = true;
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_11__.hideElementCursor)(element);
            evt.preventDefault();
        };
        this.onCameraModified = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            const viewport = enabledElement.viewport;
            const annotations = this._getAnnotations(enabledElement);
            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);
            const viewportAnnotation = filteredToolAnnotations[0];
            if (!viewportAnnotation) {
                return;
            }
            const currentCamera = viewport.getCamera();
            const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;
            const deltaCameraPosition = [0, 0, 0];
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].subtract(currentCamera.position, oldCameraPosition, deltaCameraPosition);
            const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;
            const deltaCameraFocalPoint = [0, 0, 0];
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].subtract(currentCamera.focalPoint, oldCameraFocalPoint, deltaCameraFocalPoint);
            viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];
            viewportAnnotation.metadata.cameraFocalPoint = [
                ...currentCamera.focalPoint,
            ];
            const viewportControllable = this._getReferenceLineControllable(viewport.id);
            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(viewport.id);
            if (!_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&
                viewportControllable &&
                viewportDraggableRotatable) {
                let isRotation = false;
                const cameraModifiedSameForPosAndFocalPoint = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(deltaCameraPosition, deltaCameraFocalPoint, 1e-3);
                if (!cameraModifiedSameForPosAndFocalPoint) {
                    isRotation = true;
                }
                const cameraModifiedInPlane = Math.abs(_kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].dot(deltaCameraPosition, currentCamera.viewPlaneNormal)) < 1e-2;
                if (!isRotation && !cameraModifiedInPlane) {
                    this.toolCenter[0] += deltaCameraPosition[0];
                    this.toolCenter[1] += deltaCameraPosition[1];
                    this.toolCenter[2] += deltaCameraPosition[2];
                }
            }
            if (this.configuration.autoPan?.enabled) {
                const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_5__.getToolGroupForViewport)(viewport.id, renderingEngine.id);
                const otherViewportIds = toolGroup
                    .getViewportIds()
                    .filter((id) => id !== viewport.id);
                otherViewportIds.forEach((viewportId) => {
                    this._autoPanViewportIfNecessary(viewportId, renderingEngine);
                });
            }
            const requireSameOrientation = false;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__.getViewportIdsWithToolToRender)(element, this.getToolName(), requireSameOrientation);
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_15__["default"])(renderingEngine, viewportIdsToRender);
        };
        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {
            const { element, currentPoints } = evt.detail;
            const canvasCoords = currentPoints.canvas;
            let imageNeedsUpdate = false;
            for (let i = 0; i < filteredToolAnnotations.length; i++) {
                const annotation = filteredToolAnnotations[i];
                if ((0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_14__.isAnnotationLocked)(annotation)) {
                    continue;
                }
                const { data, highlighted } = annotation;
                if (!data.handles) {
                    continue;
                }
                const previousActiveOperation = data.handles.activeOperation;
                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0
                    ? [...data.activeViewportIds]
                    : [];
                data.activeViewportIds = [];
                data.handles.activeOperation = null;
                const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, 6);
                let near = false;
                if (handleNearImagePoint) {
                    near = true;
                }
                else {
                    near = this._pointNearTool(element, annotation, canvasCoords, 6);
                }
                const nearToolAndNotMarkedActive = near && !highlighted;
                const notNearToolAndMarkedActive = !near && highlighted;
                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {
                    annotation.highlighted = !highlighted;
                    imageNeedsUpdate = true;
                }
                else if (data.handles.activeOperation !== previousActiveOperation ||
                    !this._areViewportIdArraysEqual(data.activeViewportIds, previousActiveViewportIds)) {
                    imageNeedsUpdate = true;
                }
            }
            return imageNeedsUpdate;
        };
        this.filterInteractableAnnotationsForElement = (element, annotations) => {
            if (!annotations || !annotations.length) {
                return [];
            }
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElement)(element);
            const { viewportId } = enabledElement;
            const viewportUIDSpecificCrosshairs = annotations.filter((annotation) => annotation.data.viewportId === viewportId);
            return viewportUIDSpecificCrosshairs;
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport, renderingEngine } = enabledElement;
            const { element } = viewport;
            const annotations = this._getAnnotations(enabledElement);
            const camera = viewport.getCamera();
            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);
            const viewportAnnotation = filteredToolAnnotations[0];
            if (!annotations?.length || !viewportAnnotation?.data) {
                return renderStatus;
            }
            const annotationUID = viewportAnnotation.annotationUID;
            const { clientWidth, clientHeight } = viewport.canvas;
            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);
            const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);
            const data = viewportAnnotation.data;
            const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);
            const otherViewportAnnotations = this._filterAnnotationsByUniqueViewportOrientations(enabledElement, annotations);
            const referenceLines = [];
            const canvasBox = [0, 0, clientWidth, clientHeight];
            otherViewportAnnotations.forEach((annotation) => {
                const { data } = annotation;
                data.handles.toolCenter = this.toolCenter;
                const otherViewport = renderingEngine.getViewport(data.viewportId);
                const otherCamera = otherViewport.getCamera();
                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
                const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
                const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);
                const { clientWidth, clientHeight } = otherViewport.canvas;
                const otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);
                const otherCanvasCenter = [
                    clientWidth * 0.5,
                    clientHeight * 0.5,
                ];
                const otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);
                const direction = [0, 0, 0];
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].normalize(direction);
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].multiplyScalar(direction, otherCanvasDiagonalLength);
                const pointWorld0 = [0, 0, 0];
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].add(otherViewportCenterWorld, direction, pointWorld0);
                const pointWorld1 = [0, 0, 0];
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].subtract(otherViewportCenterWorld, direction, pointWorld1);
                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);
                const otherViewportCenterCanvas = viewport.worldToCanvas(otherViewportCenterWorld);
                const canvasUnitVectorFromCenter = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);
                const canvasVectorFromCenterLong = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);
                const canvasVectorFromCenterMid = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.scale(canvasVectorFromCenterMid, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.4);
                const canvasVectorFromCenterShort = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.scale(canvasVectorFromCenterShort, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.2);
                const canvasVectorFromCenterStart = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                const centerGap = this.configuration.referenceLinesCenterGapRadius;
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, otherViewportAnnotations.length === 2 ? centerGap : 0);
                const refLinePointOne = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                const refLinePointTwo = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                const refLinePointThree = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                const refLinePointFour = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                let refLinesCenter = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.clone(crosshairCenterCanvas);
                if (!otherViewportDraggableRotatable || !otherViewportControllable) {
                    refLinesCenter = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.clone(otherViewportCenterCanvas);
                }
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(refLinePointThree, refLinesCenter, canvasVectorFromCenterStart);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(refLinePointFour, refLinesCenter, canvasVectorFromCenterLong);
                (0,_utilities_math_vec2_liangBarksyClip__WEBPACK_IMPORTED_MODULE_12__["default"])(refLinePointOne, refLinePointTwo, canvasBox);
                (0,_utilities_math_vec2_liangBarksyClip__WEBPACK_IMPORTED_MODULE_12__["default"])(refLinePointThree, refLinePointFour, canvasBox);
                const rotHandleOne = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(rotHandleOne, crosshairCenterCanvas, canvasVectorFromCenterMid);
                const rotHandleTwo = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);
                let stHandlesCenterCanvas = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.clone(crosshairCenterCanvas);
                if (!otherViewportDraggableRotatable &&
                    otherViewportSlabThicknessControlsOn) {
                    stHandlesCenterCanvas = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.clone(otherViewportCenterCanvas);
                }
                let stHandlesCenterWorld = [...this.toolCenter];
                if (!otherViewportDraggableRotatable &&
                    otherViewportSlabThicknessControlsOn) {
                    stHandlesCenterWorld = [...otherViewportCenterWorld];
                }
                const worldUnitVectorFromCenter = [0, 0, 0];
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].normalize(worldUnitVectorFromCenter);
                const { viewPlaneNormal } = camera;
                const { matrix } = _kitware_vtk_js_Common_Core_MatrixBuilder__WEBPACK_IMPORTED_MODULE_2__["default"]
                    .buildFromDegree()
                    .rotate(90, viewPlaneNormal);
                const worldUnitOrthoVectorFromCenter = [0, 0, 0];
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.transformMat4(worldUnitOrthoVectorFromCenter, worldUnitVectorFromCenter, matrix);
                const slabThicknessValue = otherViewport.getSlabThickness();
                const worldOrthoVectorFromCenter = [
                    ...worldUnitOrthoVectorFromCenter,
                ];
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);
                const worldVerticalRefPoint = [0, 0, 0];
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].add(stHandlesCenterWorld, worldOrthoVectorFromCenter, worldVerticalRefPoint);
                const canvasVerticalRefPoint = viewport.worldToCanvas(worldVerticalRefPoint);
                const canvasOrthoVectorFromCenter = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(canvasOrthoVectorFromCenter, stHandlesCenterCanvas, canvasVerticalRefPoint);
                const stLinePointOne = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(stLinePointOne, stHandlesCenterCanvas, canvasVectorFromCenterLong);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);
                const stLinePointTwo = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(stLinePointTwo, stHandlesCenterCanvas, canvasVectorFromCenterLong);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);
                (0,_utilities_math_vec2_liangBarksyClip__WEBPACK_IMPORTED_MODULE_12__["default"])(stLinePointOne, stLinePointTwo, canvasBox);
                const stLinePointThree = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(stLinePointThree, stHandlesCenterCanvas, canvasVectorFromCenterLong);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(stLinePointThree, stLinePointThree, canvasOrthoVectorFromCenter);
                const stLinePointFour = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(stLinePointFour, stHandlesCenterCanvas, canvasVectorFromCenterLong);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(stLinePointFour, stLinePointFour, canvasOrthoVectorFromCenter);
                (0,_utilities_math_vec2_liangBarksyClip__WEBPACK_IMPORTED_MODULE_12__["default"])(stLinePointThree, stLinePointFour, canvasBox);
                const stHandleOne = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                const stHandleTwo = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                const stHandleThree = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                const stHandleFour = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(stHandleOne, stHandlesCenterCanvas, canvasVectorFromCenterShort);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(stHandleThree, stHandlesCenterCanvas, canvasVectorFromCenterShort);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(stHandleFour, stHandlesCenterCanvas, canvasVectorFromCenterShort);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);
                referenceLines.push([
                    otherViewport,
                    refLinePointOne,
                    refLinePointTwo,
                    refLinePointThree,
                    refLinePointFour,
                    stLinePointOne,
                    stLinePointTwo,
                    stLinePointThree,
                    stLinePointFour,
                    rotHandleOne,
                    rotHandleTwo,
                    stHandleOne,
                    stHandleTwo,
                    stHandleThree,
                    stHandleFour,
                ]);
            });
            const newRtpoints = [];
            const newStpoints = [];
            const viewportColor = this._getReferenceLineColor(viewport.id);
            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';
            referenceLines.forEach((line, lineIndex) => {
                const otherViewport = line[0];
                const viewportColor = this._getReferenceLineColor(otherViewport.id);
                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id) ||
                    this.configuration.mobile?.enabled;
                const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||
                    this.configuration.mobile?.enabled;
                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);
                let color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';
                let lineWidth = 1;
                const lineActive = data.handles.activeOperation !== null &&
                    data.handles.activeOperation === OPERATION.DRAG &&
                    selectedViewportId;
                if (lineActive) {
                    lineWidth = 2.5;
                }
                let lineUID = `${lineIndex}`;
                if (viewportControllable && viewportDraggableRotatable) {
                    lineUID = `${lineIndex}One`;
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawLine)(svgDrawingHelper, annotationUID, lineUID, line[1], line[2], {
                        color,
                        lineWidth,
                    });
                    lineUID = `${lineIndex}Two`;
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawLine)(svgDrawingHelper, annotationUID, lineUID, line[3], line[4], {
                        color,
                        lineWidth,
                    });
                }
                else {
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawLine)(svgDrawingHelper, annotationUID, lineUID, line[2], line[4], {
                        color,
                        lineWidth,
                    });
                }
                if (viewportControllable) {
                    color =
                        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';
                    const rotHandlesActive = data.handles.activeOperation === OPERATION.ROTATE;
                    const rotationHandles = [line[9], line[10]];
                    const rotHandleWorldOne = [
                        viewport.canvasToWorld(line[9]),
                        otherViewport,
                        line[1],
                        line[2],
                    ];
                    const rotHandleWorldTwo = [
                        viewport.canvasToWorld(line[10]),
                        otherViewport,
                        line[3],
                        line[4],
                    ];
                    newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);
                    const slabThicknessHandlesActive = data.handles.activeOperation === OPERATION.SLAB;
                    const slabThicknessHandles = [line[11], line[12], line[13], line[14]];
                    const slabThicknessHandleWorldOne = [
                        viewport.canvasToWorld(line[11]),
                        otherViewport,
                        line[5],
                        line[6],
                    ];
                    const slabThicknessHandleWorldTwo = [
                        viewport.canvasToWorld(line[12]),
                        otherViewport,
                        line[5],
                        line[6],
                    ];
                    const slabThicknessHandleWorldThree = [
                        viewport.canvasToWorld(line[13]),
                        otherViewport,
                        line[7],
                        line[8],
                    ];
                    const slabThicknessHandleWorldFour = [
                        viewport.canvasToWorld(line[14]),
                        otherViewport,
                        line[7],
                        line[8],
                    ];
                    newStpoints.push(slabThicknessHandleWorldOne, slabThicknessHandleWorldTwo, slabThicknessHandleWorldThree, slabThicknessHandleWorldFour);
                    if ((lineActive || this.configuration.mobile?.enabled) &&
                        !rotHandlesActive &&
                        !slabThicknessHandlesActive &&
                        viewportDraggableRotatable &&
                        viewportSlabThicknessControlsOn) {
                        let handleUID = `${lineIndex}One`;
                        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawHandles)(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {
                            color,
                            handleRadius: this.configuration.mobile?.enabled
                                ? this.configuration.mobile?.handleRadius
                                : 3,
                            opacity: this.configuration.mobile?.enabled
                                ? this.configuration.mobile?.opacity
                                : 1,
                            type: 'circle',
                        });
                        handleUID = `${lineIndex}Two`;
                        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawHandles)(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {
                            color,
                            handleRadius: this.configuration.mobile?.enabled
                                ? this.configuration.mobile?.handleRadius
                                : 3,
                            opacity: this.configuration.mobile?.enabled
                                ? this.configuration.mobile?.opacity
                                : 1,
                            type: 'rect',
                        });
                    }
                    else if (lineActive &&
                        !rotHandlesActive &&
                        !slabThicknessHandlesActive &&
                        viewportDraggableRotatable) {
                        const handleUID = `${lineIndex}`;
                        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawHandles)(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {
                            color,
                            handleRadius: this.configuration.mobile?.enabled
                                ? this.configuration.mobile?.handleRadius
                                : 3,
                            opacity: this.configuration.mobile?.enabled
                                ? this.configuration.mobile?.opacity
                                : 1,
                            type: 'circle',
                        });
                    }
                    else if (selectedViewportId &&
                        !rotHandlesActive &&
                        !slabThicknessHandlesActive &&
                        viewportSlabThicknessControlsOn) {
                        const handleUID = `${lineIndex}`;
                        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawHandles)(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {
                            color,
                            handleRadius: this.configuration.mobile?.enabled
                                ? this.configuration.mobile?.handleRadius
                                : 3,
                            opacity: this.configuration.mobile?.enabled
                                ? this.configuration.mobile?.opacity
                                : 1,
                            type: 'rect',
                        });
                    }
                    else if (rotHandlesActive && viewportDraggableRotatable) {
                        const handleUID = `${lineIndex}`;
                        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawHandles)(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {
                            color,
                            handleRadius: 2,
                            fill: color,
                            type: 'circle',
                        });
                    }
                    else if (slabThicknessHandlesActive &&
                        selectedViewportId &&
                        viewportSlabThicknessControlsOn) {
                        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawHandles)(svgDrawingHelper, annotationUID, lineUID, slabThicknessHandles, {
                            color,
                            handleRadius: 2,
                            fill: color,
                            type: 'rect',
                        });
                    }
                    const slabThicknessValue = otherViewport.getSlabThickness();
                    if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {
                        lineUID = `${lineIndex}STOne`;
                        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawLine)(svgDrawingHelper, annotationUID, lineUID, line[5], line[6], {
                            color,
                            width: 1,
                            lineDash: [2, 3],
                        });
                        lineUID = `${lineIndex}STTwo`;
                        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawLine)(svgDrawingHelper, annotationUID, lineUID, line[7], line[8], {
                            color,
                            width: line,
                            lineDash: [2, 3],
                        });
                    }
                }
            });
            renderStatus = true;
            data.handles.rotationPoints = newRtpoints;
            data.handles.slabThicknessPoints = newStpoints;
            if (this.configuration.viewportIndicators) {
                const referenceColorCoordinates = [
                    clientWidth * 0.95,
                    clientHeight * 0.05,
                ];
                const circleRadius = canvasDiagonalLength * 0.01;
                const circleUID = '0';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawCircle)(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });
            }
            return renderStatus;
        };
        this._getAnnotations = (enabledElement) => {
            const { viewport } = enabledElement;
            return (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_6__.getAnnotations)(this.getToolName(), viewport.element);
        };
        this._onNewVolume = (e) => {
            const viewportsInfo = this._getViewportsInfo();
            this.computeToolCenter(viewportsInfo);
        };
        this._areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {
            if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {
                return false;
            }
            viewportIdArrayOne.forEach((id) => {
                let itemFound = false;
                for (let i = 0; i < viewportIdArrayTwo.length; ++i) {
                    if (id === viewportIdArrayTwo[i]) {
                        itemFound = true;
                        break;
                    }
                }
                if (itemFound === false) {
                    return false;
                }
            });
            return true;
        };
        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {
            const { viewportId, renderingEngine, viewport } = enabledElement;
            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);
            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {
                return [];
            }
            const camera = viewport.getCamera();
            const { viewPlaneNormal, position } = camera;
            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {
                const { viewportId } = annotation.data;
                const targetViewport = renderingEngine.getViewport(viewportId);
                const cameraOfTarget = targetViewport.getCamera();
                return !(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(cameraOfTarget.position, position, 1));
            });
            return viewportsWithDifferentCameras;
        };
        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {
            const { renderingEngine } = enabledElement;
            const { data } = referenceAnnotation;
            const viewport = renderingEngine.getViewport(data.viewportId);
            const linkedViewportAnnotations = annotations.filter((annotation) => {
                const { data } = annotation;
                const otherViewport = renderingEngine.getViewport(data.viewportId);
                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
                return otherViewportControllable === true;
            });
            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {
                return [];
            }
            const camera = viewport.getCamera();
            const viewPlaneNormal = camera.viewPlaneNormal;
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].normalize(viewPlaneNormal);
            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {
                const { viewportId } = annotation.data;
                const otherViewport = renderingEngine.getViewport(viewportId);
                const otherCamera = otherViewport.getCamera();
                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].normalize(otherViewPlaneNormal);
                return (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&
                    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));
            });
            return otherViewportsAnnotationsWithSameCameraDirection;
        };
        this._filterAnnotationsByUniqueViewportOrientations = (enabledElement, annotations) => {
            const { renderingEngine, viewport } = enabledElement;
            const camera = viewport.getCamera();
            const viewPlaneNormal = camera.viewPlaneNormal;
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].normalize(viewPlaneNormal);
            const otherLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {
                const { data } = annotation;
                const otherViewport = renderingEngine.getViewport(data.viewportId);
                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
                return (viewport !== otherViewport &&
                    otherViewportControllable === true);
            });
            const otherViewportsAnnotationsWithUniqueCameras = [];
            for (let i = 0; i < otherLinkedViewportAnnotationsFromSameScene.length; ++i) {
                const annotation = otherLinkedViewportAnnotationsFromSameScene[i];
                const { viewportId } = annotation.data;
                const otherViewport = renderingEngine.getViewport(viewportId);
                const otherCamera = otherViewport.getCamera();
                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].normalize(otherViewPlaneNormal);
                if (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||
                    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {
                    continue;
                }
                let cameraFound = false;
                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {
                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];
                    const { viewportId } = annotation.data;
                    const stockedViewport = renderingEngine.getViewport(viewportId);
                    const cameraOfStocked = stockedViewport.getCamera();
                    if (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&
                        _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {
                        cameraFound = true;
                    }
                }
                if (!cameraFound) {
                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);
                }
            }
            const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {
                const { data } = annotation;
                const otherViewport = renderingEngine.getViewport(data.viewportId);
                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
                return (viewport !== otherViewport &&
                    otherViewportControllable !== true);
            });
            for (let i = 0; i < otherNonLinkedViewportAnnotationsFromSameScene.length; ++i) {
                const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];
                const { viewportId } = annotation.data;
                const otherViewport = renderingEngine.getViewport(viewportId);
                const otherCamera = otherViewport.getCamera();
                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].normalize(otherViewPlaneNormal);
                if (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||
                    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {
                    continue;
                }
                let cameraFound = false;
                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {
                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];
                    const { viewportId } = annotation.data;
                    const stockedViewport = renderingEngine.getViewport(viewportId);
                    const cameraOfStocked = stockedViewport.getCamera();
                    if (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&
                        _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {
                        cameraFound = true;
                    }
                }
                if (!cameraFound) {
                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);
                }
            }
            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);
            for (let i = 0; i < otherViewportAnnotations.length; ++i) {
                const annotation = otherViewportAnnotations[i];
                if (otherViewportsAnnotationsWithUniqueCameras.some((element) => element === annotation)) {
                    continue;
                }
                const { viewportId } = annotation.data;
                const otherViewport = renderingEngine.getViewport(viewportId);
                const otherCamera = otherViewport.getCamera();
                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;
                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].normalize(otherViewPlaneNormal);
                if (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||
                    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {
                    continue;
                }
                let cameraFound = false;
                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {
                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];
                    const { viewportId } = annotation.data;
                    const stockedViewport = renderingEngine.getViewport(viewportId);
                    const cameraOfStocked = stockedViewport.getCamera();
                    if (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&
                        _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {
                        cameraFound = true;
                    }
                }
                if (!cameraFound) {
                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);
                }
            }
            return otherViewportsAnnotationsWithUniqueCameras;
        };
        this._checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {
            const actors = viewport.getActors();
            const otherViewportActors = otherViewport.getActors();
            let sameScene = true;
            actors.forEach((actor) => {
                if (actors.length !== otherViewportActors.length ||
                    otherViewportActors.find(({ uid }) => uid === actor.uid) === undefined) {
                    sameScene = false;
                }
            });
            return sameScene;
        };
        this._jump = (enabledElement, jumpWorld) => {
            _store__WEBPACK_IMPORTED_MODULE_8__.state.isInteractingWithTool = true;
            const { viewport, renderingEngine } = enabledElement;
            const annotations = this._getAnnotations(enabledElement);
            const delta = [0, 0, 0];
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].subtract(jumpWorld, this.toolCenter, delta);
            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);
            const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {
                const { data } = annotation;
                const otherViewport = renderingEngine.getViewport(data.viewportId);
                const sameScene = this._checkIfViewportsRenderingSameScene(viewport, otherViewport);
                return (this._getReferenceLineControllable(otherViewport.id) &&
                    this._getReferenceLineDraggableRotatable(otherViewport.id) &&
                    sameScene);
            });
            if (viewportsAnnotationsToUpdate.length === 0) {
                _store__WEBPACK_IMPORTED_MODULE_8__.state.isInteractingWithTool = false;
                return false;
            }
            this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);
            _store__WEBPACK_IMPORTED_MODULE_8__.state.isInteractingWithTool = false;
            return true;
        };
        this._activateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_8__.state.isInteractingWithTool = !this.configuration.mobile?.enabled;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_8__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_TAP, this._endCallback);
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            this.editData.annotation.data.handles.activeOperation = null;
            this.editData.annotation.data.activeViewportIds = [];
            this._deactivateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_11__.resetElementCursor)(element);
            this.editData = null;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            const requireSameOrientation = false;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__.getViewportIdsWithToolToRender)(element, this.getToolName(), requireSameOrientation);
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_15__["default"])(renderingEngine, viewportIdsToRender);
        };
        this._dragCallback = (evt) => {
            const eventDetail = evt.detail;
            const delta = eventDetail.deltaPoints.world;
            if (Math.abs(delta[0]) < 1e-3 &&
                Math.abs(delta[1]) < 1e-3 &&
                Math.abs(delta[2]) < 1e-3) {
                return;
            }
            const { element } = eventDetail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElement)(element);
            const { renderingEngine, viewport } = enabledElement;
            const annotations = this._getAnnotations(enabledElement);
            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);
            const viewportAnnotation = filteredToolAnnotations[0];
            if (!viewportAnnotation) {
                return;
            }
            const { handles } = viewportAnnotation.data;
            const { currentPoints } = evt.detail;
            const canvasCoords = currentPoints.canvas;
            if (handles.activeOperation === OPERATION.DRAG) {
                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);
                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {
                    const { data } = annotation;
                    const otherViewport = renderingEngine.getViewport(data.viewportId);
                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
                    return (otherViewportControllable === true &&
                        otherViewportDraggableRotatable === true &&
                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));
                });
                this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);
            }
            else if (handles.activeOperation === OPERATION.ROTATE) {
                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);
                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {
                    const { data } = annotation;
                    const otherViewport = renderingEngine.getViewport(data.viewportId);
                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
                    return (otherViewportControllable === true &&
                        otherViewportDraggableRotatable === true);
                });
                const dir1 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                const dir2 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                const center = [
                    this.toolCenter[0],
                    this.toolCenter[1],
                    this.toolCenter[2],
                ];
                const centerCanvas = viewport.worldToCanvas(center);
                const finalPointCanvas = eventDetail.currentPoints.canvas;
                const originalPointCanvas = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.sub(originalPointCanvas, finalPointCanvas, eventDetail.deltaPoints.canvas);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.sub(dir1, originalPointCanvas, centerCanvas);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.sub(dir2, finalPointCanvas, centerCanvas);
                let angle = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.angle(dir1, dir2);
                if (this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)) {
                    angle *= -1;
                }
                angle = Math.round(angle * 100) / 100;
                const rotationAxis = viewport.getCamera().viewPlaneNormal;
                const { matrix } = _kitware_vtk_js_Common_Core_MatrixBuilder__WEBPACK_IMPORTED_MODULE_2__["default"]
                    .buildFromRadian()
                    .translate(center[0], center[1], center[2])
                    .rotate(angle, rotationAxis)
                    .translate(-center[0], -center[1], -center[2]);
                const otherViewportsIds = [];
                viewportsAnnotationsToUpdate.forEach((annotation) => {
                    const { data } = annotation;
                    data.handles.toolCenter = center;
                    const otherViewport = renderingEngine.getViewport(data.viewportId);
                    const camera = otherViewport.getCamera();
                    const { viewUp, position, focalPoint } = camera;
                    viewUp[0] += position[0];
                    viewUp[1] += position[1];
                    viewUp[2] += position[2];
                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.transformMat4(focalPoint, focalPoint, matrix);
                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.transformMat4(position, position, matrix);
                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.transformMat4(viewUp, viewUp, matrix);
                    viewUp[0] -= position[0];
                    viewUp[1] -= position[1];
                    viewUp[2] -= position[2];
                    otherViewport.setCamera({
                        position,
                        viewUp,
                        focalPoint,
                    });
                    otherViewportsIds.push(otherViewport.id);
                });
                renderingEngine.renderViewports(otherViewportsIds);
            }
            else if (handles.activeOperation === OPERATION.SLAB) {
                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);
                const referenceAnnotations = otherViewportAnnotations.filter((annotation) => {
                    const { data } = annotation;
                    const otherViewport = renderingEngine.getViewport(data.viewportId);
                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);
                    const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);
                    return (otherViewportControllable === true &&
                        otherViewportSlabThicknessControlsOn === true &&
                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));
                });
                if (referenceAnnotations.length === 0) {
                    return;
                }
                const viewportsAnnotationsToUpdate = this._filterViewportWithSameOrientation(enabledElement, referenceAnnotations[0], annotations);
                const viewportsIds = [];
                viewportsIds.push(viewport.id);
                viewportsAnnotationsToUpdate.forEach((annotation) => {
                    const { data } = annotation;
                    const otherViewport = renderingEngine.getViewport(data.viewportId);
                    const camera = otherViewport.getCamera();
                    const normal = camera.viewPlaneNormal;
                    const dotProd = _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].dot(delta, normal);
                    const projectedDelta = [...normal];
                    _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].multiplyScalar(projectedDelta, dotProd);
                    if (Math.abs(projectedDelta[0]) > 1e-3 ||
                        Math.abs(projectedDelta[1]) > 1e-3 ||
                        Math.abs(projectedDelta[2]) > 1e-3) {
                        const mod = Math.sqrt(projectedDelta[0] * projectedDelta[0] +
                            projectedDelta[1] * projectedDelta[1] +
                            projectedDelta[2] * projectedDelta[2]);
                        const currentPoint = eventDetail.lastPoints.world;
                        const direction = [0, 0, 0];
                        const currentCenter = [
                            this.toolCenter[0],
                            this.toolCenter[1],
                            this.toolCenter[2],
                        ];
                        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
                        if (!viewportDraggableRotatable) {
                            const { rotationPoints } = this.editData.annotation.data.handles;
                            const otherViewportRotationPoints = rotationPoints.filter((point) => point[1].uid === otherViewport.id);
                            if (otherViewportRotationPoints.length === 2) {
                                const point1 = viewport.canvasToWorld(otherViewportRotationPoints[0][3]);
                                const point2 = viewport.canvasToWorld(otherViewportRotationPoints[1][3]);
                                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].add(point1, point2, currentCenter);
                                _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].multiplyScalar(currentCenter, 0.5);
                            }
                        }
                        _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].subtract(currentPoint, currentCenter, direction);
                        const dotProdDirection = _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].dot(direction, normal);
                        const projectedDirection = [...normal];
                        _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].multiplyScalar(projectedDirection, dotProdDirection);
                        const normalizedProjectedDirection = [
                            projectedDirection[0],
                            projectedDirection[1],
                            projectedDirection[2],
                        ];
                        gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.normalize(normalizedProjectedDirection, normalizedProjectedDirection);
                        const normalizedProjectedDelta = [
                            projectedDelta[0],
                            projectedDelta[1],
                            projectedDelta[2],
                        ];
                        gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);
                        let slabThicknessValue = otherViewport.getSlabThickness();
                        if (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.utilities.isOpposite(normalizedProjectedDirection, normalizedProjectedDelta, 1e-3)) {
                            slabThicknessValue -= mod;
                        }
                        else {
                            slabThicknessValue += mod;
                        }
                        slabThicknessValue = Math.abs(slabThicknessValue);
                        slabThicknessValue = Math.max(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, slabThicknessValue);
                        const near = this._pointNearReferenceLine(viewportAnnotation, canvasCoords, 6, otherViewport);
                        if (near) {
                            slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;
                        }
                        const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_5__.getToolGroupForViewport)(otherViewport.id, renderingEngine.id);
                        const crosshairsInstance = toolGroup.getToolInstance(this.getToolName());
                        crosshairsInstance.setSlabThickness(otherViewport, slabThicknessValue);
                        viewportsIds.push(otherViewport.id);
                    }
                });
                renderingEngine.renderViewports(viewportsIds);
            }
        };
        this._pointNearReferenceLine = (annotation, canvasCoords, proximity, lineViewport) => {
            const { data } = annotation;
            const { rotationPoints } = data.handles;
            for (let i = 0; i < rotationPoints.length - 1; ++i) {
                const otherViewport = rotationPoints[i][1];
                if (otherViewport.id !== lineViewport.id) {
                    continue;
                }
                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
                if (!viewportControllable) {
                    continue;
                }
                const lineSegment1 = {
                    start: {
                        x: rotationPoints[i][2][0],
                        y: rotationPoints[i][2][1],
                    },
                    end: {
                        x: rotationPoints[i][3][0],
                        y: rotationPoints[i][3][1],
                    },
                };
                const distanceToPoint1 = _utilities_math_line__WEBPACK_IMPORTED_MODULE_13__.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);
                const lineSegment2 = {
                    start: {
                        x: rotationPoints[i + 1][2][0],
                        y: rotationPoints[i + 1][2][1],
                    },
                    end: {
                        x: rotationPoints[i + 1][3][0],
                        y: rotationPoints[i + 1][3][1],
                    },
                };
                const distanceToPoint2 = _utilities_math_line__WEBPACK_IMPORTED_MODULE_13__.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);
                if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {
                    return true;
                }
                i++;
            }
            return false;
        };
        this._getReferenceLineColor =
            toolProps.configuration?.getReferenceLineColor ||
                defaultReferenceLineColor;
        this._getReferenceLineControllable =
            toolProps.configuration?.getReferenceLineControllable ||
                defaultReferenceLineControllable;
        this._getReferenceLineDraggableRotatable =
            toolProps.configuration?.getReferenceLineDraggableRotatable ||
                defaultReferenceLineDraggableRotatable;
        this._getReferenceLineSlabThicknessControlsOn =
            toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||
                defaultReferenceLineSlabThicknessControlsOn;
    }
    onSetToolActive() {
        const viewportsInfo = this._getViewportsInfo();
        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);
        this._subscribeToViewportNewVolumeSet(viewportsInfo);
        this.computeToolCenter(viewportsInfo);
    }
    onSetToolPassive() {
        const viewportsInfo = this._getViewportsInfo();
        this.computeToolCenter(viewportsInfo);
    }
    onSetToolEnabled() {
        const viewportsInfo = this._getViewportsInfo();
        this.computeToolCenter(viewportsInfo);
    }
    onSetToolDisabled() {
        const viewportsInfo = this._getViewportsInfo();
        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);
        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElementByIds)(viewportId, renderingEngineId);
            if (!enabledElement) {
                return;
            }
            const annotations = this._getAnnotations(enabledElement);
            if (annotations?.length) {
                annotations.forEach((annotation) => {
                    (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_6__.removeAnnotation)(annotation.annotationUID);
                });
            }
        });
    }
    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElement)(element);
        const { viewport } = enabledElement;
        let point = this._getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);
        if (point !== null) {
            return point;
        }
        point = this._getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);
        if (point !== null) {
            return point;
        }
    }
    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {
        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
            const { viewport } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElementByIds)(viewportId, renderingEngineId);
            const { element } = viewport;
            element.removeEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);
        });
    }
    _subscribeToViewportNewVolumeSet(viewports) {
        viewports.forEach(({ viewportId, renderingEngineId }) => {
            const { viewport } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElementByIds)(viewportId, renderingEngineId);
            const { element } = viewport;
            element.addEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);
        });
    }
    _autoPanViewportIfNecessary(viewportId, renderingEngine) {
        const viewport = renderingEngine.getViewport(viewportId);
        const { clientWidth, clientHeight } = viewport.canvas;
        const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);
        const pan = this.configuration.autoPan.panSize;
        const visiblePointCanvas = [
            toolCenterCanvas[0],
            toolCenterCanvas[1],
        ];
        if (toolCenterCanvas[0] < 0) {
            visiblePointCanvas[0] = pan;
        }
        else if (toolCenterCanvas[0] > clientWidth) {
            visiblePointCanvas[0] = clientWidth - pan;
        }
        if (toolCenterCanvas[1] < 0) {
            visiblePointCanvas[1] = pan;
        }
        else if (toolCenterCanvas[1] > clientHeight) {
            visiblePointCanvas[1] = clientHeight - pan;
        }
        if (visiblePointCanvas[0] === toolCenterCanvas[0] &&
            visiblePointCanvas[1] === toolCenterCanvas[1]) {
            return;
        }
        const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);
        const deltaPointsWorld = [
            visiblePointWorld[0] - this.toolCenter[0],
            visiblePointWorld[1] - this.toolCenter[1],
            visiblePointWorld[2] - this.toolCenter[2],
        ];
        const camera = viewport.getCamera();
        const { focalPoint, position } = camera;
        const updatedPosition = [
            position[0] - deltaPointsWorld[0],
            position[1] - deltaPointsWorld[1],
            position[2] - deltaPointsWorld[2],
        ];
        const updatedFocalPoint = [
            focalPoint[0] - deltaPointsWorld[0],
            focalPoint[1] - deltaPointsWorld[1],
            focalPoint[2] - deltaPointsWorld[2],
        ];
        viewport.setCamera({
            focalPoint: updatedFocalPoint,
            position: updatedPosition,
        });
        viewport.render();
    }
    setSlabThickness(viewport, slabThickness) {
        let actorUIDs;
        const { filterActorUIDsToSetSlabThickness } = this.configuration;
        if (filterActorUIDsToSetSlabThickness &&
            filterActorUIDsToSetSlabThickness.length > 0) {
            actorUIDs = filterActorUIDsToSetSlabThickness;
        }
        let blendModeToUse = this.configuration.slabThicknessBlendMode;
        if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {
            blendModeToUse = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.Enums.BlendModes.COMPOSITE;
        }
        const immediate = false;
        viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);
        viewport.setSlabThickness(slabThickness, actorUIDs);
    }
    _isClockWise(a, b, c) {
        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;
    }
    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {
        viewportsAnnotationsToUpdate.forEach((annotation) => {
            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);
        });
    }
    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {
        const { data } = annotation;
        const viewport = renderingEngine.getViewport(data.viewportId);
        const camera = viewport.getCamera();
        const normal = camera.viewPlaneNormal;
        const dotProd = _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].dot(delta, normal);
        const projectedDelta = [...normal];
        _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].multiplyScalar(projectedDelta, dotProd);
        if (Math.abs(projectedDelta[0]) > 1e-3 ||
            Math.abs(projectedDelta[1]) > 1e-3 ||
            Math.abs(projectedDelta[2]) > 1e-3) {
            const newFocalPoint = [0, 0, 0];
            const newPosition = [0, 0, 0];
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].add(camera.focalPoint, projectedDelta, newFocalPoint);
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].add(camera.position, projectedDelta, newPosition);
            viewport.setCamera({
                focalPoint: newFocalPoint,
                position: newPosition,
            });
            viewport.render();
        }
    }
    _getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {
        const { data } = annotation;
        const { rotationPoints } = data.handles;
        for (let i = 0; i < rotationPoints.length; i++) {
            const point = rotationPoints[i][0];
            const otherViewport = rotationPoints[i][1];
            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
            if (!viewportControllable) {
                continue;
            }
            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
            if (!viewportDraggableRotatable) {
                continue;
            }
            const annotationCanvasCoordinate = viewport.worldToCanvas(point);
            if (gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {
                data.handles.activeOperation = OPERATION.ROTATE;
                this.editData = {
                    annotation,
                };
                return point;
            }
        }
        return null;
    }
    _getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {
        const { data } = annotation;
        const { slabThicknessPoints } = data.handles;
        for (let i = 0; i < slabThicknessPoints.length; i++) {
            const point = slabThicknessPoints[i][0];
            const otherViewport = slabThicknessPoints[i][1];
            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
            if (!viewportControllable) {
                continue;
            }
            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);
            if (!viewportSlabThicknessControlsOn) {
                continue;
            }
            const annotationCanvasCoordinate = viewport.worldToCanvas(point);
            if (gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {
                data.handles.activeOperation = OPERATION.SLAB;
                data.activeViewportIds = [otherViewport.id];
                this.editData = {
                    annotation,
                };
                return point;
            }
        }
        return null;
    }
    _pointNearTool(element, annotation, canvasCoords, proximity) {
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_4__.getEnabledElement)(element);
        const { viewport } = enabledElement;
        const { clientWidth, clientHeight } = viewport.canvas;
        const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);
        const { data } = annotation;
        const { rotationPoints } = data.handles;
        const { slabThicknessPoints } = data.handles;
        const viewportIdArray = [];
        for (let i = 0; i < rotationPoints.length - 1; ++i) {
            const otherViewport = rotationPoints[i][1];
            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);
            if (!viewportControllable || !viewportDraggableRotatable) {
                continue;
            }
            const lineSegment1 = {
                start: {
                    x: rotationPoints[i][2][0],
                    y: rotationPoints[i][2][1],
                },
                end: {
                    x: rotationPoints[i][3][0],
                    y: rotationPoints[i][3][1],
                },
            };
            const distanceToPoint1 = _utilities_math_line__WEBPACK_IMPORTED_MODULE_13__.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);
            const lineSegment2 = {
                start: {
                    x: rotationPoints[i + 1][2][0],
                    y: rotationPoints[i + 1][2][1],
                },
                end: {
                    x: rotationPoints[i + 1][3][0],
                    y: rotationPoints[i + 1][3][1],
                },
            };
            const distanceToPoint2 = _utilities_math_line__WEBPACK_IMPORTED_MODULE_13__.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);
            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {
                viewportIdArray.push(otherViewport.id);
                data.handles.activeOperation = OPERATION.DRAG;
            }
            i++;
        }
        for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {
            const otherViewport = slabThicknessPoints[i][1];
            if (viewportIdArray.find((id) => id === otherViewport.id)) {
                continue;
            }
            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);
            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);
            if (!viewportControllable || !viewportSlabThicknessControlsOn) {
                continue;
            }
            const stPointLineCanvas1 = slabThicknessPoints[i][2];
            const stPointLineCanvas2 = slabThicknessPoints[i][3];
            const centerCanvas = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.scale(centerCanvas, centerCanvas, 0.5);
            const canvasUnitVectorFromCenter = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(canvasUnitVectorFromCenter, stPointLineCanvas1, centerCanvas);
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);
            const canvasVectorFromCenterStart = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, canvasDiagonalLength * 0.05);
            const stPointLineCanvas1Start = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
            const stPointLineCanvas2Start = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.add(stPointLineCanvas1Start, centerCanvas, canvasVectorFromCenterStart);
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(stPointLineCanvas2Start, centerCanvas, canvasVectorFromCenterStart);
            const lineSegment1 = {
                start: {
                    x: stPointLineCanvas1Start[0],
                    y: stPointLineCanvas1Start[1],
                },
                end: {
                    x: stPointLineCanvas1[0],
                    y: stPointLineCanvas1[1],
                },
            };
            const distanceToPoint1 = _utilities_math_line__WEBPACK_IMPORTED_MODULE_13__.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);
            const lineSegment2 = {
                start: {
                    x: stPointLineCanvas2Start[0],
                    y: stPointLineCanvas2Start[1],
                },
                end: {
                    x: stPointLineCanvas2[0],
                    y: stPointLineCanvas2[1],
                },
            };
            const distanceToPoint2 = _utilities_math_line__WEBPACK_IMPORTED_MODULE_13__.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);
            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {
                viewportIdArray.push(otherViewport.id);
                data.handles.activeOperation = null;
            }
            i++;
        }
        data.activeViewportIds = [...viewportIdArray];
        this.editData = {
            annotation,
        };
        return data.handles.activeOperation === OPERATION.DRAG ? true : false;
    }
}
CrosshairsTool.toolName = 'Crosshairs';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CrosshairsTool);
//# sourceMappingURL=CrosshairsTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js":
/*!***************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities_planar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/planar */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/index.js");
/* harmony import */ var _utilities_viewport_jumpToWorld__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/viewport/jumpToWorld */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/jumpToWorld.js");




class MIPJumpToClickTool extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            targetViewportIds: [],
        },
    }) {
        super(toolProps, defaultToolProps);
    }
    mouseClickCallback(evt) {
        const { element, currentPoints } = evt.detail;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const { viewport, renderingEngine } = enabledElement;
        const targetId = this.getTargetId(viewport);
        if (!targetId.startsWith('volumeId')) {
            throw new Error(`MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`);
        }
        const volumeId = targetId.split('volumeId:')[1];
        let maxIntensity = -Infinity;
        const maxFn = (intensity, point) => {
            if (intensity > maxIntensity) {
                maxIntensity = intensity;
                return point;
            }
        };
        const brightestPoint = (0,_utilities_planar__WEBPACK_IMPORTED_MODULE_2__.getPointInLineOfSightWithCriteria)(viewport, currentPoints.world, volumeId, maxFn);
        if (!brightestPoint || !brightestPoint.length) {
            return;
        }
        const { targetViewportIds } = this.configuration;
        targetViewportIds.forEach((viewportId) => {
            const viewport = renderingEngine.getViewport(viewportId);
            if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.VolumeViewport) {
                (0,_utilities_viewport_jumpToWorld__WEBPACK_IMPORTED_MODULE_3__["default"])(viewport, brightestPoint);
            }
            else {
                console.warn('Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport');
            }
        });
    }
}
MIPJumpToClickTool.toolName = 'MIPJumpToClickTool';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MIPJumpToClickTool);
//# sourceMappingURL=MIPJumpToClickTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js":
/*!********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");








const MAGNIFY_VIEWPORT_ID = 'magnify-viewport';
class MagnifyTool extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            magnifySize: 10,
            magnifyWidth: 250,
            magnifyHeight: 250,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.preMouseDownCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element, currentPoints } = eventDetail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            if (!(viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.StackViewport)) {
                throw new Error('MagnifyTool only works on StackViewports');
            }
            const referencedImageId = this._getReferencedImageId(viewport);
            if (!referencedImageId) {
                throw new Error('MagnifyTool: No referenced image id found, reconstructed planes not supported yet');
            }
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_3__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                referencedImageId,
                viewportIdsToRender,
                enabledElement,
                renderingEngine,
                currentPoints,
            };
            this._createMagnificationViewport();
            this._activateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_6__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_4__["default"])(renderingEngine, viewportIdsToRender);
            return true;
        };
        this.preTouchStartCallback = (evt) => {
            this.preMouseDownCallback(evt);
        };
        this._createMagnificationViewport = () => {
            const { enabledElement, referencedImageId, viewportIdsToRender, renderingEngine, currentPoints, } = this.editData;
            const { viewport } = enabledElement;
            const { element } = viewport;
            const { voiRange } = viewport.getProperties();
            const { canvas: canvasPos, world: worldPos } = currentPoints;
            let magnifyToolElement;
            magnifyToolElement = element.querySelector('.magnifyTool');
            if (magnifyToolElement === null) {
                const magnifyElement = document.createElement('div');
                magnifyElement.classList.add('magnifyTool');
                magnifyElement.style.display = 'block';
                magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;
                magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;
                magnifyElement.style.position = 'absolute';
                magnifyToolElement = magnifyElement;
                const viewportElement = element.querySelector('.viewport-element');
                viewportElement.appendChild(magnifyElement);
                const viewportInput = {
                    viewportId: MAGNIFY_VIEWPORT_ID,
                    type: _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.Enums.ViewportType.STACK,
                    element: magnifyToolElement,
                };
                renderingEngine.enableElement(viewportInput);
            }
            magnifyToolElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;
            magnifyToolElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;
            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);
            magnifyViewport.setStack([referencedImageId]).then(() => {
                magnifyViewport.setProperties({ voiRange });
                const { parallelScale } = viewport.getCamera();
                const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();
                const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +
                    Math.pow(focalPoint[1] - position[1], 2) +
                    Math.pow(focalPoint[2] - position[2], 2));
                const updatedFocalPoint = [
                    worldPos[0],
                    worldPos[1],
                    worldPos[2],
                ];
                const updatedPosition = [
                    updatedFocalPoint[0] + distance * viewPlaneNormal[0],
                    updatedFocalPoint[1] + distance * viewPlaneNormal[1],
                    updatedFocalPoint[2] + distance * viewPlaneNormal[2],
                ];
                magnifyViewport.setCamera({
                    parallelScale: parallelScale * (1 / this.configuration.magnifySize),
                    focalPoint: updatedFocalPoint,
                    position: updatedPosition,
                });
                magnifyViewport.render();
            });
            magnifyToolElement.style.display = 'block';
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_4__["default"])(renderingEngine, viewportIdsToRender);
        };
        this._dragCallback = (evt) => {
            const eventDetail = evt.detail;
            const { deltaPoints, element, currentPoints } = eventDetail;
            const deltaPointsWorld = deltaPoints.world;
            const canvasPos = currentPoints.canvas;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);
            const magnifyElement = element.querySelector('.magnifyTool');
            if (!magnifyElement) {
                return;
            }
            magnifyElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;
            magnifyElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;
            const { focalPoint, position } = magnifyViewport.getCamera();
            const updatedPosition = [
                position[0] + deltaPointsWorld[0],
                position[1] + deltaPointsWorld[1],
                position[2] + deltaPointsWorld[2],
            ];
            const updatedFocalPoint = [
                focalPoint[0] + deltaPointsWorld[0],
                focalPoint[1] + deltaPointsWorld[1],
                focalPoint[2] + deltaPointsWorld[2],
            ];
            magnifyViewport.setCamera({
                focalPoint: updatedFocalPoint,
                position: updatedPosition,
            });
            magnifyViewport.render();
        };
        this._dragEndCallback = (evt) => {
            const { element } = evt.detail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);
            const viewportElement = element.querySelector('.viewport-element');
            const magnifyToolElement = viewportElement.querySelector('.magnifyTool');
            viewportElement.removeChild(magnifyToolElement);
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_6__.resetElementCursor)(element);
        };
        this._activateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_5__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_UP, this._dragEndCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_CLICK, this._dragEndCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.TOUCH_END, this._dragEndCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.TOUCH_DRAG, this._dragCallback);
        };
        this._deactivateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_5__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_UP, this._dragEndCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_CLICK, this._dragEndCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.TOUCH_END, this._dragEndCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.TOUCH_DRAG, this._dragCallback);
        };
    }
    _getReferencedImageId(viewport) {
        const targetId = this.getTargetId(viewport);
        let referencedImageId;
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.StackViewport) {
            referencedImageId = targetId.split('imageId:')[1];
        }
        return referencedImageId;
    }
}
MagnifyTool.toolName = 'Magnify';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MagnifyTool);
//# sourceMappingURL=MagnifyTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js":
/*!****************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");


class PanTool extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
    }) {
        super(toolProps, defaultToolProps);
    }
    touchDragCallback(evt) {
        this._dragCallback(evt);
    }
    mouseDragCallback(evt) {
        this._dragCallback(evt);
    }
    _dragCallback(evt) {
        const { element, deltaPoints } = evt.detail;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const deltaPointsWorld = deltaPoints.world;
        const camera = enabledElement.viewport.getCamera();
        const { focalPoint, position } = camera;
        const updatedPosition = [
            position[0] - deltaPointsWorld[0],
            position[1] - deltaPointsWorld[1],
            position[2] - deltaPointsWorld[2],
        ];
        const updatedFocalPoint = [
            focalPoint[0] - deltaPointsWorld[0],
            focalPoint[1] - deltaPointsWorld[1],
            focalPoint[2] - deltaPointsWorld[2],
        ];
        enabledElement.viewport.setCamera({
            focalPoint: updatedFocalPoint,
            position: updatedPosition,
        });
        enabledElement.viewport.render();
    }
}
PanTool.toolName = 'Pan';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PanTool);
//# sourceMappingURL=PanTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js":
/*!*************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _utilities_math_angle_angleBetweenLines__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utilities/math/angle/angleBetweenLines */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/angle/angleBetweenLines.js");




class PlanarRotateTool extends _base__WEBPACK_IMPORTED_MODULE_2__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
    }) {
        super(toolProps, defaultToolProps);
        this.touchDragCallback = this._dragCallback.bind(this);
        this.mouseDragCallback = this._dragCallback.bind(this);
    }
    _dragCallback(evt) {
        const { element, currentPoints, startPoints } = evt.detail;
        const currentPointWorld = currentPoints.world;
        const startPointWorld = startPoints.world;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
        const { viewport } = enabledElement;
        const camera = viewport.getCamera();
        const width = element.clientWidth;
        const height = element.clientHeight;
        const centerCanvas = [width * 0.5, height * 0.5];
        const centerWorld = viewport.canvasToWorld(centerCanvas);
        let angle = (0,_utilities_math_angle_angleBetweenLines__WEBPACK_IMPORTED_MODULE_3__["default"])([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);
        const { viewPlaneNormal, viewUp } = camera;
        const v1 = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.sub(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), centerWorld, startPointWorld);
        const v2 = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.sub(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), centerWorld, currentPointWorld);
        const cross = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.cross(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), v1, v2);
        if (gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(viewPlaneNormal, cross) > 0) {
            angle = -angle;
        }
        if (Number.isNaN(angle))
            return;
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.BaseVolumeViewport) {
            const rotAngle = (angle * Math.PI) / 180;
            const rotMat = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.mat4.identity(new Float32Array(16));
            gl_matrix__WEBPACK_IMPORTED_MODULE_1__.mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);
            const rotatedViewUp = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), viewUp, rotMat);
            viewport.setCamera({ viewUp: rotatedViewUp });
        }
        else {
            const { rotation } = viewport.getProperties();
            viewport.setProperties({ rotation: rotation + angle });
        }
        viewport.render();
    }
}
PlanarRotateTool.toolName = 'PlanarRotate';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlanarRotateTool);
//# sourceMappingURL=PlanarRotateTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js":
/*!*************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../stateManagement/annotation/annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _base_AnnotationDisplayTool__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base/AnnotationDisplayTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationDisplayTool.js");
/* harmony import */ var _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @kitware/vtk.js/Common/Core/Math */ "../../../node_modules/@kitware/vtk.js/Common/Core/Math.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");











class ReferenceCursors extends _base_AnnotationDisplayTool__WEBPACK_IMPORTED_MODULE_7__["default"] {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            shadow: true,
            preventHandleOutsideImage: false,
            displayThreshold: 5,
            positionSync: true,
            disableCursor: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.isDrawing = false;
        this.isHandleOutsideImage = false;
        this._elementWithCursor = null;
        this._currentCursorWorldPosition = null;
        this._currentCanvasPosition = null;
        this._disableCursorEnabled = false;
        this.mouseMoveCallback = (evt) => {
            const { detail } = evt;
            const { element, currentPoints } = detail;
            this._currentCursorWorldPosition = currentPoints.world;
            this._currentCanvasPosition = currentPoints.canvas;
            this._elementWithCursor = element;
            const annotation = this.getActiveAnnotation(element);
            if (annotation === null) {
                this.createInitialAnnotation(currentPoints.world, element);
                return false;
            }
            this.updateAnnotationPosition(element, annotation);
            return false;
        };
        this.createInitialAnnotation = (worldPos, element) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            if (!enabledElement)
                throw new Error('No enabled element found');
            const { viewport, renderingEngine } = enabledElement;
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            if (!viewPlaneNormal || !viewUp)
                throw new Error('Camera not found');
            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                highlighted: true,
                invalidated: true,
                metadata: {
                    toolName: this.getToolName(),
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                },
                data: {
                    label: '',
                    handles: {
                        points: [[...worldPos]],
                        activeHandleIndex: null,
                        textBox: {
                            hasMoved: false,
                            worldPosition: [0, 0, 0],
                            worldBoundingBox: {
                                topLeft: [0, 0, 0],
                                topRight: [0, 0, 0],
                                bottomLeft: [0, 0, 0],
                                bottomRight: [0, 0, 0],
                            },
                        },
                    },
                },
            };
            const annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_1__.getAnnotations)(this.getToolName(), element);
            if (annotations.length > 0)
                return null;
            const annotationId = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_1__.addAnnotation)(annotation, element);
            if (annotationId === null)
                return;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_4__.getViewportIdsWithToolToRender)(element, this.getToolName(), false);
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_5__["default"])(renderingEngine, viewportIdsToRender);
        };
        this.onCameraModified = (evt) => {
            const eventDetail = evt.detail;
            const { element, previousCamera, camera } = eventDetail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const viewport = enabledElement.viewport;
            if (element !== this._elementWithCursor)
                return;
            const oldFocalPoint = previousCamera.focalPoint;
            const cameraNormal = camera.viewPlaneNormal;
            const newFocalPoint = camera.focalPoint;
            const deltaCameraFocalPoint = [0, 0, 0];
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_8__["default"].subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);
            if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0)
                return;
            const dotProduct = _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_8__["default"].dot(deltaCameraFocalPoint, cameraNormal);
            if (Math.abs(dotProduct) < 1e-2)
                return;
            if (!this._currentCanvasPosition)
                return;
            const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);
            this._currentCursorWorldPosition = newWorldPos;
            this.updateAnnotationPosition(element, this.getActiveAnnotation(element));
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport, FrameOfReferenceUID } = enabledElement;
            const isElementWithCursor = this._elementWithCursor === viewport.element;
            if (this.configuration.positionSync && !isElementWithCursor) {
                this.updateViewportImage(viewport);
            }
            const { element } = viewport;
            let annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_1__.getAnnotations)(this.getToolName(), element);
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const { annotationUID, data } = annotation;
                const { handles } = data;
                const { points } = handles;
                if (!annotationUID)
                    return renderStatus;
                styleSpecifier.annotationUID = annotationUID;
                const lineWidthBase = parseFloat(this.getStyle('lineWidth', styleSpecifier, annotation));
                const lineWidth = typeof lineWidthBase === 'number' && isElementWithCursor
                    ? lineWidthBase
                    : lineWidthBase;
                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
                const color = this.getStyle('color', styleSpecifier, annotation);
                if (points[0].some((e) => isNaN(e)))
                    return renderStatus;
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                if (!(0,_stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_2__.isAnnotationVisible)(annotationUID)) {
                    continue;
                }
                const crosshairUIDs = {
                    upper: 'upper',
                    right: 'right',
                    lower: 'lower',
                    left: 'left',
                };
                const [x, y] = canvasCoordinates[0];
                const centerSpace = isElementWithCursor ? 20 : 7;
                const lineLength = isElementWithCursor ? 5 : 7;
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_3__.drawLine)(svgDrawingHelper, annotationUID, crosshairUIDs.upper, [x, y - (centerSpace / 2 + lineLength)], [x, y - centerSpace / 2], { color, lineDash, lineWidth });
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_3__.drawLine)(svgDrawingHelper, annotationUID, crosshairUIDs.lower, [x, y + (centerSpace / 2 + lineLength)], [x, y + centerSpace / 2], { color, lineDash, lineWidth });
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_3__.drawLine)(svgDrawingHelper, annotationUID, crosshairUIDs.right, [x + (centerSpace / 2 + lineLength), y], [x + centerSpace / 2, y], { color, lineDash, lineWidth });
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_3__.drawLine)(svgDrawingHelper, annotationUID, crosshairUIDs.left, [x - (centerSpace / 2 + lineLength), y], [x - centerSpace / 2, y], { color, lineDash, lineWidth });
                renderStatus = true;
            }
            return renderStatus;
        };
        this._disableCursorEnabled = this.configuration.disableCursor;
    }
    onSetToolActive() {
        this._disableCursorEnabled = this.configuration.disableCursor;
        if (!this._disableCursorEnabled)
            return;
        const viewportIds = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_10__.getToolGroup)(this.toolGroupId).viewportsInfo;
        if (!viewportIds)
            return;
        const enabledElements = viewportIds.map((e) => (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElementByIds)(e.viewportId, e.renderingEngineId));
        enabledElements.forEach((element) => {
            if (element)
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_9__.hideElementCursor)(element.viewport.element);
        });
    }
    onSetToolDisabled() {
        if (!this._disableCursorEnabled)
            return;
        const viewportIds = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_10__.getToolGroup)(this.toolGroupId).viewportsInfo;
        if (!viewportIds)
            return;
        const enabledElements = viewportIds.map((e) => (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElementByIds)(e.viewportId, e.renderingEngineId));
        enabledElements.forEach((element) => {
            if (element)
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_9__.resetElementCursor)(element.viewport.element);
        });
    }
    getActiveAnnotation(element) {
        const annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_1__.getAnnotations)(this.getToolName(), element);
        if (!annotations.length) {
            return null;
        }
        const targetAnnotation = annotations[0];
        return targetAnnotation;
    }
    updateAnnotationPosition(element, annotation) {
        const worldPos = this._currentCursorWorldPosition;
        if (!worldPos)
            return;
        if (!annotation.data?.handles?.points)
            return;
        annotation.data.handles.points = [[...worldPos]];
        annotation.invalidated = true;
        const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_4__.getViewportIdsWithToolToRender)(element, this.getToolName(), false);
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
        if (!enabledElement)
            return;
        const { renderingEngine } = enabledElement;
        (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_5__["default"])(renderingEngine, viewportIdsToRender);
    }
    filterInteractableAnnotationsForElement(element, annotations) {
        if (!(annotations instanceof Array) || annotations.length === 0)
            return [];
        const annotation = annotations[0];
        const viewport = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element)?.viewport;
        if (!viewport)
            return [];
        const camera = viewport.getCamera();
        const { viewPlaneNormal, focalPoint } = camera;
        if (!viewPlaneNormal || !focalPoint)
            return [];
        const points = annotation.data?.handles?.points;
        if (!(points instanceof Array) || points.length !== 1)
            return [];
        const worldPos = points[0];
        const plane = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.planar.planeEquation(viewPlaneNormal, focalPoint);
        const distance = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.planar.planeDistanceToPoint(plane, worldPos);
        return distance < this.configuration.displayThreshold ? [annotation] : [];
    }
    updateViewportImage(viewport) {
        const currentMousePosition = this._currentCursorWorldPosition;
        if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e)))
            return;
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
            const closestIndex = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getClosestStackImageIndexForPoint(currentMousePosition, viewport);
            if (closestIndex === null)
                return;
            if (closestIndex !== viewport.getCurrentImageIdIndex())
                viewport.setImageIdIndex(closestIndex);
        }
        else if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.VolumeViewport) {
            const { focalPoint, viewPlaneNormal } = viewport.getCamera();
            if (!focalPoint || !viewPlaneNormal)
                return;
            const plane = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.planar.planeEquation(viewPlaneNormal, focalPoint);
            const currentDistance = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.planar.planeDistanceToPoint(plane, currentMousePosition, true);
            if (Math.abs(currentDistance) < 0.5)
                return;
            const normalizedViewPlane = gl_matrix__WEBPACK_IMPORTED_MODULE_6__.vec3.normalize(gl_matrix__WEBPACK_IMPORTED_MODULE_6__.vec3.create(), gl_matrix__WEBPACK_IMPORTED_MODULE_6__.vec3.fromValues(...viewPlaneNormal));
            const scaledPlaneNormal = gl_matrix__WEBPACK_IMPORTED_MODULE_6__.vec3.scale(gl_matrix__WEBPACK_IMPORTED_MODULE_6__.vec3.create(), normalizedViewPlane, currentDistance);
            const newFocalPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_6__.vec3.add(gl_matrix__WEBPACK_IMPORTED_MODULE_6__.vec3.create(), gl_matrix__WEBPACK_IMPORTED_MODULE_6__.vec3.fromValues(...focalPoint), scaledPlaneNormal);
            const isInBounds = true;
            if (isInBounds) {
                viewport.setCamera({ focalPoint: newFocalPoint });
                const renderingEngine = viewport.getRenderingEngine();
                if (renderingEngine)
                    renderingEngine.renderViewport(viewport.id);
            }
        }
    }
}
ReferenceCursors.toolName = 'ReferenceCursors';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReferenceCursors);
//# sourceMappingURL=ReferenceCursors.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js":
/*!***************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _base_AnnotationDisplayTool__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./base/AnnotationDisplayTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationDisplayTool.js");







const { EPSILON } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.CONSTANTS;
class ReferenceLines extends _base_AnnotationDisplayTool__WEBPACK_IMPORTED_MODULE_6__["default"] {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            sourceViewportId: '',
        },
    }) {
        super(toolProps, defaultToolProps);
        this.editData = {};
        this._init = () => {
            const renderingEngines = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getRenderingEngines)();
            const renderingEngine = renderingEngines[0];
            if (!renderingEngine) {
                return;
            }
            let viewports = renderingEngine.getViewports();
            viewports = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_4__.filterViewportsWithToolEnabled)(viewports, this.getToolName());
            const sourceViewport = renderingEngine.getViewport(this.configuration.sourceViewportId);
            if (!sourceViewport || !sourceViewport.getImageData()) {
                return;
            }
            const { element } = sourceViewport;
            const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();
            const sourceViewportCanvasCornersInWorld = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.getViewportImageCornersInWorld(sourceViewport);
            let annotation = this.editData.annotation;
            const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();
            if (!annotation) {
                const newAnnotation = {
                    highlighted: true,
                    invalidated: true,
                    metadata: {
                        toolName: this.getToolName(),
                        viewPlaneNormal: [...viewPlaneNormal],
                        viewUp: [...viewUp],
                        FrameOfReferenceUID,
                        referencedImageId: null,
                    },
                    data: {
                        handles: {
                            points: sourceViewportCanvasCornersInWorld,
                        },
                    },
                };
                (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_2__.addAnnotation)(newAnnotation, element);
                annotation = newAnnotation;
            }
            else {
                this.editData.annotation.data.handles.points =
                    sourceViewportCanvasCornersInWorld;
            }
            this.editData = {
                sourceViewport,
                renderingEngine,
                annotation,
            };
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_5__["default"])(renderingEngine, viewports
                .filter((viewport) => viewport.id !== sourceViewport.id)
                .map((viewport) => viewport.id));
        };
        this.onSetToolEnabled = () => {
            this._init();
        };
        this.onCameraModified = (evt) => {
            this._init();
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            const { viewport: targetViewport } = enabledElement;
            const { annotation, sourceViewport } = this.editData;
            let renderStatus = false;
            if (!sourceViewport) {
                return renderStatus;
            }
            if (sourceViewport.id === targetViewport.id) {
                return renderStatus;
            }
            if (!annotation || !annotation?.data?.handles?.points) {
                return renderStatus;
            }
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            const topLeft = annotation.data.handles.points[0];
            const topRight = annotation.data.handles.points[1];
            const bottomLeft = annotation.data.handles.points[2];
            const bottomRight = annotation.data.handles.points[3];
            const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();
            const { viewPlaneNormal: sourceViewPlaneNormal } = sourceViewport.getCamera();
            if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {
                return renderStatus;
            }
            const targetViewportPlane = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.planar.planeEquation(viewPlaneNormal, focalPoint);
            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];
            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];
            let pointSetToUse = pointSet1;
            let topBottomVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.subtract(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), pointSet1[0], pointSet1[1]);
            topBottomVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.normalize(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), topBottomVec);
            let topRightVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.subtract(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), pointSet1[2], pointSet1[0]);
            topRightVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.normalize(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), topRightVec);
            const newNormal = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.cross(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), topBottomVec, topRightVec);
            if (this.isParallel(newNormal, viewPlaneNormal)) {
                return renderStatus;
            }
            if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {
                pointSetToUse = pointSet2;
            }
            const lineStartWorld = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);
            const lineEndWorld = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);
            const { annotationUID } = annotation;
            styleSpecifier.annotationUID = annotationUID;
            const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
            const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
            const color = this.getStyle('color', styleSpecifier, annotation);
            const shadow = this.getStyle('shadow', styleSpecifier, annotation);
            const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));
            const dataId = `${annotationUID}-line`;
            const lineUID = '1';
            (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_3__.drawLine)(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
                color,
                width: lineWidth,
                lineDash,
                shadow,
            }, dataId);
            renderStatus = true;
            return renderStatus;
        };
        this.isPerpendicular = (vec1, vec2) => {
            const dot = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.dot(vec1, vec2);
            return Math.abs(dot) < EPSILON;
        };
    }
    isParallel(vec1, vec2) {
        return Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.dot(vec1, vec2)) > 1 - EPSILON;
    }
}
ReferenceLines.toolName = 'ReferenceLines';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReferenceLines);
//# sourceMappingURL=ReferenceLinesTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js":
/*!*************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _base_AnnotationDisplayTool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base/AnnotationDisplayTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationDisplayTool.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");






const SCALEOVERLAYTOOL_ID = 'scaleoverlay-viewport';
const viewportsWithAnnotations = [];
class ScaleOverlayTool extends _base_AnnotationDisplayTool__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(toolProps = {}, defaultToolProps = {
        configuration: {
            viewportId: '',
            scaleLocation: 'bottom',
        },
    }) {
        super(toolProps, defaultToolProps);
        this.editData = {};
        this._init = () => {
            const renderingEngines = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getRenderingEngines)();
            const renderingEngine = renderingEngines[0];
            if (!renderingEngine) {
                return;
            }
            const viewportIds = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_5__.getToolGroup)(this.toolGroupId).viewportsInfo;
            if (!viewportIds)
                return;
            const enabledElements = viewportIds.map((e) => (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElementByIds)(e.viewportId, e.renderingEngineId));
            let { viewport } = enabledElements[0];
            const { FrameOfReferenceUID } = enabledElements[0];
            if (this.configuration.viewportId) {
                enabledElements.forEach((element) => {
                    if (element.viewport.id == this.configuration.viewportId) {
                        viewport = element.viewport;
                    }
                });
            }
            if (!viewport) {
                return;
            }
            const { viewUp, viewPlaneNormal } = viewport.getCamera();
            const viewportCanvasCornersInWorld = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.utilities.getViewportImageCornersInWorld(viewport);
            let annotation = this.editData.annotation;
            const annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getAnnotations)(this.getToolName(), viewport.element);
            if (annotations.length) {
                annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];
            }
            if (!viewportsWithAnnotations.includes(viewport.id)) {
                const newAnnotation = {
                    metadata: {
                        toolName: this.getToolName(),
                        viewPlaneNormal: [...viewPlaneNormal],
                        viewUp: [...viewUp],
                        FrameOfReferenceUID,
                        referencedImageId: null,
                    },
                    data: {
                        handles: {
                            points: viewportCanvasCornersInWorld,
                        },
                        viewportId: viewport.id,
                    },
                };
                viewportsWithAnnotations.push(viewport.id);
                (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.addAnnotation)(newAnnotation, viewport.element);
                annotation = newAnnotation;
            }
            else if (this.editData.annotation.data.viewportId == viewport.id) {
                this.editData.annotation.data.handles.points =
                    viewportCanvasCornersInWorld;
                this.editData.annotation.data.viewportId = viewport.id;
            }
            this.editData = {
                viewport,
                renderingEngine,
                annotation,
            };
        };
        this.onSetToolEnabled = () => {
            this._init();
        };
        this.onCameraModified = (evt) => {
            this.configuration.viewportId = evt.detail.viewportId;
            this._init();
        };
        this.computeScaleSize = (worldWidthViewport, worldHeightViewport, location) => {
            const scaleSizes = [
                16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,
            ];
            let currentScaleSize;
            if (location == 'top' || location == 'bottom') {
                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldWidthViewport * 0.6 &&
                    scaleSize > worldWidthViewport * 0.2);
            }
            else {
                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldHeightViewport * 0.6 &&
                    scaleSize > worldHeightViewport * 0.2);
            }
            return currentScaleSize[0];
        };
        this.computeEndScaleTicks = (canvasCoordinates, location) => {
            const locationTickOffset = {
                bottom: [
                    [0, -10],
                    [0, -10],
                ],
                top: [
                    [0, 10],
                    [0, 10],
                ],
                left: [
                    [0, 0],
                    [10, 0],
                ],
                right: [
                    [0, 0],
                    [-10, 0],
                ],
            };
            const endTick1 = [
                [
                    canvasCoordinates[1][0] + locationTickOffset[location][0][0],
                    canvasCoordinates[1][1] + locationTickOffset[location][0][0],
                ],
                [
                    canvasCoordinates[1][0] + locationTickOffset[location][1][0],
                    canvasCoordinates[1][1] + locationTickOffset[location][1][1],
                ],
            ];
            const endTick2 = [
                [
                    canvasCoordinates[0][0] + locationTickOffset[location][0][0],
                    canvasCoordinates[0][1] + locationTickOffset[location][0][0],
                ],
                [
                    canvasCoordinates[0][0] + locationTickOffset[location][1][0],
                    canvasCoordinates[0][1] + locationTickOffset[location][1][1],
                ],
            ];
            return {
                endTick1: endTick1,
                endTick2: endTick2,
            };
        };
        this.computeInnerScaleTicks = (scaleSize, location, annotationUID, leftTick, rightTick) => {
            let canvasScaleSize;
            if (location == 'bottom' || location == 'top') {
                canvasScaleSize = rightTick[0][0] - leftTick[0][0];
            }
            else if (location == 'left' || location == 'right') {
                canvasScaleSize = rightTick[0][1] - leftTick[0][1];
            }
            const tickIds = [];
            const tickUIDs = [];
            const tickCoordinates = [];
            let numberSmallTicks = scaleSize;
            if (scaleSize >= 50) {
                numberSmallTicks = scaleSize / 10;
            }
            const tickSpacing = canvasScaleSize / numberSmallTicks;
            for (let i = 0; i < numberSmallTicks - 1; i++) {
                const locationOffset = {
                    bottom: [
                        [tickSpacing * (i + 1), 0],
                        [tickSpacing * (i + 1), 5],
                    ],
                    top: [
                        [tickSpacing * (i + 1), 0],
                        [tickSpacing * (i + 1), -5],
                    ],
                    left: [
                        [0, tickSpacing * (i + 1)],
                        [-5, tickSpacing * (i + 1)],
                    ],
                    right: [
                        [0, tickSpacing * (i + 1)],
                        [5, tickSpacing * (i + 1)],
                    ],
                };
                tickIds.push(`${annotationUID}-tick${i}`);
                tickUIDs.push(`tick${i}`);
                if ((i + 1) % 5 == 0) {
                    tickCoordinates.push([
                        [
                            leftTick[0][0] + locationOffset[location][0][0],
                            leftTick[0][1] + locationOffset[location][0][1],
                        ],
                        [
                            leftTick[1][0] + locationOffset[location][0][0],
                            leftTick[1][1] + locationOffset[location][0][1],
                        ],
                    ]);
                }
                else {
                    tickCoordinates.push([
                        [
                            leftTick[0][0] + locationOffset[location][0][0],
                            leftTick[0][1] + locationOffset[location][0][1],
                        ],
                        [
                            leftTick[1][0] + locationOffset[location][1][0],
                            leftTick[1][1] + locationOffset[location][1][1],
                        ],
                    ]);
                }
            }
            return { tickIds, tickUIDs, tickCoordinates };
        };
        this.computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {
            let worldCoordinates;
            let topBottomVec = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.subtract(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), pointSet[0], pointSet[1]);
            topBottomVec = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.normalize(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), topBottomVec);
            let topRightVec = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.subtract(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), pointSet[2], pointSet[0]);
            topRightVec = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.normalize(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), topRightVec);
            const midpointLocation = {
                bottom: [pointSet[1], pointSet[2]],
                top: [pointSet[0], pointSet[3]],
                right: [pointSet[2], pointSet[3]],
                left: [pointSet[0], pointSet[1]],
            };
            const midpoint = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.add(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), midpointLocation[location][0], midpointLocation[location][0])
                .map((i) => i / 2);
            const offset = scaleSize /
                2 /
                Math.sqrt(Math.pow(topBottomVec[0], 2) +
                    Math.pow(topBottomVec[1], 2) +
                    Math.pow(topBottomVec[2], 2));
            if (location == 'top' || location == 'bottom') {
                worldCoordinates = [
                    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.subtract(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), midpoint, topRightVec.map((i) => i * offset)),
                    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.add(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), midpoint, topRightVec.map((i) => i * offset)),
                ];
            }
            else if (location == 'left' || location == 'right') {
                worldCoordinates = [
                    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.add(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),
                    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.subtract(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),
                ];
            }
            return worldCoordinates;
        };
        this.computeCanvasScaleCoordinates = (canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location) => {
            let scaleCanvasCoordinates;
            if (location == 'top' || location == 'bottom') {
                const worldDistanceOnCanvas = canvasCoordinates[0][0] - canvasCoordinates[1][0];
                scaleCanvasCoordinates = [
                    [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],
                    [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],
                ];
            }
            else if (location == 'left' || location == 'right') {
                const worldDistanceOnCanvas = canvasCoordinates[0][1] - canvasCoordinates[1][1];
                scaleCanvasCoordinates = [
                    [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],
                    [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],
                ];
            }
            return scaleCanvasCoordinates;
        };
        this.computeScaleBounds = (canvasSize, horizontalReduction, verticalReduction, location) => {
            const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);
            const vReduction = verticalReduction * Math.min(1000, canvasSize.height);
            const locationBounds = {
                bottom: [-vReduction, -hReduction],
                top: [vReduction, hReduction],
                left: [vReduction, hReduction],
                right: [-vReduction, -hReduction],
            };
            const canvasBounds = {
                bottom: [canvasSize.height, canvasSize.width],
                top: [0, canvasSize.width],
                left: [canvasSize.height, 0],
                right: [canvasSize.height, canvasSize.width],
            };
            return {
                height: canvasBounds[location][0] + locationBounds[location][0],
                width: canvasBounds[location][1] + locationBounds[location][1],
            };
        };
    }
    renderAnnotation(enabledElement, svgDrawingHelper) {
        if (!this.editData.viewport) {
            return;
        }
        const location = this.configuration.scaleLocation;
        const { viewport } = enabledElement;
        const annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getAnnotations)(this.getToolName(), viewport.element);
        const annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];
        const canvas = enabledElement.viewport.canvas;
        const renderStatus = false;
        if (!viewport) {
            return renderStatus;
        }
        const styleSpecifier = {
            toolGroupId: this.toolGroupId,
            toolName: this.getToolName(),
            viewportId: enabledElement.viewport.id,
        };
        const canvasSize = {
            width: canvas.width,
            height: canvas.height,
        };
        const topLeft = annotation.data.handles.points[0];
        const topRight = annotation.data.handles.points[1];
        const bottomLeft = annotation.data.handles.points[2];
        const bottomRight = annotation.data.handles.points[3];
        const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];
        const worldWidthViewport = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.distance(bottomLeft, bottomRight);
        const worldHeightViewport = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.distance(topLeft, bottomLeft);
        const hscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);
        const vscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);
        const scaleSize = this.computeScaleSize(worldWidthViewport, worldHeightViewport, location);
        const canvasCoordinates = this.computeWorldScaleCoordinates(scaleSize, location, pointSet1).map((world) => viewport.worldToCanvas(world));
        const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location);
        const scaleTicks = this.computeEndScaleTicks(scaleCanvasCoordinates, location);
        const { annotationUID } = annotation;
        styleSpecifier.annotationUID = annotationUID;
        const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
        const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
        const color = this.getStyle('color', styleSpecifier, annotation);
        const shadow = this.getStyle('shadow', styleSpecifier, annotation);
        const scaleId = `${annotationUID}-scaleline`;
        const scaleLineUID = '1';
        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_4__.drawLine)(svgDrawingHelper, annotationUID, scaleLineUID, scaleCanvasCoordinates[0], scaleCanvasCoordinates[1], {
            color,
            width: lineWidth,
            lineDash,
            shadow,
        }, scaleId);
        const leftTickId = `${annotationUID}-left`;
        const leftTickUID = '2';
        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_4__.drawLine)(svgDrawingHelper, annotationUID, leftTickUID, scaleTicks.endTick1[0], scaleTicks.endTick1[1], {
            color,
            width: lineWidth,
            lineDash,
            shadow,
        }, leftTickId);
        const rightTickId = `${annotationUID}-right`;
        const rightTickUID = '3';
        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_4__.drawLine)(svgDrawingHelper, annotationUID, rightTickUID, scaleTicks.endTick2[0], scaleTicks.endTick2[1], {
            color,
            width: lineWidth,
            lineDash,
            shadow,
        }, rightTickId);
        const locationTextOffest = {
            bottom: [-10, -42],
            top: [-12, -35],
            left: [-40, -20],
            right: [-50, -20],
        };
        const textCanvasCoordinates = [
            scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],
            scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],
        ];
        const textBoxLines = this._getTextLines(scaleSize);
        const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(scaleSize, location, annotationUID, scaleTicks.endTick1, scaleTicks.endTick2);
        for (let i = 0; i < tickUIDs.length; i++) {
            (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_4__.drawLine)(svgDrawingHelper, annotationUID, tickUIDs[i], tickCoordinates[i][0], tickCoordinates[i][1], {
                color,
                width: lineWidth,
                lineDash,
                shadow,
            }, tickIds[i]);
        }
        const textUID = 'text0';
        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_4__.drawTextBox)(svgDrawingHelper, annotationUID, textUID, textBoxLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], {
            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',
            fontSize: '14px',
            lineDash: '2,3',
            lineWidth: '1',
            shadow: true,
            color: color,
        });
        return renderStatus;
    }
    _getTextLines(scaleSize) {
        let scaleSizeDisplayValue;
        let scaleSizeUnits;
        if (scaleSize >= 50) {
            scaleSizeDisplayValue = scaleSize / 10;
            scaleSizeUnits = ' cm';
        }
        else {
            scaleSizeDisplayValue = scaleSize;
            scaleSizeUnits = ' mm';
        }
        const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];
        return textLines;
    }
}
ScaleOverlayTool.toolName = 'ScaleOverlay';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ScaleOverlayTool);
//# sourceMappingURL=ScaleOverlayTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js":
/*!************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");



class StackScrollTool extends _base__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            invert: false,
            debounceIfNotLoaded: true,
            loop: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.deltaY = 1;
    }
    mouseDragCallback(evt) {
        this._dragCallback(evt);
    }
    touchDragCallback(evt) {
        this._dragCallback(evt);
    }
    _dragCallback(evt) {
        const { deltaPoints, viewportId, renderingEngineId } = evt.detail;
        const { viewport } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElementByIds)(viewportId, renderingEngineId);
        const targetId = this.getTargetId(viewport);
        const { debounceIfNotLoaded, invert, loop } = this.configuration;
        const deltaPointY = deltaPoints.canvas[1];
        let volumeId;
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.VolumeViewport) {
            volumeId = targetId.split('volumeId:')[1];
        }
        const pixelsPerImage = this._getPixelPerImage(viewport);
        const deltaY = deltaPointY + this.deltaY;
        if (!pixelsPerImage) {
            return;
        }
        if (Math.abs(deltaY) >= pixelsPerImage) {
            const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);
            (0,_utilities__WEBPACK_IMPORTED_MODULE_2__.scroll)(viewport, {
                delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,
                volumeId,
                debounceLoading: debounceIfNotLoaded,
                loop: loop,
            });
            this.deltaY = deltaY % pixelsPerImage;
        }
        else {
            this.deltaY = deltaY;
        }
    }
    _getPixelPerImage(viewport) {
        const { element } = viewport;
        const numberOfSlices = this._getNumberOfSlices(viewport);
        return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));
    }
    _getNumberOfSlices(viewport) {
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.VolumeViewport) {
            const { numberOfSlices } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getImageSliceDataForVolumeViewport(viewport);
            return numberOfSlices;
        }
        else if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
            return viewport.getImageIds().length;
        }
    }
}
StackScrollTool.toolName = 'StackScroll';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StackScrollTool);
//# sourceMappingURL=StackScrollTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollToolMouseWheelTool.js":
/*!**************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollToolMouseWheelTool.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _utilities_scroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utilities/scroll */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/scroll.js");



class StackScrollMouseWheelTool extends _base__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            invert: false,
            debounceIfNotLoaded: true,
            loop: false,
        },
    }) {
        super(toolProps, defaultToolProps);
    }
    mouseWheelCallback(evt) {
        const { wheel, element } = evt.detail;
        const { direction } = wheel;
        const { invert } = this.configuration;
        const { viewport } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
        const delta = direction * (invert ? -1 : 1);
        const targetId = this.getTargetId(viewport);
        const volumeId = targetId.split('volumeId:')[1];
        (0,_utilities_scroll__WEBPACK_IMPORTED_MODULE_2__["default"])(viewport, {
            delta,
            debounceLoading: this.configuration.debounceIfNotLoaded,
            loop: this.configuration.loop,
            volumeId,
        });
    }
}
StackScrollMouseWheelTool.toolName = 'StackScrollMouseWheel';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StackScrollMouseWheelTool);
//# sourceMappingURL=StackScrollToolMouseWheelTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js":
/*!****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @kitware/vtk.js/Common/Core/Math */ "../../../node_modules/@kitware/vtk.js/Common/Core/Math.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");




class TrackballRotateTool extends _base__WEBPACK_IMPORTED_MODULE_3__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            rotateIncrementDegrees: 2,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.rotateCamera = (viewport, centerWorld, axis, angle) => {
            const vtkCamera = viewport.getVtkActiveCamera();
            const viewUp = vtkCamera.getViewUp();
            const focalPoint = vtkCamera.getFocalPoint();
            const position = vtkCamera.getPosition();
            const newPosition = [0, 0, 0];
            const newFocalPoint = [0, 0, 0];
            const newViewUp = [0, 0, 0];
            const transform = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.identity(new Float32Array(16));
            gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.translate(transform, transform, centerWorld);
            gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.rotate(transform, transform, angle, axis);
            gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.translate(transform, transform, [
                -centerWorld[0],
                -centerWorld[1],
                -centerWorld[2],
            ]);
            gl_matrix__WEBPACK_IMPORTED_MODULE_2__.vec3.transformMat4(newPosition, position, transform);
            gl_matrix__WEBPACK_IMPORTED_MODULE_2__.vec3.transformMat4(newFocalPoint, focalPoint, transform);
            gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.identity(transform);
            gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.rotate(transform, transform, angle, axis);
            gl_matrix__WEBPACK_IMPORTED_MODULE_2__.vec3.transformMat4(newViewUp, viewUp, transform);
            viewport.setCamera({
                position: newPosition,
                viewUp: newViewUp,
                focalPoint: newFocalPoint,
            });
        };
        this.touchDragCallback = this._dragCallback.bind(this);
        this.mouseDragCallback = this._dragCallback.bind(this);
    }
    _dragCallback(evt) {
        const { element, currentPoints, lastPoints } = evt.detail;
        const currentPointsCanvas = currentPoints.canvas;
        const lastPointsCanvas = lastPoints.canvas;
        const { rotateIncrementDegrees } = this.configuration;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const { viewport } = enabledElement;
        const camera = viewport.getCamera();
        const width = element.clientWidth;
        const height = element.clientHeight;
        const normalizedPosition = [
            currentPointsCanvas[0] / width,
            currentPointsCanvas[1] / height,
        ];
        const normalizedPreviousPosition = [
            lastPointsCanvas[0] / width,
            lastPointsCanvas[1] / height,
        ];
        const center = [width * 0.5, height * 0.5];
        const centerWorld = viewport.canvasToWorld(center);
        const normalizedCenter = [0.5, 0.5];
        const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;
        const op = [normalizedPreviousPosition[0], 0, 0];
        const oe = [normalizedPosition[0], 0, 0];
        const opsq = op[0] ** 2;
        const oesq = oe[0] ** 2;
        const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);
        const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);
        const nop = [op[0], 0, lop];
        _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__["default"].normalize(nop);
        const noe = [oe[0], 0, loe];
        _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__["default"].normalize(noe);
        const dot = _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__["default"].dot(nop, noe);
        if (Math.abs(dot) > 0.0001) {
            const angleX = -2 *
                Math.acos(_kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__["default"].clampValue(dot, -1.0, 1.0)) *
                Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *
                rotateIncrementDegrees;
            const upVec = camera.viewUp;
            const atV = camera.viewPlaneNormal;
            const rightV = [0, 0, 0];
            const forwardV = [0, 0, 0];
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__["default"].cross(upVec, atV, rightV);
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__["default"].normalize(rightV);
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__["default"].cross(atV, rightV, forwardV);
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__["default"].normalize(forwardV);
            _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__["default"].normalize(upVec);
            this.rotateCamera(viewport, centerWorld, forwardV, angleX);
            const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *
                rotateIncrementDegrees;
            this.rotateCamera(viewport, centerWorld, rightV, angleY);
            viewport.render();
        }
    }
}
TrackballRotateTool.toolName = 'TrackballRotate';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TrackballRotateTool);
//# sourceMappingURL=TrackballRotateTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateMouseWheelTool.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateMouseWheelTool.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");



const DIRECTIONS = {
    X: [1, 0, 0],
    Y: [0, 1, 0],
    Z: [0, 0, 1],
    CUSTOM: [],
};
class VolumeRotateMouseWheelTool extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            direction: DIRECTIONS.Z,
            rotateIncrementDegrees: 0.5,
        },
    }) {
        super(toolProps, defaultToolProps);
    }
    mouseWheelCallback(evt) {
        const { element, wheel } = evt.detail;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const { viewport } = enabledElement;
        const { direction, rotateIncrementDegrees } = this.configuration;
        const camera = viewport.getCamera();
        const { viewUp, position, focalPoint } = camera;
        const { direction: deltaY } = wheel;
        const [cx, cy, cz] = focalPoint;
        const [ax, ay, az] = direction;
        const angle = deltaY * rotateIncrementDegrees;
        const newPosition = [0, 0, 0];
        const newFocalPoint = [0, 0, 0];
        const newViewUp = [0, 0, 0];
        const transform = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.identity(new Float32Array(16));
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.translate(transform, transform, [cx, cy, cz]);
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.rotate(transform, transform, angle, [ax, ay, az]);
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.translate(transform, transform, [-cx, -cy, -cz]);
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.vec3.transformMat4(newPosition, position, transform);
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.vec3.transformMat4(newFocalPoint, focalPoint, transform);
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.identity(transform);
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.mat4.rotate(transform, transform, angle, [ax, ay, az]);
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.vec3.transformMat4(newViewUp, viewUp, transform);
        viewport.setCamera({
            position: newPosition,
            viewUp: newViewUp,
            focalPoint: newFocalPoint,
        });
        viewport.render();
    }
}
VolumeRotateMouseWheelTool.toolName = 'VolumeRotateMouseWheel';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VolumeRotateMouseWheelTool);
//# sourceMappingURL=VolumeRotateMouseWheelTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js":
/*!************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");


const DEFAULT_MULTIPLIER = 4;
const DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;
const PT = 'PT';
class WindowLevelTool extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
    }) {
        super(toolProps, defaultToolProps);
        this._getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {
            const middleSliceIndex = Math.floor(dimensions[2] / 2);
            const frameLength = dimensions[0] * dimensions[1];
            let bytesPerVoxel;
            let TypedArrayConstructor;
            if (scalarData instanceof Float32Array) {
                bytesPerVoxel = 4;
                TypedArrayConstructor = Float32Array;
            }
            else if (scalarData instanceof Uint8Array) {
                bytesPerVoxel = 1;
                TypedArrayConstructor = Uint8Array;
            }
            else if (scalarData instanceof Uint16Array) {
                bytesPerVoxel = 2;
                TypedArrayConstructor = Uint16Array;
            }
            else if (scalarData instanceof Int16Array) {
                bytesPerVoxel = 2;
                TypedArrayConstructor = Int16Array;
            }
            const buffer = scalarData.buffer;
            const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;
            const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);
            const { max, min } = this._getMinMax(frame, frameLength);
            return max - min;
        };
    }
    touchDragCallback(evt) {
        this.mouseDragCallback(evt);
    }
    mouseDragCallback(evt) {
        const { element, deltaPoints } = evt.detail;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const { renderingEngine, viewport } = enabledElement;
        let volumeId, lower, upper, modality, newRange, viewportsContainingVolumeUID;
        let isPreScaled = false;
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.VolumeViewport) {
            const targetId = this.getTargetId(viewport);
            volumeId = targetId.split('volumeId:')[1];
            viewportsContainingVolumeUID = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.getViewportsWithVolumeId(volumeId, renderingEngine.id);
            const properties = viewport.getProperties();
            ({ lower, upper } = properties.voiRange);
            const volume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.cache.getVolume(volumeId);
            modality = volume.metadata.Modality;
            isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;
        }
        else if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.StackViewport) {
            const properties = viewport.getProperties();
            modality = viewport.modality;
            ({ lower, upper } = properties.voiRange);
            const { preScale } = viewport.getImageData();
            isPreScaled =
                preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;
        }
        else {
            throw new Error('Viewport is not a valid type');
        }
        if (modality === PT) {
            newRange = this.getPTScaledNewRange({
                deltaPointsCanvas: deltaPoints.canvas,
                lower,
                upper,
                clientHeight: element.clientHeight,
                isPreScaled,
                viewport,
                volumeId,
            });
        }
        else {
            newRange = this.getNewRange({
                viewport,
                deltaPointsCanvas: deltaPoints.canvas,
                volumeId,
                lower,
                upper,
            });
        }
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.StackViewport) {
            viewport.setProperties({
                voiRange: newRange,
            });
            viewport.render();
            return;
        }
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.VolumeViewport) {
            viewport.setProperties({
                voiRange: newRange,
            });
            viewportsContainingVolumeUID.forEach((vp) => {
                vp.render();
            });
            return;
        }
    }
    getPTScaledNewRange({ deltaPointsCanvas, lower, upper, clientHeight, viewport, volumeId, isPreScaled, }) {
        let multiplier = DEFAULT_MULTIPLIER;
        if (isPreScaled) {
            multiplier = 5 / clientHeight;
        }
        else {
            multiplier =
                this._getMultiplierFromDynamicRange(viewport, volumeId) ||
                    DEFAULT_MULTIPLIER;
        }
        const deltaY = deltaPointsCanvas[1];
        const wcDelta = deltaY * multiplier;
        upper -= wcDelta;
        upper = isPreScaled ? Math.max(upper, 0.1) : upper;
        return { lower, upper };
    }
    getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {
        const multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) ||
            DEFAULT_MULTIPLIER;
        const wwDelta = deltaPointsCanvas[0] * multiplier;
        const wcDelta = deltaPointsCanvas[1] * multiplier;
        let { windowWidth, windowCenter } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.windowLevel.toWindowLevel(lower, upper);
        windowWidth += wwDelta;
        windowCenter += wcDelta;
        windowWidth = Math.max(windowWidth, 1);
        return _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.windowLevel.toLowHighRange(windowWidth, windowCenter);
    }
    _getMultiplierFromDynamicRange(viewport, volumeId) {
        let imageDynamicRange;
        if (volumeId) {
            const imageVolume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.cache.getVolume(volumeId);
            const { dimensions } = imageVolume;
            const scalarData = imageVolume.getScalarData();
            const calculatedDynamicRange = this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);
            const BitsStored = imageVolume?.metadata?.BitsStored;
            const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;
            imageDynamicRange = Math.min(calculatedDynamicRange, metadataDynamicRange);
        }
        else {
            imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);
        }
        const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;
        let multiplier = DEFAULT_MULTIPLIER;
        if (ratio > 1) {
            multiplier = Math.round(ratio);
        }
        return multiplier;
    }
    _getImageDynamicRangeFromViewport(viewport) {
        const { imageData } = viewport.getImageData();
        const dimensions = imageData.getDimensions();
        let scalarData;
        if (imageData.getScalarData) {
            scalarData = imageData.getScalarData();
        }
        else {
            scalarData = imageData.getPointData().getScalars();
        }
        if (dimensions[2] !== 1) {
            return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);
        }
        let range;
        if (scalarData.getRange) {
            range = scalarData.getRange();
        }
        else {
            const { min, max } = this._getMinMax(scalarData, scalarData.length);
            range = [min, max];
        }
        return range[1] - range[0];
    }
    _getMinMax(frame, frameLength) {
        let min = Infinity;
        let max = -Infinity;
        for (let i = 0; i < frameLength; i++) {
            const voxel = frame[i];
            if (voxel < min) {
                min = voxel;
            }
            if (voxel > max) {
                max = voxel;
            }
        }
        return { max, min };
    }
}
WindowLevelTool.toolName = 'WindowLevel';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WindowLevelTool);
//# sourceMappingURL=WindowLevelTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js":
/*!*****************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @kitware/vtk.js/Common/Core/Math */ "../../../node_modules/@kitware/vtk.js/Common/Core/Math.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");




class ZoomTool extends _base__WEBPACK_IMPORTED_MODULE_3__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            zoomToCenter: false,
            minZoomScale: 0.1,
            maxZoomScale: 30,
            pinchToZoom: true,
            pan: true,
            invert: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.preMouseDownCallback = (evt) => {
            const eventData = evt.detail;
            const { element, currentPoints } = eventData;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
            const camera = enabledElement.viewport.getCamera();
            const { focalPoint } = camera;
            this.initialMousePosWorld = worldPos;
            let dirVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);
            dirVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.normalize(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), dirVec);
            this.dirVec = dirVec;
            return false;
        };
        this.preTouchStartCallback = (evt) => {
            if (!this.configuration.pinchToZoom) {
                return this.preMouseDownCallback(evt);
            }
        };
        this._dragParallelProjection = (evt, viewport, camera, pinch = false) => {
            const { element, deltaPoints } = evt.detail;
            const deltaY = pinch
                ? evt.detail.deltaDistance.canvas
                : deltaPoints.canvas[1];
            const size = [element.clientWidth, element.clientHeight];
            const { parallelScale, focalPoint, position } = camera;
            const zoomScale = 1.5 / size[1];
            const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);
            let parallelScaleToSet = (1.0 - k) * parallelScale;
            let focalPointToSet = focalPoint;
            let positionToSet = position;
            if (!this.configuration.zoomToCenter) {
                const distanceToCanvasCenter = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.distance(focalPoint, this.initialMousePosWorld);
                const zoomScale = 5 / size[1];
                const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);
                parallelScaleToSet = (1.0 - k) * parallelScale;
                positionToSet = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.scaleAndAdd(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), position, this.dirVec, -distanceToCanvasCenter * k);
                focalPointToSet = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.scaleAndAdd(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), focalPoint, this.dirVec, -distanceToCanvasCenter * k);
            }
            const imageData = viewport.getImageData();
            let spacing = [1, 1, 1];
            if (imageData) {
                spacing = imageData.spacing;
            }
            const { minZoomScale, maxZoomScale } = this.configuration;
            const t = element.clientHeight * spacing[1] * 0.5;
            const scale = t / parallelScaleToSet;
            let cappedParallelScale = parallelScaleToSet;
            let thresholdExceeded = false;
            if (imageData) {
                if (scale < minZoomScale) {
                    cappedParallelScale = t / minZoomScale;
                    thresholdExceeded = true;
                }
                else if (scale >= maxZoomScale) {
                    cappedParallelScale = t / maxZoomScale;
                    thresholdExceeded = true;
                }
            }
            viewport.setCamera({
                parallelScale: cappedParallelScale,
                focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,
                position: thresholdExceeded ? position : positionToSet,
            });
        };
        this._dragPerspectiveProjection = (evt, viewport, camera, pinch = false) => {
            const { element, deltaPoints } = evt.detail;
            const deltaY = pinch
                ? evt.detail.deltaDistance.canvas
                : deltaPoints.canvas[1];
            const size = [element.clientWidth, element.clientHeight];
            const { position, focalPoint, viewPlaneNormal } = camera;
            const distance = _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_1__["default"].distance2BetweenPoints(position, focalPoint);
            const zoomScale = Math.sqrt(distance) / size[1];
            const directionOfProjection = [
                -viewPlaneNormal[0],
                -viewPlaneNormal[1],
                -viewPlaneNormal[2],
            ];
            const k = this.configuration.invert
                ? deltaY / zoomScale
                : deltaY * zoomScale;
            let tmp = k * directionOfProjection[0];
            position[0] += tmp;
            focalPoint[0] += tmp;
            tmp = k * directionOfProjection[1];
            position[1] += tmp;
            focalPoint[1] += tmp;
            tmp = k * directionOfProjection[2];
            position[2] += tmp;
            focalPoint[2] += tmp;
            viewport.setCamera({ position, focalPoint });
        };
        this.initialMousePosWorld = [0, 0, 0];
        this.dirVec = [0, 0, 0];
        if (this.configuration.pinchToZoom) {
            this.touchDragCallback = this._pinchCallback.bind(this);
        }
        else {
            this.touchDragCallback = this._dragCallback.bind(this);
        }
        this.mouseDragCallback = this._dragCallback.bind(this);
    }
    _pinchCallback(evt) {
        const pointsList = evt.detail
            .currentPointsList;
        if (pointsList.length > 1) {
            const { element, currentPoints } = evt.detail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const camera = viewport.getCamera();
            const worldPos = currentPoints.world;
            const { focalPoint } = camera;
            this.initialMousePosWorld = worldPos;
            let dirVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);
            dirVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.normalize(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), dirVec);
            this.dirVec = dirVec;
            if (camera.parallelProjection) {
                this._dragParallelProjection(evt, viewport, camera, true);
            }
            else {
                this._dragPerspectiveProjection(evt, viewport, camera, true);
            }
            viewport.render();
        }
        if (this.configuration.pan) {
            this._panCallback(evt);
        }
    }
    _dragCallback(evt) {
        const { element } = evt.detail;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
        const { viewport } = enabledElement;
        const camera = viewport.getCamera();
        if (camera.parallelProjection) {
            this._dragParallelProjection(evt, viewport, camera);
        }
        else {
            this._dragPerspectiveProjection(evt, viewport, camera);
        }
        viewport.render();
    }
    _panCallback(evt) {
        const { element, deltaPoints } = evt.detail;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
        const deltaPointsWorld = deltaPoints.world;
        const camera = enabledElement.viewport.getCamera();
        const { focalPoint, position } = camera;
        const updatedPosition = [
            position[0] - deltaPointsWorld[0],
            position[1] - deltaPointsWorld[1],
            position[2] - deltaPointsWorld[2],
        ];
        const updatedFocalPoint = [
            focalPoint[0] - deltaPointsWorld[0],
            focalPoint[1] - deltaPointsWorld[1],
            focalPoint[2] - deltaPointsWorld[2],
        ];
        enabledElement.viewport.setCamera({
            focalPoint: updatedFocalPoint,
            position: updatedPosition,
        });
        enabledElement.viewport.render();
    }
}
ZoomTool.toolName = 'Zoom';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ZoomTool);
//# sourceMappingURL=ZoomTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js":
/*!*****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _utilities_throttle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/throttle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _utilities_math_line__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/math/line */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/index.js");
/* harmony import */ var _utilities_math_angle_angleBetweenLines__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/math/angle/angleBetweenLines */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/angle/angleBetweenLines.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_drawing__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/drawing */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");














class AngleTool extends _base__WEBPACK_IMPORTED_MODULE_2__.AnnotationTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            shadow: true,
            preventHandleOutsideImage: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.addNewAnnotation = (evt) => {
            if (this.angleStartedNotYetCompleted) {
                return;
            }
            this.angleStartedNotYetCompleted = true;
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                highlighted: true,
                invalidated: true,
                metadata: {
                    toolName: this.getToolName(),
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                },
                data: {
                    handles: {
                        points: [[...worldPos], [...worldPos]],
                        activeHandleIndex: null,
                        textBox: {
                            hasMoved: false,
                            worldPosition: [0, 0, 0],
                            worldBoundingBox: {
                                topLeft: [0, 0, 0],
                                topRight: [0, 0, 0],
                                bottomLeft: [0, 0, 0],
                                bottomRight: [0, 0, 0],
                            },
                        },
                    },
                    label: '',
                    cachedStats: {},
                },
            };
            (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__.addAnnotation)(annotation, element);
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                handleIndex: 1,
                movingTextBox: false,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const { data } = annotation;
            const [point1, point2, point3] = data.handles.points;
            const canvasPoint1 = viewport.worldToCanvas(point1);
            const canvasPoint2 = viewport.worldToCanvas(point2);
            const canvasPoint3 = viewport.worldToCanvas(point3);
            const line1 = {
                start: {
                    x: canvasPoint1[0],
                    y: canvasPoint1[1],
                },
                end: {
                    x: canvasPoint2[0],
                    y: canvasPoint2[1],
                },
            };
            const line2 = {
                start: {
                    x: canvasPoint2[0],
                    y: canvasPoint2[1],
                },
                end: {
                    x: canvasPoint3[0],
                    y: canvasPoint3[1],
                },
            };
            const distanceToPoint = _utilities_math_line__WEBPACK_IMPORTED_MODULE_6__.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);
            const distanceToPoint2 = _utilities_math_line__WEBPACK_IMPORTED_MODULE_6__.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);
            if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {
                return true;
            }
            return false;
        };
        this.toolSelectedCallback = (evt, annotation) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            annotation.highlighted = true;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                movingTextBox: false,
            };
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
            evt.preventDefault();
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
            const { data } = annotation;
            if (newAnnotation && !hasMoved) {
                return;
            }
            if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {
                this.editData.handleIndex = 2;
                return;
            }
            this.angleStartedNotYetCompleted = false;
            data.handles.activeHandleIndex = null;
            this._deactivateModify(element);
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            if (this.isHandleOutsideImage &&
                this.configuration.preventHandleOutsideImage) {
                (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__.removeAnnotation)(annotation.annotationUID);
            }
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
            if (newAnnotation) {
                const eventType = _enums__WEBPACK_IMPORTED_MODULE_0__.Events.ANNOTATION_COMPLETED;
                const eventDetail = {
                    annotation,
                };
                (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            }
            this.editData = null;
            this.isDrawing = false;
        };
        this._dragCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;
            const { data } = annotation;
            if (movingTextBox) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const { textBox } = data.handles;
                const { worldPosition } = textBox;
                worldPosition[0] += worldPosDelta[0];
                worldPosition[1] += worldPosDelta[1];
                worldPosition[2] += worldPosDelta[2];
                textBox.hasMoved = true;
            }
            else if (handleIndex === undefined) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const points = data.handles.points;
                points.forEach((point) => {
                    point[0] += worldPosDelta[0];
                    point[1] += worldPosDelta[1];
                    point[2] += worldPosDelta[2];
                });
                annotation.invalidated = true;
            }
            else {
                const { currentPoints } = eventDetail;
                const worldPos = currentPoints.world;
                data.handles.points[handleIndex] = [...worldPos];
                annotation.invalidated = true;
            }
            this.editData.hasMoved = true;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
        };
        this.cancel = (element) => {
            if (this.isDrawing) {
                this.isDrawing = false;
                this._deactivateDraw(element);
                this._deactivateModify(element);
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.resetElementCursor)(element);
                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
                const { data } = annotation;
                annotation.highlighted = false;
                data.handles.activeHandleIndex = null;
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
                const { renderingEngine } = enabledElement;
                (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
                if (newAnnotation) {
                    const eventType = _enums__WEBPACK_IMPORTED_MODULE_0__.Events.ANNOTATION_COMPLETED;
                    const eventDetail = {
                        annotation,
                    };
                    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
                }
                this.editData = null;
                this.angleStartedNotYetCompleted = false;
                return annotation.annotationUID;
            }
        };
        this._activateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_9__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
        };
        this._deactivateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_9__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
        };
        this._activateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_9__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_MOVE, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
        };
        this._deactivateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_9__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_MOVE, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport } = enabledElement;
            const { element } = viewport;
            let annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__.getAnnotations)(this.getToolName(), element);
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const targetId = this.getTargetId(viewport);
            const renderingEngine = viewport.getRenderingEngine();
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const { annotationUID, data } = annotation;
                const { points, activeHandleIndex } = data.handles;
                styleSpecifier.annotationUID = annotationUID;
                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
                const color = this.getStyle('color', styleSpecifier, annotation);
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                if (!data.cachedStats[targetId]) {
                    data.cachedStats[targetId] = {
                        angle: null,
                    };
                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);
                }
                else if (annotation.invalidated) {
                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);
                }
                let activeHandleCanvasCoords;
                if (!(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_5__.isAnnotationLocked)(annotation) &&
                    !this.editData &&
                    activeHandleIndex !== null) {
                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
                }
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                if (activeHandleCanvasCoords) {
                    const handleGroupUID = '0';
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_8__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {
                        color,
                        lineDash,
                        lineWidth,
                    });
                }
                let lineUID = '1';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_8__.drawLine)(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
                    color,
                    width: lineWidth,
                    lineDash,
                });
                renderStatus = true;
                if (canvasCoordinates.length !== 3) {
                    return renderStatus;
                }
                lineUID = '2';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_8__.drawLine)(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], canvasCoordinates[2], {
                    color,
                    width: lineWidth,
                    lineDash,
                });
                if (!data.cachedStats[targetId]?.angle) {
                    continue;
                }
                const textLines = this._getTextLines(data, targetId);
                if (!data.handles.textBox.hasMoved) {
                    const canvasTextBoxCoords = (0,_utilities_drawing__WEBPACK_IMPORTED_MODULE_11__.getTextBoxCoordsCanvas)(canvasCoordinates);
                    data.handles.textBox.worldPosition =
                        viewport.canvasToWorld(canvasTextBoxCoords);
                }
                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
                const textBoxUID = '1';
                const boundingBox = (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_8__.drawLinkedTextBox)(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, this.getLinkedTextBoxStyle(styleSpecifier, annotation));
                const { x: left, y: top, width, height } = boundingBox;
                data.handles.textBox.worldBoundingBox = {
                    topLeft: viewport.canvasToWorld([left, top]),
                    topRight: viewport.canvasToWorld([left + width, top]),
                    bottomLeft: viewport.canvasToWorld([left, top + height]),
                    bottomRight: viewport.canvasToWorld([left + width, top + height]),
                };
            }
            return renderStatus;
        };
        this._throttledCalculateCachedStats = (0,_utilities_throttle__WEBPACK_IMPORTED_MODULE_3__["default"])(this._calculateCachedStats, 100, { trailing: true });
    }
    handleSelectedCallback(evt, annotation, handle) {
        const eventDetail = evt.detail;
        const { element } = eventDetail;
        const { data } = annotation;
        annotation.highlighted = true;
        let movingTextBox = false;
        let handleIndex;
        if (handle.worldPosition) {
            movingTextBox = true;
        }
        else {
            handleIndex = data.handles.points.findIndex((p) => p === handle);
        }
        const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__.getViewportIdsWithToolToRender)(element, this.getToolName());
        this.editData = {
            annotation,
            viewportIdsToRender,
            handleIndex,
            movingTextBox,
        };
        this._activateModify(element);
        (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const { renderingEngine } = enabledElement;
        (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
        evt.preventDefault();
    }
    _getTextLines(data, targetId) {
        const cachedVolumeStats = data.cachedStats[targetId];
        const { angle } = cachedVolumeStats;
        if (angle === undefined) {
            return;
        }
        const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];
        return textLines;
    }
    _calculateCachedStats(annotation, renderingEngine, enabledElement) {
        const data = annotation.data;
        const { viewportId, renderingEngineId } = enabledElement;
        if (data.handles.points.length !== 3) {
            return;
        }
        const worldPos1 = data.handles.points[0];
        const worldPos2 = data.handles.points[1];
        const worldPos3 = data.handles.points[2];
        const { cachedStats } = data;
        const targetIds = Object.keys(cachedStats);
        for (let i = 0; i < targetIds.length; i++) {
            const targetId = targetIds[i];
            const angle = (0,_utilities_math_angle_angleBetweenLines__WEBPACK_IMPORTED_MODULE_7__["default"])([worldPos1, worldPos2], [worldPos2, worldPos3]);
            cachedStats[targetId] = {
                angle,
            };
        }
        annotation.invalidated = false;
        const eventType = _enums__WEBPACK_IMPORTED_MODULE_0__.Events.ANNOTATION_MODIFIED;
        const eventDetail = {
            annotation,
            viewportId,
            renderingEngineId,
        };
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
        return cachedStats;
    }
}
AngleTool.toolName = 'Angle';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AngleTool);
//# sourceMappingURL=AngleTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js":
/*!*************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _utilities_math_line__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/math/line */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/index.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_drawing__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/drawing */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");












class ArrowAnnotateTool extends _base__WEBPACK_IMPORTED_MODULE_2__.AnnotationTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            shadow: true,
            getTextCallback,
            changeTextCallback,
            preventHandleOutsideImage: false,
            arrowFirst: true,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.addNewAnnotation = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_11__.hideElementCursor)(element);
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
            const { arrowFirst } = this.configuration;
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                highlighted: true,
                invalidated: true,
                metadata: {
                    toolName: this.getToolName(),
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                },
                data: {
                    text: '',
                    handles: {
                        points: [[...worldPos], [...worldPos]],
                        activeHandleIndex: null,
                        arrowFirst,
                        textBox: {
                            hasMoved: false,
                            worldPosition: [0, 0, 0],
                            worldBoundingBox: {
                                topLeft: [0, 0, 0],
                                topRight: [0, 0, 0],
                                bottomLeft: [0, 0, 0],
                                bottomRight: [0, 0, 0],
                            },
                        },
                    },
                    label: '',
                },
            };
            (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.addAnnotation)(annotation, element);
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_8__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                handleIndex: 1,
                movingTextBox: false,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_10__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const { data } = annotation;
            const [point1, point2] = data.handles.points;
            const canvasPoint1 = viewport.worldToCanvas(point1);
            const canvasPoint2 = viewport.worldToCanvas(point2);
            const line = {
                start: {
                    x: canvasPoint1[0],
                    y: canvasPoint1[1],
                },
                end: {
                    x: canvasPoint2[0],
                    y: canvasPoint2[1],
                },
            };
            const distanceToPoint = _utilities_math_line__WEBPACK_IMPORTED_MODULE_5__.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);
            if (distanceToPoint <= proximity) {
                return true;
            }
            return false;
        };
        this.toolSelectedCallback = (evt, annotation) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            annotation.highlighted = true;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_8__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                movingTextBox: false,
            };
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_11__.hideElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_10__["default"])(renderingEngine, viewportIdsToRender);
            evt.preventDefault();
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
            const { data } = annotation;
            if (newAnnotation && !hasMoved) {
                return;
            }
            data.handles.activeHandleIndex = null;
            this._deactivateModify(element);
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_11__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewportId, renderingEngineId, renderingEngine } = enabledElement;
            if (this.isHandleOutsideImage &&
                this.configuration.preventHandleOutsideImage) {
                (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.removeAnnotation)(annotation.annotationUID);
            }
            if (newAnnotation) {
                this.configuration.getTextCallback((text) => {
                    if (!text) {
                        (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.removeAnnotation)(annotation.annotationUID);
                        (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_10__["default"])(renderingEngine, viewportIdsToRender);
                        this.editData = null;
                        this.isDrawing = false;
                        return;
                    }
                    annotation.data.text = text;
                    const eventType = _enums__WEBPACK_IMPORTED_MODULE_0__.Events.ANNOTATION_COMPLETED;
                    const eventDetail = {
                        annotation,
                    };
                    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
                    (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_10__["default"])(renderingEngine, viewportIdsToRender);
                });
            }
            else {
                const eventType = _enums__WEBPACK_IMPORTED_MODULE_0__.Events.ANNOTATION_MODIFIED;
                const eventDetail = {
                    annotation,
                    viewportId,
                    renderingEngineId,
                };
                (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            }
            this.editData = null;
            this.isDrawing = false;
        };
        this._dragCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;
            const { data } = annotation;
            if (movingTextBox) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const { textBox } = data.handles;
                const { worldPosition } = textBox;
                worldPosition[0] += worldPosDelta[0];
                worldPosition[1] += worldPosDelta[1];
                worldPosition[2] += worldPosDelta[2];
                textBox.hasMoved = true;
            }
            else if (handleIndex === undefined) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const points = data.handles.points;
                points.forEach((point) => {
                    point[0] += worldPosDelta[0];
                    point[1] += worldPosDelta[1];
                    point[2] += worldPosDelta[2];
                });
                annotation.invalidated = true;
            }
            else {
                const { currentPoints } = eventDetail;
                const worldPos = currentPoints.world;
                data.handles.points[handleIndex] = [...worldPos];
                annotation.invalidated = true;
            }
            this.editData.hasMoved = true;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_10__["default"])(renderingEngine, viewportIdsToRender);
        };
        this.touchTapCallback = (evt) => {
            if (evt.detail.taps == 2) {
                this.doubleClickCallback(evt);
            }
        };
        this.doubleClickCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            let annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getAnnotations)(this.getToolName(), element);
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return;
            }
            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));
            if (!clickedAnnotation) {
                return;
            }
            const annotation = clickedAnnotation;
            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));
            this.editData = null;
            this.isDrawing = false;
            evt.stopImmediatePropagation();
            evt.preventDefault();
        };
        this.cancel = (element) => {
            if (this.isDrawing) {
                this.isDrawing = false;
                this._deactivateDraw(element);
                this._deactivateModify(element);
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_11__.resetElementCursor)(element);
                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
                const { data } = annotation;
                annotation.highlighted = false;
                data.handles.activeHandleIndex = null;
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
                const { renderingEngine } = enabledElement;
                (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_10__["default"])(renderingEngine, viewportIdsToRender);
                if (newAnnotation) {
                    const eventType = _enums__WEBPACK_IMPORTED_MODULE_0__.Events.ANNOTATION_COMPLETED;
                    const eventDetail = {
                        annotation,
                    };
                    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
                }
                this.editData = null;
                return annotation.annotationUID;
            }
        };
        this._activateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
        };
        this._deactivateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
        };
        this._activateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_MOVE, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
        };
        this._deactivateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_MOVE, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport } = enabledElement;
            const { element } = viewport;
            let annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getAnnotations)(this.getToolName(), element);
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const { annotationUID, data } = annotation;
                const { handles, text } = data;
                const { points, activeHandleIndex } = handles;
                styleSpecifier.annotationUID = annotationUID;
                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
                const color = this.getStyle('color', styleSpecifier, annotation);
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                let activeHandleCanvasCoords;
                if (!(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_4__.isAnnotationLocked)(annotation) &&
                    !this.editData &&
                    activeHandleIndex !== null) {
                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
                }
                if (activeHandleCanvasCoords) {
                    const handleGroupUID = '0';
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {
                        color,
                        lineWidth,
                    });
                }
                const arrowUID = '1';
                if (this.configuration.arrowFirst) {
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawArrow)(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[1], canvasCoordinates[0], {
                        color,
                        width: lineWidth,
                        lineDash: lineDash,
                    });
                }
                else {
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawArrow)(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[0], canvasCoordinates[1], {
                        color,
                        width: lineWidth,
                        lineDash: lineDash,
                    });
                }
                renderStatus = true;
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                if (!text) {
                    continue;
                }
                if (!data.handles.textBox.hasMoved) {
                    const canvasTextBoxCoords = (0,_utilities_drawing__WEBPACK_IMPORTED_MODULE_9__.getTextBoxCoordsCanvas)(canvasCoordinates);
                    data.handles.textBox.worldPosition =
                        viewport.canvasToWorld(canvasTextBoxCoords);
                }
                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
                const textBoxUID = '1';
                const boundingBox = (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawLinkedTextBox)(svgDrawingHelper, annotationUID, textBoxUID, [text], textBoxPosition, canvasCoordinates, {}, this.getLinkedTextBoxStyle(styleSpecifier, annotation));
                const { x: left, y: top, width, height } = boundingBox;
                data.handles.textBox.worldBoundingBox = {
                    topLeft: viewport.canvasToWorld([left, top]),
                    topRight: viewport.canvasToWorld([left + width, top]),
                    bottomLeft: viewport.canvasToWorld([left, top + height]),
                    bottomRight: viewport.canvasToWorld([left + width, top + height]),
                };
            }
            return renderStatus;
        };
    }
    handleSelectedCallback(evt, annotation, handle) {
        const eventDetail = evt.detail;
        const { element } = eventDetail;
        const { data } = annotation;
        annotation.highlighted = true;
        let movingTextBox = false;
        let handleIndex;
        if (handle.worldPosition) {
            movingTextBox = true;
        }
        else {
            handleIndex = data.handles.points.findIndex((p) => p === handle);
        }
        const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_8__.getViewportIdsWithToolToRender)(element, this.getToolName());
        this.editData = {
            annotation,
            viewportIdsToRender,
            handleIndex,
            movingTextBox,
        };
        this._activateModify(element);
        (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_11__.hideElementCursor)(element);
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const { renderingEngine } = enabledElement;
        (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_10__["default"])(renderingEngine, viewportIdsToRender);
        evt.preventDefault();
    }
    _doneChangingTextCallback(element, annotation, updatedText) {
        annotation.data.text = updatedText;
        const { renderingEngine, viewportId, renderingEngineId } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_8__.getViewportIdsWithToolToRender)(element, this.getToolName());
        (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_10__["default"])(renderingEngine, viewportIdsToRender);
        const eventType = _enums__WEBPACK_IMPORTED_MODULE_0__.Events.ANNOTATION_MODIFIED;
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, {
            annotation,
            viewportId,
            renderingEngineId,
        });
    }
    _isInsideVolume(index1, index2, dimensions) {
        return (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index1, dimensions) &&
            _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index2, dimensions));
    }
}
function getTextCallback(doneChangingTextCallback) {
    return doneChangingTextCallback(prompt('Enter your annotation:'));
}
function changeTextCallback(data, eventData, doneChangingTextCallback) {
    return doneChangingTextCallback(prompt('Enter your annotation:'));
}
ArrowAnnotateTool.toolName = 'ArrowAnnotate';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ArrowAnnotateTool);
//# sourceMappingURL=ArrowAnnotateTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js":
/*!*************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _utilities_throttle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/throttle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_math_line__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/math/line */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/index.js");
/* harmony import */ var _utilities_drawing__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/drawing */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");















const { transformWorldToIndex } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities;
class BidirectionalTool extends _base__WEBPACK_IMPORTED_MODULE_2__.AnnotationTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            preventHandleOutsideImage: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const { data } = annotation;
            const { points } = data.handles;
            let canvasPoint1 = viewport.worldToCanvas(points[0]);
            let canvasPoint2 = viewport.worldToCanvas(points[1]);
            let line = {
                start: {
                    x: canvasPoint1[0],
                    y: canvasPoint1[1],
                },
                end: {
                    x: canvasPoint2[0],
                    y: canvasPoint2[1],
                },
            };
            let distanceToPoint = _utilities_math_line__WEBPACK_IMPORTED_MODULE_11__.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);
            if (distanceToPoint <= proximity) {
                return true;
            }
            canvasPoint1 = viewport.worldToCanvas(points[2]);
            canvasPoint2 = viewport.worldToCanvas(points[3]);
            line = {
                start: {
                    x: canvasPoint1[0],
                    y: canvasPoint1[1],
                },
                end: {
                    x: canvasPoint2[0],
                    y: canvasPoint2[1],
                },
            };
            distanceToPoint = _utilities_math_line__WEBPACK_IMPORTED_MODULE_11__.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);
            if (distanceToPoint <= proximity) {
                return true;
            }
            return false;
        };
        this.toolSelectedCallback = (evt, annotation) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            annotation.highlighted = true;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                movingTextBox: false,
            };
            this._activateModify(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            evt.preventDefault();
        };
        this.handleSelectedCallback = (evt, annotation, handle) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const data = annotation.data;
            annotation.highlighted = true;
            let movingTextBox = false;
            let handleIndex;
            if (handle.worldPosition) {
                movingTextBox = true;
            }
            else {
                handleIndex = data.handles.points.findIndex((p) => p === handle);
            }
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__.getViewportIdsWithToolToRender)(element, this.getToolName());
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            this.editData = {
                annotation,
                viewportIdsToRender,
                handleIndex,
                movingTextBox,
            };
            this._activateModify(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            evt.preventDefault();
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
            const { data } = annotation;
            if (newAnnotation && !hasMoved) {
                return;
            }
            data.handles.activeHandleIndex = null;
            this._deactivateModify(element);
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            if (this.editData.handleIndex !== undefined) {
                const { points } = data.handles;
                const firstLineSegmentLength = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.distance(points[0], points[1]);
                const secondLineSegmentLength = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.distance(points[2], points[3]);
                if (secondLineSegmentLength > firstLineSegmentLength) {
                    const longAxis = [[...points[2]], [...points[3]]];
                    const shortAxisPoint0 = [...points[0]];
                    const shortAxisPoint1 = [...points[1]];
                    const longAxisVector = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);
                    const counterClockWisePerpendicularToLongAxis = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);
                    const currentShortAxisVector = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
                    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);
                    let shortAxis;
                    if (gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {
                        shortAxis = [shortAxisPoint0, shortAxisPoint1];
                    }
                    else {
                        shortAxis = [shortAxisPoint1, shortAxisPoint0];
                    }
                    data.handles.points = [
                        longAxis[0],
                        longAxis[1],
                        shortAxis[0],
                        shortAxis[1],
                    ];
                }
            }
            if (this.isHandleOutsideImage &&
                this.configuration.preventHandleOutsideImage) {
                (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__.removeAnnotation)(annotation.annotationUID);
            }
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            if (newAnnotation) {
                const eventType = _enums__WEBPACK_IMPORTED_MODULE_9__.Events.ANNOTATION_COMPLETED;
                const eventDetail = {
                    annotation,
                };
                (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            }
            this.editData = null;
            this.isDrawing = false;
        };
        this._dragDrawCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine, viewport } = enabledElement;
            const { worldToCanvas } = viewport;
            const { annotation, viewportIdsToRender, handleIndex } = this.editData;
            const { data } = annotation;
            const worldPos = currentPoints.world;
            data.handles.points[handleIndex] = [...worldPos];
            const canvasCoordPoints = data.handles.points.map(worldToCanvas);
            const canvasCoords = {
                longLineSegment: {
                    start: {
                        x: canvasCoordPoints[0][0],
                        y: canvasCoordPoints[0][1],
                    },
                    end: {
                        x: canvasCoordPoints[1][0],
                        y: canvasCoordPoints[1][1],
                    },
                },
                shortLineSegment: {
                    start: {
                        x: canvasCoordPoints[2][0],
                        y: canvasCoordPoints[2][1],
                    },
                    end: {
                        x: canvasCoordPoints[3][0],
                        y: canvasCoordPoints[3][1],
                    },
                },
            };
            const dist = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);
            const shortAxisDistFromCenter = dist / 3;
            const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;
            const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;
            const length = Math.sqrt(dx * dx + dy * dy);
            const vectorX = dx / length;
            const vectorY = dy / length;
            const xMid = (canvasCoords.longLineSegment.start.x +
                canvasCoords.longLineSegment.end.x) /
                2;
            const yMid = (canvasCoords.longLineSegment.start.y +
                canvasCoords.longLineSegment.end.y) /
                2;
            const startX = xMid + shortAxisDistFromCenter * vectorY;
            const startY = yMid - shortAxisDistFromCenter * vectorX;
            const endX = xMid - shortAxisDistFromCenter * vectorY;
            const endY = yMid + shortAxisDistFromCenter * vectorX;
            data.handles.points[2] = viewport.canvasToWorld([startX, startY]);
            data.handles.points[3] = viewport.canvasToWorld([endX, endY]);
            annotation.invalidated = true;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            this.editData.hasMoved = true;
        };
        this._dragModifyCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;
            const { data } = annotation;
            if (movingTextBox) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const { textBox } = data.handles;
                const { worldPosition } = textBox;
                worldPosition[0] += worldPosDelta[0];
                worldPosition[1] += worldPosDelta[1];
                worldPosition[2] += worldPosDelta[2];
                textBox.hasMoved = true;
            }
            else if (handleIndex === undefined) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const points = data.handles.points;
                points.forEach((point) => {
                    point[0] += worldPosDelta[0];
                    point[1] += worldPosDelta[1];
                    point[2] += worldPosDelta[2];
                });
                annotation.invalidated = true;
            }
            else {
                this._dragModifyHandle(evt);
                annotation.invalidated = true;
            }
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
        };
        this._dragModifyHandle = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const { annotation, handleIndex: movingHandleIndex } = this.editData;
            const { data } = annotation;
            const worldPos = currentPoints.world;
            const canvasCoordHandlesCurrent = [
                viewport.worldToCanvas(data.handles.points[0]),
                viewport.worldToCanvas(data.handles.points[1]),
                viewport.worldToCanvas(data.handles.points[2]),
                viewport.worldToCanvas(data.handles.points[3]),
            ];
            const firstLineSegment = {
                start: {
                    x: canvasCoordHandlesCurrent[0][0],
                    y: canvasCoordHandlesCurrent[0][1],
                },
                end: {
                    x: canvasCoordHandlesCurrent[1][0],
                    y: canvasCoordHandlesCurrent[1][1],
                },
            };
            const secondLineSegment = {
                start: {
                    x: canvasCoordHandlesCurrent[2][0],
                    y: canvasCoordHandlesCurrent[2][1],
                },
                end: {
                    x: canvasCoordHandlesCurrent[3][0],
                    y: canvasCoordHandlesCurrent[3][1],
                },
            };
            const proposedPoint = [...worldPos];
            const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);
            if (movingHandleIndex === 0 || movingHandleIndex === 1) {
                const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;
                const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];
                const fixedHandleToProposedCoordVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.set(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);
                const fixedHandleToOldCoordVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.set(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] -
                    fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] -
                    fixedHandleCanvasCoord[1]);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);
                gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);
                const proposedFirstLineSegment = {
                    start: {
                        x: fixedHandleCanvasCoord[0],
                        y: fixedHandleCanvasCoord[1],
                    },
                    end: {
                        x: proposedCanvasCoord[0],
                        y: proposedCanvasCoord[1],
                    },
                };
                if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {
                    return;
                }
                const centerOfRotation = fixedHandleCanvasCoord;
                const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);
                let firstPointX = canvasCoordHandlesCurrent[2][0];
                let firstPointY = canvasCoordHandlesCurrent[2][1];
                let secondPointX = canvasCoordHandlesCurrent[3][0];
                let secondPointY = canvasCoordHandlesCurrent[3][1];
                firstPointX -= centerOfRotation[0];
                firstPointY -= centerOfRotation[1];
                secondPointX -= centerOfRotation[0];
                secondPointY -= centerOfRotation[1];
                const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);
                const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);
                const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);
                const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);
                firstPointX = rotatedFirstPoint + centerOfRotation[0];
                firstPointY = rotatedFirstPointY + centerOfRotation[1];
                secondPointX = rotatedSecondPoint + centerOfRotation[0];
                secondPointY = rotatedSecondPointY + centerOfRotation[1];
                const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);
                const newSecondPoint = viewport.canvasToWorld([
                    secondPointX,
                    secondPointY,
                ]);
                data.handles.points[movingHandleIndex] = proposedPoint;
                data.handles.points[2] = newFirstPoint;
                data.handles.points[3] = newSecondPoint;
            }
            else {
                const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;
                const canvasCoordsCurrent = {
                    longLineSegment: {
                        start: firstLineSegment.start,
                        end: firstLineSegment.end,
                    },
                    shortLineSegment: {
                        start: secondLineSegment.start,
                        end: secondLineSegment.end,
                    },
                };
                const longLineSegmentVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create(), [
                    canvasCoordsCurrent.longLineSegment.end.x,
                    canvasCoordsCurrent.longLineSegment.end.y,
                ], [
                    canvasCoordsCurrent.longLineSegment.start.x,
                    canvasCoordsCurrent.longLineSegment.start.y,
                ]);
                const longLineSegmentVecNormalized = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.normalize(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create(), longLineSegmentVec);
                const proposedToCurrentVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [
                    canvasCoordHandlesCurrent[movingHandleIndex][0],
                    canvasCoordHandlesCurrent[movingHandleIndex][1],
                ]);
                const movementLength = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.length(proposedToCurrentVec);
                const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);
                const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;
                const newTranslatedPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.scaleAndAdd(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create(), [
                    canvasCoordHandlesCurrent[translateHandleIndex][0],
                    canvasCoordHandlesCurrent[translateHandleIndex][1],
                ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);
                if (this._movingLongAxisWouldPutItThroughShortAxis({
                    start: {
                        x: proposedCanvasCoord[0],
                        y: proposedCanvasCoord[1],
                    },
                    end: {
                        x: newTranslatedPoint[0],
                        y: newTranslatedPoint[1],
                    },
                }, {
                    start: {
                        x: canvasCoordsCurrent.longLineSegment.start.x,
                        y: canvasCoordsCurrent.longLineSegment.start.y,
                    },
                    end: {
                        x: canvasCoordsCurrent.longLineSegment.end.x,
                        y: canvasCoordsCurrent.longLineSegment.end.y,
                    },
                })) {
                    return;
                }
                const intersectionPoint = _utilities_math_line__WEBPACK_IMPORTED_MODULE_11__.intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);
                if (!intersectionPoint) {
                    return;
                }
                data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);
                data.handles.points[movingHandleIndex] = proposedPoint;
            }
        };
        this.cancel = (element) => {
            if (this.isDrawing) {
                this.isDrawing = false;
                this._deactivateDraw(element);
                this._deactivateModify(element);
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.resetElementCursor)(element);
                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
                const { data } = annotation;
                annotation.highlighted = false;
                data.handles.activeHandleIndex = null;
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
                const { renderingEngine } = enabledElement;
                (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
                if (newAnnotation) {
                    const eventType = _enums__WEBPACK_IMPORTED_MODULE_9__.Events.ANNOTATION_COMPLETED;
                    const eventDetail = {
                        annotation,
                    };
                    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
                }
                this.editData = null;
                return annotation.annotationUID;
            }
        };
        this._activateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_8__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_DRAG, this._dragDrawCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_MOVE, this._dragDrawCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_TAP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_DRAG, this._dragDrawCallback);
        };
        this._deactivateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_8__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_DRAG, this._dragDrawCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_MOVE, this._dragDrawCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_TAP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_DRAG, this._dragDrawCallback);
        };
        this._activateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_8__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_DRAG, this._dragModifyCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_DRAG, this._dragModifyCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_8__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_DRAG, this._dragModifyCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_DRAG, this._dragModifyCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_9__.Events.TOUCH_TAP, this._endCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = true;
            const { viewport } = enabledElement;
            const { element } = viewport;
            let annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__.getAnnotations)(this.getToolName(), element);
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const targetId = this.getTargetId(viewport);
            const renderingEngine = viewport.getRenderingEngine();
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const { annotationUID, data } = annotation;
                const { points, activeHandleIndex } = data.handles;
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                styleSpecifier.annotationUID = annotationUID;
                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
                const color = this.getStyle('color', styleSpecifier, annotation);
                const shadow = this.getStyle('shadow', styleSpecifier, annotation);
                if (!data.cachedStats[targetId] ||
                    data.cachedStats[targetId].unit === undefined) {
                    data.cachedStats[targetId] = {
                        length: null,
                        width: null,
                        unit: null,
                    };
                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);
                }
                else if (annotation.invalidated) {
                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);
                }
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                let activeHandleCanvasCoords;
                if (!(0,_stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_6__.isAnnotationVisible)(annotationUID)) {
                    continue;
                }
                if (!(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_5__.isAnnotationLocked)(annotation) &&
                    !this.editData &&
                    activeHandleIndex !== null) {
                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
                }
                if (activeHandleCanvasCoords) {
                    const handleGroupUID = '0';
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
                        color,
                    });
                }
                const dataId1 = `${annotationUID}-line-1`;
                const dataId2 = `${annotationUID}-line-2`;
                const lineUID = '0';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawLine)(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
                    color,
                    lineDash,
                    lineWidth,
                    shadow,
                }, dataId1);
                const secondLineUID = '1';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawLine)(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {
                    color,
                    lineDash,
                    lineWidth,
                    shadow,
                }, dataId2);
                renderStatus = true;
                const textLines = this._getTextLines(data, targetId);
                if (!textLines || textLines.length === 0) {
                    continue;
                }
                let canvasTextBoxCoords;
                if (!data.handles.textBox.hasMoved) {
                    canvasTextBoxCoords = (0,_utilities_drawing__WEBPACK_IMPORTED_MODULE_12__.getTextBoxCoordsCanvas)(canvasCoordinates);
                    data.handles.textBox.worldPosition =
                        viewport.canvasToWorld(canvasTextBoxCoords);
                }
                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
                const textBoxUID = '1';
                const boundingBox = (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawLinkedTextBox)(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, this.getLinkedTextBoxStyle(styleSpecifier, annotation));
                const { x: left, y: top, width, height } = boundingBox;
                data.handles.textBox.worldBoundingBox = {
                    topLeft: viewport.canvasToWorld([left, top]),
                    topRight: viewport.canvasToWorld([left + width, top]),
                    bottomLeft: viewport.canvasToWorld([left, top + height]),
                    bottomRight: viewport.canvasToWorld([left + width, top + height]),
                };
            }
            return renderStatus;
        };
        this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {
            const vectorInSecondLineDirection = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);
            const extendedSecondLineSegment = {
                start: {
                    x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,
                    y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,
                },
                end: {
                    x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,
                    y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,
                },
            };
            const proposedIntersectionPoint = _utilities_math_line__WEBPACK_IMPORTED_MODULE_11__.intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);
            const wouldPutThroughShortAxis = !proposedIntersectionPoint;
            return wouldPutThroughShortAxis;
        };
        this._getTextLines = (data, targetId) => {
            const { cachedStats } = data;
            const { length, width, unit } = cachedStats[targetId];
            if (length === undefined) {
                return;
            }
            const textLines = [
                `L: ${length.toFixed(2)} ${unit}`,
                `W: ${width.toFixed(2)} ${unit}`,
            ];
            return textLines;
        };
        this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {
            const { data } = annotation;
            const { viewportId, renderingEngineId } = enabledElement;
            const worldPos1 = data.handles.points[0];
            const worldPos2 = data.handles.points[1];
            const worldPos3 = data.handles.points[2];
            const worldPos4 = data.handles.points[3];
            const { cachedStats } = data;
            const targetIds = Object.keys(cachedStats);
            for (let i = 0; i < targetIds.length; i++) {
                const targetId = targetIds[i];
                const image = this.getTargetIdImage(targetId, renderingEngine);
                if (!image) {
                    continue;
                }
                const { imageData, dimensions, hasPixelSpacing } = image;
                const dist1 = this._calculateLength(worldPos1, worldPos2);
                const dist2 = this._calculateLength(worldPos3, worldPos4);
                const length = dist1 > dist2 ? dist1 : dist2;
                const width = dist1 > dist2 ? dist2 : dist1;
                const index1 = transformWorldToIndex(imageData, worldPos1);
                const index2 = transformWorldToIndex(imageData, worldPos2);
                const index3 = transformWorldToIndex(imageData, worldPos3);
                const index4 = transformWorldToIndex(imageData, worldPos4);
                this._isInsideVolume(index1, index2, index3, index4, dimensions)
                    ? (this.isHandleOutsideImage = false)
                    : (this.isHandleOutsideImage = true);
                cachedStats[targetId] = {
                    length,
                    width,
                    unit: hasPixelSpacing ? 'mm' : 'px',
                };
            }
            annotation.invalidated = false;
            const eventType = _enums__WEBPACK_IMPORTED_MODULE_9__.Events.ANNOTATION_MODIFIED;
            const eventDetail = {
                annotation,
                viewportId,
                renderingEngineId,
            };
            (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            return cachedStats;
        };
        this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {
            return (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index1, dimensions) &&
                _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index2, dimensions) &&
                _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index3, dimensions) &&
                _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index4, dimensions));
        };
        this._getSignedAngle = (vector1, vector2) => {
            return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);
        };
        this._throttledCalculateCachedStats = (0,_utilities_throttle__WEBPACK_IMPORTED_MODULE_3__["default"])(this._calculateCachedStats, 100, { trailing: true });
    }
    addNewAnnotation(evt) {
        const eventDetail = evt.detail;
        const { currentPoints, element } = eventDetail;
        const worldPos = currentPoints.world;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const { viewport, renderingEngine } = enabledElement;
        this.isDrawing = true;
        const camera = viewport.getCamera();
        const { viewPlaneNormal, viewUp } = camera;
        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
        const annotation = {
            highlighted: true,
            invalidated: true,
            metadata: {
                toolName: this.getToolName(),
                viewPlaneNormal: [...viewPlaneNormal],
                viewUp: [...viewUp],
                FrameOfReferenceUID,
                referencedImageId,
            },
            data: {
                handles: {
                    points: [
                        [...worldPos],
                        [...worldPos],
                        [...worldPos],
                        [...worldPos],
                    ],
                    textBox: {
                        hasMoved: false,
                        worldPosition: [0, 0, 0],
                        worldBoundingBox: {
                            topLeft: [0, 0, 0],
                            topRight: [0, 0, 0],
                            bottomLeft: [0, 0, 0],
                            bottomRight: [0, 0, 0],
                        },
                    },
                    activeHandleIndex: null,
                },
                label: '',
                cachedStats: {},
            },
        };
        (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__.addAnnotation)(annotation, element);
        const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__.getViewportIdsWithToolToRender)(element, this.getToolName());
        this.editData = {
            annotation,
            viewportIdsToRender,
            handleIndex: 1,
            movingTextBox: false,
            newAnnotation: true,
            hasMoved: false,
        };
        this._activateDraw(element);
        (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
        evt.preventDefault();
        (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
        return annotation;
    }
    _calculateLength(pos1, pos2) {
        const dx = pos1[0] - pos2[0];
        const dy = pos1[1] - pos2[1];
        const dz = pos1[2] - pos2[2];
        return Math.sqrt(dx * dx + dy * dy + dz * dz);
    }
}
BidirectionalTool.toolName = 'Bidirectional';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BidirectionalTool);
//# sourceMappingURL=BidirectionalTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js":
/*!*********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities_throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/throttle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_drawing__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/drawing */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js");
/* harmony import */ var _utilities_planar_getWorldWidthAndHeightFromTwoPoints__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/planar/getWorldWidthAndHeightFromTwoPoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getWorldWidthAndHeightFromTwoPoints.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");
/* harmony import */ var _utilities_getModalityUnit__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/getModalityUnit */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getModalityUnit.js");
/* harmony import */ var _utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../utilities/viewport/isViewportPreScaled */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js");
/* harmony import */ var _utilities_math_circle__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/math/circle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/index.js");
/* harmony import */ var _utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../utilities/math/ellipse */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/index.js");



















const { transformWorldToIndex } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities;
class CircleROITool extends _base__WEBPACK_IMPORTED_MODULE_0__.AnnotationTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            shadow: true,
            preventHandleOutsideImage: false,
            centerPointRadius: 0,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.isHandleOutsideImage = false;
        this.addNewAnnotation = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const canvasPos = currentPoints.canvas;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                highlighted: true,
                invalidated: true,
                metadata: {
                    toolName: this.getToolName(),
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                },
                data: {
                    label: '',
                    handles: {
                        textBox: {
                            hasMoved: false,
                            worldPosition: [0, 0, 0],
                            worldBoundingBox: {
                                topLeft: [0, 0, 0],
                                topRight: [0, 0, 0],
                                bottomLeft: [0, 0, 0],
                                bottomRight: [0, 0, 0],
                            },
                        },
                        points: [[...worldPos], [...worldPos]],
                        activeHandleIndex: null,
                    },
                    cachedStats: {},
                },
            };
            (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.addAnnotation)(annotation, element);
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_12__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_13__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const { data } = annotation;
            const { points } = data.handles;
            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
            const radius = (0,_utilities_math_circle__WEBPACK_IMPORTED_MODULE_17__.getCanvasCircleRadius)(canvasCoordinates);
            const radiusPoint = (0,_utilities_math_circle__WEBPACK_IMPORTED_MODULE_17__.getCanvasCircleRadius)([
                canvasCoordinates[0],
                canvasCoords,
            ]);
            if (Math.abs(radiusPoint - radius) < proximity / 2)
                return true;
            return false;
        };
        this.toolSelectedCallback = (evt, annotation) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            annotation.highlighted = true;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                movingTextBox: false,
            };
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_12__.hideElementCursor)(element);
            this._activateModify(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_13__["default"])(renderingEngine, viewportIdsToRender);
            evt.preventDefault();
        };
        this.handleSelectedCallback = (evt, annotation, handle) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { data } = annotation;
            annotation.highlighted = true;
            let movingTextBox = false;
            let handleIndex;
            if (handle.worldPosition) {
                movingTextBox = true;
            }
            else {
                const { points } = data.handles;
                handleIndex = points.findIndex((p) => p === handle);
            }
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                handleIndex,
                movingTextBox,
            };
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_12__.hideElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_13__["default"])(renderingEngine, viewportIdsToRender);
            evt.preventDefault();
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
            const { data } = annotation;
            if (newAnnotation && !hasMoved) {
                return;
            }
            annotation.highlighted = false;
            data.handles.activeHandleIndex = null;
            this._deactivateModify(element);
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_12__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            this.editData = null;
            this.isDrawing = false;
            if (this.isHandleOutsideImage &&
                this.configuration.preventHandleOutsideImage) {
                (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.removeAnnotation)(annotation.annotationUID);
            }
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_13__["default"])(renderingEngine, viewportIdsToRender);
            if (newAnnotation) {
                const eventType = _enums__WEBPACK_IMPORTED_MODULE_8__.Events.ANNOTATION_COMPLETED;
                const eventDetail = {
                    annotation,
                };
                (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            }
        };
        this._dragDrawCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { currentPoints } = eventDetail;
            const currentCanvasPoints = currentPoints.canvas;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine, viewport } = enabledElement;
            const { canvasToWorld } = viewport;
            const { annotation, viewportIdsToRender } = this.editData;
            const { data } = annotation;
            data.handles.points = [
                data.handles.points[0],
                canvasToWorld(currentCanvasPoints),
            ];
            annotation.invalidated = true;
            this.editData.hasMoved = true;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_13__["default"])(renderingEngine, viewportIdsToRender);
        };
        this._dragModifyCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;
            const { data } = annotation;
            if (movingTextBox) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const { textBox } = data.handles;
                const { worldPosition } = textBox;
                worldPosition[0] += worldPosDelta[0];
                worldPosition[1] += worldPosDelta[1];
                worldPosition[2] += worldPosDelta[2];
                textBox.hasMoved = true;
            }
            else if (handleIndex === undefined) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const points = data.handles.points;
                points.forEach((point) => {
                    point[0] += worldPosDelta[0];
                    point[1] += worldPosDelta[1];
                    point[2] += worldPosDelta[2];
                });
                annotation.invalidated = true;
            }
            else {
                this._dragHandle(evt);
                annotation.invalidated = true;
            }
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_13__["default"])(renderingEngine, viewportIdsToRender);
        };
        this._dragHandle = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;
            const { annotation, handleIndex } = this.editData;
            const { data } = annotation;
            const { points } = data.handles;
            const canvasCoordinates = points.map((p) => worldToCanvas(p));
            const { currentPoints } = eventDetail;
            const currentCanvasPoints = currentPoints.canvas;
            if (handleIndex === 0) {
                const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];
                const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];
                const canvasCenter = currentCanvasPoints;
                const canvasEnd = [
                    canvasCoordinates[1][0] + dXCanvas,
                    canvasCoordinates[1][1] + dYCanvas,
                ];
                points[0] = canvasToWorld(canvasCenter);
                points[1] = canvasToWorld(canvasEnd);
            }
            else {
                points[1] = canvasToWorld(currentCanvasPoints);
            }
        };
        this.cancel = (element) => {
            if (this.isDrawing) {
                this.isDrawing = false;
                this._deactivateDraw(element);
                this._deactivateModify(element);
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_12__.resetElementCursor)(element);
                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
                const { data } = annotation;
                annotation.highlighted = false;
                data.handles.activeHandleIndex = null;
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
                const { renderingEngine } = enabledElement;
                (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_13__["default"])(renderingEngine, viewportIdsToRender);
                if (newAnnotation) {
                    const eventType = _enums__WEBPACK_IMPORTED_MODULE_8__.Events.ANNOTATION_COMPLETED;
                    const eventDetail = {
                        annotation,
                    };
                    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
                }
                this.editData = null;
                return annotation.annotationUID;
            }
        };
        this._activateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragModifyCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragModifyCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragModifyCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragModifyCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this._activateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragDrawCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_MOVE, this._dragDrawCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragDrawCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragDrawCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_MOVE, this._dragDrawCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragDrawCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport } = enabledElement;
            const { element } = viewport;
            let annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getAnnotations)(this.getToolName(), element);
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const targetId = this.getTargetId(viewport);
            const renderingEngine = viewport.getRenderingEngine();
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const { annotationUID, data } = annotation;
                const { handles } = data;
                const { points, activeHandleIndex } = handles;
                styleSpecifier.annotationUID = annotationUID;
                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
                const color = this.getStyle('color', styleSpecifier, annotation);
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                const center = canvasCoordinates[0];
                const radius = (0,_utilities_math_circle__WEBPACK_IMPORTED_MODULE_17__.getCanvasCircleRadius)(canvasCoordinates);
                const canvasCorners = (0,_utilities_math_circle__WEBPACK_IMPORTED_MODULE_17__.getCanvasCircleCorners)(canvasCoordinates);
                const { centerPointRadius } = this.configuration;
                if (!data.cachedStats[targetId] ||
                    data.cachedStats[targetId].areaUnit === undefined) {
                    data.cachedStats[targetId] = {
                        Modality: null,
                        area: null,
                        max: null,
                        mean: null,
                        stdDev: null,
                        areaUnit: null,
                        radius: null,
                        radiusUnit: null,
                        perimeter: null,
                    };
                    this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);
                }
                else if (annotation.invalidated) {
                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);
                    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.VolumeViewport) {
                        const { referencedImageId } = annotation.metadata;
                        for (const targetId in data.cachedStats) {
                            if (targetId.startsWith('imageId')) {
                                const viewports = renderingEngine.getStackViewports();
                                const invalidatedStack = viewports.find((vp) => {
                                    const referencedImageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.imageIdToURI(referencedImageId);
                                    const hasImageURI = vp.hasImageURI(referencedImageURI);
                                    const currentImageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.imageIdToURI(vp.getCurrentImageId());
                                    return hasImageURI && currentImageURI !== referencedImageURI;
                                });
                                if (invalidatedStack) {
                                    delete data.cachedStats[targetId];
                                }
                            }
                        }
                    }
                }
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                let activeHandleCanvasCoords;
                if (!(0,_stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_5__.isAnnotationVisible)(annotationUID)) {
                    continue;
                }
                if (!(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_4__.isAnnotationLocked)(annotation) &&
                    !this.editData &&
                    activeHandleIndex !== null) {
                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
                }
                if (activeHandleCanvasCoords) {
                    const handleGroupUID = '0';
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
                        color,
                    });
                }
                const dataId = `${annotationUID}-circle`;
                const circleUID = '0';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawCircle)(svgDrawingHelper, annotationUID, circleUID, center, radius, {
                    color,
                    lineDash,
                    lineWidth,
                }, dataId);
                if (centerPointRadius > 0) {
                    if (radius > 3 * centerPointRadius) {
                        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawCircle)(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {
                            color,
                            lineDash,
                            lineWidth,
                        });
                    }
                }
                renderStatus = true;
                const isPreScaled = (0,_utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_16__.isViewportPreScaled)(viewport, targetId);
                const isSuvScaled = this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId);
                const textLines = this._getTextLines(data, targetId, isPreScaled, isSuvScaled);
                if (!textLines || textLines.length === 0) {
                    continue;
                }
                let canvasTextBoxCoords;
                if (!data.handles.textBox.hasMoved) {
                    canvasTextBoxCoords = (0,_utilities_drawing__WEBPACK_IMPORTED_MODULE_10__.getTextBoxCoordsCanvas)(canvasCorners);
                    data.handles.textBox.worldPosition =
                        viewport.canvasToWorld(canvasTextBoxCoords);
                }
                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
                const textBoxUID = '1';
                const boundingBox = (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawLinkedTextBox)(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, this.getLinkedTextBoxStyle(styleSpecifier, annotation));
                const { x: left, y: top, width, height } = boundingBox;
                data.handles.textBox.worldBoundingBox = {
                    topLeft: viewport.canvasToWorld([left, top]),
                    topRight: viewport.canvasToWorld([left + width, top]),
                    bottomLeft: viewport.canvasToWorld([left, top + height]),
                    bottomRight: viewport.canvasToWorld([left + width, top + height]),
                };
            }
            return renderStatus;
        };
        this._getTextLines = (data, targetId, isPreScaled, isSuvScaled) => {
            const cachedVolumeStats = data.cachedStats[targetId];
            const { radius, radiusUnit, area, mean, stdDev, max, isEmptyArea, Modality, areaUnit, } = cachedVolumeStats;
            const textLines = [];
            const unit = (0,_utilities_getModalityUnit__WEBPACK_IMPORTED_MODULE_15__.getModalityUnit)(Modality, isPreScaled, isSuvScaled);
            if (radius) {
                const radiusLine = isEmptyArea
                    ? `Radius: Oblique not supported`
                    : `Radius: ${radius.toFixed(2)} ${radiusUnit}`;
                textLines.push(radiusLine);
            }
            if (area) {
                const areaLine = isEmptyArea
                    ? `Area: Oblique not supported`
                    : `Area: ${area.toFixed(2)} ${areaUnit}\xb2`;
                textLines.push(areaLine);
            }
            if (mean) {
                textLines.push(`Mean: ${mean.toFixed(2)} ${unit}`);
            }
            if (max) {
                textLines.push(`Max: ${max.toFixed(2)} ${unit}`);
            }
            if (stdDev) {
                textLines.push(`Std Dev: ${stdDev.toFixed(2)} ${unit}`);
            }
            return textLines;
        };
        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {
            const data = annotation.data;
            const { viewportId, renderingEngineId } = enabledElement;
            const { points } = data.handles;
            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
            const { viewPlaneNormal, viewUp } = viewport.getCamera();
            const [topLeftCanvas, bottomRightCanvas] = ((0,_utilities_math_circle__WEBPACK_IMPORTED_MODULE_17__.getCanvasCircleCorners)(canvasCoordinates));
            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);
            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);
            const { cachedStats } = data;
            const targetIds = Object.keys(cachedStats);
            const worldPos1 = topLeftWorld;
            const worldPos2 = bottomRightWorld;
            for (let i = 0; i < targetIds.length; i++) {
                const targetId = targetIds[i];
                const image = this.getTargetIdImage(targetId, renderingEngine);
                if (!image) {
                    continue;
                }
                const { dimensions, imageData, metadata, hasPixelSpacing } = image;
                const worldPos1Index = transformWorldToIndex(imageData, worldPos1);
                worldPos1Index[0] = Math.floor(worldPos1Index[0]);
                worldPos1Index[1] = Math.floor(worldPos1Index[1]);
                worldPos1Index[2] = Math.floor(worldPos1Index[2]);
                const worldPos2Index = transformWorldToIndex(imageData, worldPos2);
                worldPos2Index[0] = Math.floor(worldPos2Index[0]);
                worldPos2Index[1] = Math.floor(worldPos2Index[1]);
                worldPos2Index[2] = Math.floor(worldPos2Index[2]);
                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {
                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);
                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);
                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);
                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);
                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);
                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);
                    const boundsIJK = [
                        [iMin, iMax],
                        [jMin, jMax],
                        [kMin, kMax],
                    ];
                    const center = [
                        (topLeftWorld[0] + bottomRightWorld[0]) / 2,
                        (topLeftWorld[1] + bottomRightWorld[1]) / 2,
                        (topLeftWorld[2] + bottomRightWorld[2]) / 2,
                    ];
                    const ellipseObj = {
                        center,
                        xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,
                        yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,
                        zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,
                    };
                    const { worldWidth, worldHeight } = (0,_utilities_planar_getWorldWidthAndHeightFromTwoPoints__WEBPACK_IMPORTED_MODULE_11__["default"])(viewPlaneNormal, viewUp, worldPos1, worldPos2);
                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;
                    const area = Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2));
                    let count = 0;
                    let mean = 0;
                    let stdDev = 0;
                    let max = -Infinity;
                    const meanMaxCalculator = ({ value: newValue }) => {
                        if (newValue > max) {
                            max = newValue;
                        }
                        mean += newValue;
                        count += 1;
                    };
                    (0,_utilities__WEBPACK_IMPORTED_MODULE_14__.pointInShapeCallback)(imageData, (pointLPS, pointIJK) => (0,_utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_18__.pointInEllipse)(ellipseObj, pointLPS), meanMaxCalculator, boundsIJK);
                    mean /= count;
                    const stdCalculator = ({ value }) => {
                        const valueMinusMean = value - mean;
                        stdDev += valueMinusMean * valueMinusMean;
                    };
                    (0,_utilities__WEBPACK_IMPORTED_MODULE_14__.pointInShapeCallback)(imageData, (pointLPS, pointIJK) => (0,_utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_18__.pointInEllipse)(ellipseObj, pointLPS), stdCalculator, boundsIJK);
                    stdDev /= count;
                    stdDev = Math.sqrt(stdDev);
                    cachedStats[targetId] = {
                        Modality: metadata.Modality,
                        area,
                        mean,
                        max,
                        stdDev,
                        isEmptyArea,
                        areaUnit: hasPixelSpacing ? 'mm' : 'px',
                        radius: worldWidth / 2,
                        radiusUnit: hasPixelSpacing ? 'mm' : 'px',
                        perimeter: 2 * Math.PI * (worldWidth / 2),
                    };
                }
                else {
                    this.isHandleOutsideImage = true;
                    cachedStats[targetId] = {
                        Modality: metadata.Modality,
                    };
                }
            }
            annotation.invalidated = false;
            const eventType = _enums__WEBPACK_IMPORTED_MODULE_8__.Events.ANNOTATION_MODIFIED;
            const eventDetail = {
                annotation,
                viewportId,
                renderingEngineId,
            };
            (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            return cachedStats;
        };
        this._isInsideVolume = (index1, index2, dimensions) => {
            return (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index1, dimensions) &&
                _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index2, dimensions));
        };
        this._throttledCalculateCachedStats = (0,_utilities_throttle__WEBPACK_IMPORTED_MODULE_2__["default"])(this._calculateCachedStats, 100, { trailing: true });
    }
}
CircleROITool.toolName = 'CircleROI';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CircleROITool);
//# sourceMappingURL=CircleROITool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js":
/*!*********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _utilities_throttle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/throttle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _utilities_math_line__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/math/line */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/index.js");
/* harmony import */ var _utilities_math_angle_angleBetweenLines__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/math/angle/angleBetweenLines */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/angle/angleBetweenLines.js");
/* harmony import */ var _utilities_math_midPoint__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/math/midPoint */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/midPoint.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_drawing__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../utilities/drawing */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
















class CobbAngleTool extends _base__WEBPACK_IMPORTED_MODULE_3__.AnnotationTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            shadow: true,
            preventHandleOutsideImage: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.addNewAnnotation = (evt) => {
            if (this.angleStartedNotYetCompleted) {
                return;
            }
            this.angleStartedNotYetCompleted = true;
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_15__.hideElementCursor)(element);
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                highlighted: true,
                invalidated: true,
                metadata: {
                    toolName: this.getToolName(),
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                },
                data: {
                    handles: {
                        points: [[...worldPos], [...worldPos]],
                        activeHandleIndex: null,
                        textBox: {
                            hasMoved: false,
                            worldPosition: [0, 0, 0],
                            worldBoundingBox: {
                                topLeft: [0, 0, 0],
                                topRight: [0, 0, 0],
                                bottomLeft: [0, 0, 0],
                                bottomRight: [0, 0, 0],
                            },
                        },
                    },
                    label: '',
                    cachedStats: {},
                },
            };
            (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_5__.addAnnotation)(annotation, element);
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_12__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                handleIndex: 1,
                movingTextBox: false,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const { data } = annotation;
            const [point1, point2, point3, point4] = data.handles.points;
            const canvasPoint1 = viewport.worldToCanvas(point1);
            const canvasPoint2 = viewport.worldToCanvas(point2);
            const canvasPoint3 = viewport.worldToCanvas(point3);
            const canvasPoint4 = viewport.worldToCanvas(point4);
            const line1 = {
                start: {
                    x: canvasPoint1[0],
                    y: canvasPoint1[1],
                },
                end: {
                    x: canvasPoint2[0],
                    y: canvasPoint2[1],
                },
            };
            const line2 = {
                start: {
                    x: canvasPoint3[0],
                    y: canvasPoint3[1],
                },
                end: {
                    x: canvasPoint4[0],
                    y: canvasPoint4[1],
                },
            };
            const distanceToPoint = _utilities_math_line__WEBPACK_IMPORTED_MODULE_7__.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);
            const distanceToPoint2 = _utilities_math_line__WEBPACK_IMPORTED_MODULE_7__.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);
            if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {
                return true;
            }
            return false;
        };
        this.toolSelectedCallback = (evt, annotation, interactionType) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            annotation.highlighted = true;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_12__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                movingTextBox: false,
            };
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_15__.hideElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            evt.preventDefault();
        };
        this._mouseUpCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
            const { data } = annotation;
            if (newAnnotation && !hasMoved) {
                return;
            }
            if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_15__.resetElementCursor)(element);
                this.editData.handleIndex = data.handles.points.length;
                return;
            }
            this.angleStartedNotYetCompleted = false;
            data.handles.activeHandleIndex = null;
            this._deactivateModify(element);
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_15__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            if (this.isHandleOutsideImage &&
                this.configuration.preventHandleOutsideImage) {
                (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_5__.removeAnnotation)(annotation.annotationUID);
            }
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            if (newAnnotation) {
                const eventType = _enums__WEBPACK_IMPORTED_MODULE_1__.Events.ANNOTATION_COMPLETED;
                const eventDetail = {
                    annotation,
                };
                (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.eventTarget, eventType, eventDetail);
            }
            this.editData = null;
            this.isDrawing = false;
        };
        this._mouseDownCallback = (evt) => {
            const { annotation, handleIndex } = this.editData;
            const eventDetail = evt.detail;
            const { element, currentPoints } = eventDetail;
            const worldPos = currentPoints.world;
            const { data } = annotation;
            if (handleIndex === 1) {
                data.handles.points[1] = worldPos;
                this.editData.hasMoved =
                    data.handles.points[1][0] !== data.handles.points[0][0] ||
                        data.handles.points[1][1] !== data.handles.points[0][0];
                return;
            }
            if (handleIndex === 3) {
                data.handles.points[3] = worldPos;
                this.editData.hasMoved =
                    data.handles.points[3][0] !== data.handles.points[2][0] ||
                        data.handles.points[3][1] !== data.handles.points[2][0];
                this.angleStartedNotYetCompleted = false;
                return;
            }
            this.editData.hasMoved = false;
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_15__.hideElementCursor)(element);
            data.handles.points[2] = data.handles.points[3] = worldPos;
            this.editData.handleIndex = data.handles.points.length - 1;
        };
        this._mouseDragCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;
            const { data } = annotation;
            if (movingTextBox) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const { textBox } = data.handles;
                const { worldPosition } = textBox;
                worldPosition[0] += worldPosDelta[0];
                worldPosition[1] += worldPosDelta[1];
                worldPosition[2] += worldPosDelta[2];
                textBox.hasMoved = true;
            }
            else if (handleIndex === undefined) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const points = data.handles.points;
                points.forEach((point) => {
                    point[0] += worldPosDelta[0];
                    point[1] += worldPosDelta[1];
                    point[2] += worldPosDelta[2];
                });
                annotation.invalidated = true;
            }
            else {
                const { currentPoints } = eventDetail;
                const worldPos = currentPoints.world;
                data.handles.points[handleIndex] = [...worldPos];
                annotation.invalidated = true;
            }
            this.editData.hasMoved = true;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
        };
        this.cancel = (element) => {
            if (this.isDrawing) {
                this.isDrawing = false;
                this._deactivateDraw(element);
                this._deactivateModify(element);
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_15__.resetElementCursor)(element);
                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
                const { data } = annotation;
                annotation.highlighted = false;
                data.handles.activeHandleIndex = null;
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
                const { renderingEngine } = enabledElement;
                (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
                if (newAnnotation) {
                    const eventType = _enums__WEBPACK_IMPORTED_MODULE_1__.Events.ANNOTATION_COMPLETED;
                    const eventDetail = {
                        annotation,
                    };
                    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.eventTarget, eventType, eventDetail);
                }
                this.editData = null;
                this.angleStartedNotYetCompleted = false;
                return annotation.annotationUID;
            }
        };
        this._activateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_11__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_UP, this._mouseUpCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_DRAG, this._mouseDragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_CLICK, this._mouseUpCallback);
        };
        this._deactivateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_11__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_UP, this._mouseUpCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_DRAG, this._mouseDragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_CLICK, this._mouseUpCallback);
        };
        this._activateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_11__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_UP, this._mouseUpCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_DRAG, this._mouseDragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_MOVE, this._mouseDragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_CLICK, this._mouseUpCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_DOWN, this._mouseDownCallback);
        };
        this._deactivateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_11__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_UP, this._mouseUpCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_DRAG, this._mouseDragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_MOVE, this._mouseDragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_CLICK, this._mouseUpCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_1__.Events.MOUSE_DOWN, this._mouseDownCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport } = enabledElement;
            const { element } = viewport;
            let annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_5__.getAnnotations)(this.getToolName(), element);
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const targetId = this.getTargetId(viewport);
            const renderingEngine = viewport.getRenderingEngine();
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const { annotationUID, data } = annotation;
                const { points, activeHandleIndex } = data.handles;
                styleSpecifier.annotationUID = annotationUID;
                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
                const color = this.getStyle('color', styleSpecifier, annotation);
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                if (!data.cachedStats[targetId]) {
                    data.cachedStats[targetId] = {
                        angle: null,
                    };
                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);
                }
                else if (annotation.invalidated) {
                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);
                }
                let activeHandleCanvasCoords;
                if (!(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_6__.isAnnotationLocked)(annotation) &&
                    !this.editData &&
                    activeHandleIndex !== null) {
                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
                }
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                if (activeHandleCanvasCoords) {
                    const handleGroupUID = '0';
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_10__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {
                        color,
                        lineDash,
                        lineWidth,
                    });
                }
                let lineUID = '1';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_10__.drawLine)(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
                    color,
                    width: lineWidth,
                    lineDash,
                });
                renderStatus = true;
                if (canvasCoordinates.length < 4) {
                    return renderStatus;
                }
                lineUID = '2';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_10__.drawLine)(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[2], canvasCoordinates[3], {
                    color,
                    width: lineWidth,
                    lineDash,
                });
                lineUID = '3';
                const mid1 = (0,_utilities_math_midPoint__WEBPACK_IMPORTED_MODULE_9__.midPoint2)(canvasCoordinates[0], canvasCoordinates[1]);
                const mid2 = (0,_utilities_math_midPoint__WEBPACK_IMPORTED_MODULE_9__.midPoint2)(canvasCoordinates[2], canvasCoordinates[3]);
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_10__.drawLine)(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {
                    color,
                    lineWidth: '1',
                    lineDash: '1,4',
                });
                if (!data.cachedStats[targetId]?.angle) {
                    continue;
                }
                const textLines = this._getTextLines(data, targetId);
                if (!data.handles.textBox.hasMoved) {
                    const canvasTextBoxCoords = (0,_utilities_drawing__WEBPACK_IMPORTED_MODULE_13__.getTextBoxCoordsCanvas)(canvasCoordinates);
                    data.handles.textBox.worldPosition =
                        viewport.canvasToWorld(canvasTextBoxCoords);
                }
                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
                const textBoxUID = '1';
                const boundingBox = (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_10__.drawLinkedTextBox)(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, this.getLinkedTextBoxStyle(styleSpecifier, annotation));
                const { x: left, y: top, width, height } = boundingBox;
                data.handles.textBox.worldBoundingBox = {
                    topLeft: viewport.canvasToWorld([left, top]),
                    topRight: viewport.canvasToWorld([left + width, top]),
                    bottomLeft: viewport.canvasToWorld([left, top + height]),
                    bottomRight: viewport.canvasToWorld([left + width, top + height]),
                };
            }
            return renderStatus;
        };
        this._throttledCalculateCachedStats = (0,_utilities_throttle__WEBPACK_IMPORTED_MODULE_4__["default"])(this._calculateCachedStats, 100, { trailing: true });
    }
    handleSelectedCallback(evt, annotation, handle, interactionType = 'mouse') {
        const eventDetail = evt.detail;
        const { element } = eventDetail;
        const { data } = annotation;
        annotation.highlighted = true;
        let movingTextBox = false;
        let handleIndex;
        if (handle.worldPosition) {
            movingTextBox = true;
        }
        else {
            handleIndex = data.handles.points.findIndex((p) => p === handle);
        }
        const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_12__.getViewportIdsWithToolToRender)(element, this.getToolName());
        this.editData = {
            annotation,
            viewportIdsToRender,
            handleIndex,
            movingTextBox,
        };
        this._activateModify(element);
        (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_15__.hideElementCursor)(element);
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElement)(element);
        const { renderingEngine } = enabledElement;
        (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
        evt.preventDefault();
    }
    _getTextLines(data, targetId) {
        const cachedVolumeStats = data.cachedStats[targetId];
        const { angle } = cachedVolumeStats;
        if (angle === undefined) {
            return;
        }
        const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];
        return textLines;
    }
    _calculateCachedStats(annotation, renderingEngine, enabledElement) {
        const data = annotation.data;
        const { viewportId, renderingEngineId } = enabledElement;
        if (data.handles.points.length !== 4) {
            return;
        }
        const seg1 = [null, null];
        const seg2 = [null, null];
        let minDist = Number.MAX_VALUE;
        for (let i = 0; i < 2; i += 1) {
            for (let j = 2; j < 4; j += 1) {
                const dist = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.distance(data.handles.points[i], data.handles.points[j]);
                if (dist < minDist) {
                    minDist = dist;
                    seg1[1] = data.handles.points[i];
                    seg1[0] = data.handles.points[(i + 1) % 2];
                    seg2[0] = data.handles.points[j];
                    seg2[1] = data.handles.points[2 + ((j - 1) % 2)];
                }
            }
        }
        const { cachedStats } = data;
        const targetIds = Object.keys(cachedStats);
        for (let i = 0; i < targetIds.length; i++) {
            const targetId = targetIds[i];
            const angle = (0,_utilities_math_angle_angleBetweenLines__WEBPACK_IMPORTED_MODULE_8__["default"])(seg1, seg2);
            cachedStats[targetId] = {
                angle,
            };
        }
        annotation.invalidated = false;
        const eventType = _enums__WEBPACK_IMPORTED_MODULE_1__.Events.ANNOTATION_MODIFIED;
        const eventDetail = {
            annotation,
            viewportId,
            renderingEngineId,
        };
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.eventTarget, eventType, eventDetail);
        return cachedStats;
    }
}
CobbAngleTool.toolName = 'CobbAngle';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CobbAngleTool);
//# sourceMappingURL=CobbAngleTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js":
/*!*********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _ProbeTool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ProbeTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js");
/* harmony import */ var _utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/viewport/isViewportPreScaled */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js");







class DragProbeTool extends _ProbeTool__WEBPACK_IMPORTED_MODULE_5__["default"] {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            shadow: true,
            preventHandleOutsideImage: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.postMouseDownCallback = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
            const annotation = {
                invalidated: true,
                highlighted: true,
                isVisible: true,
                metadata: {
                    toolName: this.getToolName(),
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),
                    referencedImageId,
                },
                data: {
                    label: '',
                    handles: { points: [[...worldPos]] },
                    cachedStats: {},
                },
            };
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_2__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                newAnnotation: true,
                viewportIdsToRender,
            };
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_3__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_4__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this.postTouchStartCallback = (evt) => {
            return this.postMouseDownCallback(evt);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport } = enabledElement;
            if (!this.editData) {
                return renderStatus;
            }
            const annotations = this.filterInteractableAnnotationsForElement(viewport.element, [this.editData.annotation]);
            if (!annotations?.length) {
                return renderStatus;
            }
            const targetId = this.getTargetId(viewport);
            const renderingEngine = viewport.getRenderingEngine();
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            const annotation = this.editData.annotation;
            const annotationUID = annotation.annotationUID;
            const data = annotation.data;
            const point = data.handles.points[0];
            const canvasCoordinates = viewport.worldToCanvas(point);
            styleSpecifier.annotationUID = annotationUID;
            const color = this.getStyle('color', styleSpecifier, annotation);
            if (!data.cachedStats[targetId]) {
                data.cachedStats[targetId] = {
                    Modality: null,
                    index: null,
                    value: null,
                };
                this._calculateCachedStats(annotation, renderingEngine, enabledElement);
            }
            else if (annotation.invalidated) {
                this._calculateCachedStats(annotation, renderingEngine, enabledElement);
            }
            if (!viewport.getRenderingEngine()) {
                console.warn('Rendering Engine has been destroyed');
                return renderStatus;
            }
            const handleGroupUID = '0';
            (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_1__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });
            renderStatus = true;
            const isPreScaled = (0,_utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_6__.isViewportPreScaled)(viewport, targetId);
            const isSuvScaled = this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId);
            const textLines = this._getTextLines(data, targetId, isPreScaled, isSuvScaled);
            if (textLines) {
                const textCanvasCoordinates = [
                    canvasCoordinates[0] + 6,
                    canvasCoordinates[1] - 6,
                ];
                const textUID = '0';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_1__.drawTextBox)(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));
            }
            return renderStatus;
        };
    }
}
DragProbeTool.toolName = 'DragProbe';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DragProbeTool);
//# sourceMappingURL=DragProbeTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js":
/*!*************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities_throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/throttle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_drawing__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/drawing */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js");
/* harmony import */ var _utilities_planar_getWorldWidthAndHeightFromTwoPoints__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/planar/getWorldWidthAndHeightFromTwoPoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getWorldWidthAndHeightFromTwoPoints.js");
/* harmony import */ var _utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/math/ellipse */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _utilities___WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/ */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");
/* harmony import */ var _utilities_getModalityUnit__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../utilities/getModalityUnit */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getModalityUnit.js");
/* harmony import */ var _utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/viewport/isViewportPreScaled */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js");


















const { transformWorldToIndex } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities;
class EllipticalROITool extends _base__WEBPACK_IMPORTED_MODULE_0__.AnnotationTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            shadow: true,
            preventHandleOutsideImage: false,
            centerPointRadius: 0,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.isHandleOutsideImage = false;
        this.addNewAnnotation = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const canvasPos = currentPoints.canvas;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                highlighted: true,
                invalidated: true,
                metadata: {
                    toolName: this.getToolName(),
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                },
                data: {
                    label: '',
                    handles: {
                        textBox: {
                            hasMoved: false,
                            worldPosition: [0, 0, 0],
                            worldBoundingBox: {
                                topLeft: [0, 0, 0],
                                topRight: [0, 0, 0],
                                bottomLeft: [0, 0, 0],
                                bottomRight: [0, 0, 0],
                            },
                        },
                        points: [
                            [...worldPos],
                            [...worldPos],
                            [...worldPos],
                            [...worldPos],
                        ],
                        activeHandleIndex: null,
                    },
                    cachedStats: {},
                    initialRotation: viewport.getRotation(),
                },
            };
            (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.addAnnotation)(annotation, element);
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                centerCanvas: canvasPos,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const { data } = annotation;
            const { points } = data.handles;
            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
            const canvasCorners = (0,_utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_12__.getCanvasEllipseCorners)(canvasCoordinates);
            const [canvasPoint1, canvasPoint2] = canvasCorners;
            const minorEllipse = {
                left: Math.min(canvasPoint1[0], canvasPoint2[0]) + proximity / 2,
                top: Math.min(canvasPoint1[1], canvasPoint2[1]) + proximity / 2,
                width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) - proximity,
                height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) - proximity,
            };
            const majorEllipse = {
                left: Math.min(canvasPoint1[0], canvasPoint2[0]) - proximity / 2,
                top: Math.min(canvasPoint1[1], canvasPoint2[1]) - proximity / 2,
                width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) + proximity,
                height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) + proximity,
            };
            const pointInMinorEllipse = this._pointInEllipseCanvas(minorEllipse, canvasCoords);
            const pointInMajorEllipse = this._pointInEllipseCanvas(majorEllipse, canvasCoords);
            if (pointInMajorEllipse && !pointInMinorEllipse) {
                return true;
            }
            return false;
        };
        this.toolSelectedCallback = (evt, annotation) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            annotation.highlighted = true;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                movingTextBox: false,
            };
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            this._activateModify(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            evt.preventDefault();
        };
        this.handleSelectedCallback = (evt, annotation, handle) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { data } = annotation;
            annotation.highlighted = true;
            let movingTextBox = false;
            let handleIndex;
            let centerCanvas;
            let canvasWidth;
            let canvasHeight;
            let originalHandleCanvas;
            if (handle.worldPosition) {
                movingTextBox = true;
            }
            else {
                const { points } = data.handles;
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
                const { worldToCanvas } = enabledElement.viewport;
                handleIndex = points.findIndex((p) => p === handle);
                const pointsCanvas = points.map(worldToCanvas);
                originalHandleCanvas = pointsCanvas[handleIndex];
                canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);
                canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);
                centerCanvas = [
                    (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,
                    (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,
                ];
            }
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                handleIndex,
                canvasWidth,
                canvasHeight,
                centerCanvas,
                originalHandleCanvas,
                movingTextBox,
            };
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            evt.preventDefault();
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
            const { data } = annotation;
            if (newAnnotation && !hasMoved) {
                return;
            }
            annotation.highlighted = false;
            data.handles.activeHandleIndex = null;
            this._deactivateModify(element);
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            this.editData = null;
            this.isDrawing = false;
            if (this.isHandleOutsideImage &&
                this.configuration.preventHandleOutsideImage) {
                (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.removeAnnotation)(annotation.annotationUID);
            }
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            if (newAnnotation) {
                const eventType = _enums__WEBPACK_IMPORTED_MODULE_8__.Events.ANNOTATION_COMPLETED;
                const eventDetail = {
                    annotation,
                };
                (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            }
        };
        this._dragDrawCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { currentPoints } = eventDetail;
            const currentCanvasPoints = currentPoints.canvas;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine, viewport } = enabledElement;
            const { canvasToWorld } = viewport;
            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;
            const { data } = annotation;
            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);
            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);
            const bottomCanvas = [centerCanvas[0], centerCanvas[1] - dY];
            const topCanvas = [centerCanvas[0], centerCanvas[1] + dY];
            const leftCanvas = [centerCanvas[0] - dX, centerCanvas[1]];
            const rightCanvas = [centerCanvas[0] + dX, centerCanvas[1]];
            data.handles.points = [
                canvasToWorld(bottomCanvas),
                canvasToWorld(topCanvas),
                canvasToWorld(leftCanvas),
                canvasToWorld(rightCanvas),
            ];
            annotation.invalidated = true;
            this.editData.hasMoved = true;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
        };
        this._dragModifyCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;
            const { data } = annotation;
            if (movingTextBox) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const { textBox } = data.handles;
                const { worldPosition } = textBox;
                worldPosition[0] += worldPosDelta[0];
                worldPosition[1] += worldPosDelta[1];
                worldPosition[2] += worldPosDelta[2];
                textBox.hasMoved = true;
            }
            else if (handleIndex === undefined) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const points = data.handles.points;
                points.forEach((point) => {
                    point[0] += worldPosDelta[0];
                    point[1] += worldPosDelta[1];
                    point[2] += worldPosDelta[2];
                });
                annotation.invalidated = true;
            }
            else {
                this._dragHandle(evt);
                annotation.invalidated = true;
            }
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
        };
        this._dragHandle = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { canvasToWorld } = enabledElement.viewport;
            const { annotation, canvasWidth, canvasHeight, handleIndex, centerCanvas, originalHandleCanvas, } = this.editData;
            const { data } = annotation;
            const { points } = data.handles;
            const { currentPoints } = eventDetail;
            const currentCanvasPoints = currentPoints.canvas;
            if (handleIndex === 0 || handleIndex === 1) {
                const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);
                const canvasBottom = [
                    centerCanvas[0],
                    centerCanvas[1] - dYCanvas,
                ];
                const canvasTop = [
                    centerCanvas[0],
                    centerCanvas[1] + dYCanvas,
                ];
                points[0] = canvasToWorld(canvasBottom);
                points[1] = canvasToWorld(canvasTop);
                const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];
                const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;
                const canvasLeft = [
                    centerCanvas[0] - newHalfCanvasWidth,
                    centerCanvas[1],
                ];
                const canvasRight = [
                    centerCanvas[0] + newHalfCanvasWidth,
                    centerCanvas[1],
                ];
                points[2] = canvasToWorld(canvasLeft);
                points[3] = canvasToWorld(canvasRight);
            }
            else {
                const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);
                const canvasLeft = [
                    centerCanvas[0] - dXCanvas,
                    centerCanvas[1],
                ];
                const canvasRight = [
                    centerCanvas[0] + dXCanvas,
                    centerCanvas[1],
                ];
                points[2] = canvasToWorld(canvasLeft);
                points[3] = canvasToWorld(canvasRight);
                const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];
                const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;
                const canvasBottom = [
                    centerCanvas[0],
                    centerCanvas[1] - newHalfCanvasHeight,
                ];
                const canvasTop = [
                    centerCanvas[0],
                    centerCanvas[1] + newHalfCanvasHeight,
                ];
                points[0] = canvasToWorld(canvasBottom);
                points[1] = canvasToWorld(canvasTop);
            }
        };
        this.cancel = (element) => {
            if (this.isDrawing) {
                this.isDrawing = false;
                this._deactivateDraw(element);
                this._deactivateModify(element);
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.resetElementCursor)(element);
                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
                const { data } = annotation;
                annotation.highlighted = false;
                data.handles.activeHandleIndex = null;
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
                const { renderingEngine } = enabledElement;
                (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
                if (newAnnotation) {
                    const eventType = _enums__WEBPACK_IMPORTED_MODULE_8__.Events.ANNOTATION_COMPLETED;
                    const eventDetail = {
                        annotation,
                    };
                    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
                }
                this.editData = null;
                return annotation.annotationUID;
            }
        };
        this._activateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragModifyCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragModifyCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragModifyCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragModifyCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this._activateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragDrawCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_MOVE, this._dragDrawCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragDrawCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragDrawCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_MOVE, this._dragDrawCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragDrawCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport } = enabledElement;
            const { element } = viewport;
            let annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getAnnotations)(this.getToolName(), element);
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const targetId = this.getTargetId(viewport);
            const renderingEngine = viewport.getRenderingEngine();
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const { annotationUID, data } = annotation;
                const { handles } = data;
                const { points, activeHandleIndex } = handles;
                styleSpecifier.annotationUID = annotationUID;
                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
                const color = this.getStyle('color', styleSpecifier, annotation);
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                const rotation = Math.abs(viewport.getRotation() - (data.initialRotation || 0));
                let canvasCorners;
                if (rotation == 90 || rotation == 270) {
                    canvasCorners = (0,_utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_12__.getCanvasEllipseCorners)([
                        canvasCoordinates[2],
                        canvasCoordinates[3],
                        canvasCoordinates[0],
                        canvasCoordinates[1],
                    ]);
                }
                else {
                    canvasCorners = ((0,_utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_12__.getCanvasEllipseCorners)(canvasCoordinates));
                }
                const { centerPointRadius } = this.configuration;
                if (!data.cachedStats[targetId] ||
                    data.cachedStats[targetId].areaUnit === undefined) {
                    data.cachedStats[targetId] = {
                        Modality: null,
                        area: null,
                        max: null,
                        mean: null,
                        stdDev: null,
                        areaUnit: null,
                    };
                    this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);
                }
                else if (annotation.invalidated) {
                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);
                    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.VolumeViewport) {
                        const { referencedImageId } = annotation.metadata;
                        for (const targetId in data.cachedStats) {
                            if (targetId.startsWith('imageId')) {
                                const viewports = renderingEngine.getStackViewports();
                                const invalidatedStack = viewports.find((vp) => {
                                    const referencedImageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.imageIdToURI(referencedImageId);
                                    const hasImageURI = vp.hasImageURI(referencedImageURI);
                                    const currentImageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.imageIdToURI(vp.getCurrentImageId());
                                    return hasImageURI && currentImageURI !== referencedImageURI;
                                });
                                if (invalidatedStack) {
                                    delete data.cachedStats[targetId];
                                }
                            }
                        }
                    }
                }
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                let activeHandleCanvasCoords;
                if (!(0,_stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_5__.isAnnotationVisible)(annotationUID)) {
                    continue;
                }
                if (!(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_4__.isAnnotationLocked)(annotation) &&
                    !this.editData &&
                    activeHandleIndex !== null) {
                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
                }
                if (activeHandleCanvasCoords) {
                    const handleGroupUID = '0';
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
                        color,
                    });
                }
                const dataId = `${annotationUID}-ellipse`;
                const ellipseUID = '0';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawEllipse)(svgDrawingHelper, annotationUID, ellipseUID, canvasCorners[0], canvasCorners[1], {
                    color,
                    lineDash,
                    lineWidth,
                }, dataId);
                if (centerPointRadius > 0) {
                    const minRadius = Math.min(Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2);
                    if (minRadius > 3 * centerPointRadius) {
                        const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);
                        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawCircle)(svgDrawingHelper, annotationUID, `${ellipseUID}-center`, centerPoint, centerPointRadius, {
                            color,
                            lineDash,
                            lineWidth,
                        });
                    }
                }
                renderStatus = true;
                const isPreScaled = (0,_utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_17__.isViewportPreScaled)(viewport, targetId);
                const isSuvScaled = this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId);
                const textLines = this._getTextLines(data, targetId, isPreScaled, isSuvScaled);
                if (!textLines || textLines.length === 0) {
                    continue;
                }
                let canvasTextBoxCoords;
                if (!data.handles.textBox.hasMoved) {
                    canvasTextBoxCoords = (0,_utilities_drawing__WEBPACK_IMPORTED_MODULE_10__.getTextBoxCoordsCanvas)(canvasCorners);
                    data.handles.textBox.worldPosition =
                        viewport.canvasToWorld(canvasTextBoxCoords);
                }
                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
                const textBoxUID = '1';
                const boundingBox = (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawLinkedTextBox)(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, this.getLinkedTextBoxStyle(styleSpecifier, annotation));
                const { x: left, y: top, width, height } = boundingBox;
                data.handles.textBox.worldBoundingBox = {
                    topLeft: viewport.canvasToWorld([left, top]),
                    topRight: viewport.canvasToWorld([left + width, top]),
                    bottomLeft: viewport.canvasToWorld([left, top + height]),
                    bottomRight: viewport.canvasToWorld([left + width, top + height]),
                };
            }
            return renderStatus;
        };
        this._getTextLines = (data, targetId, isPreScaled, isSuvScaled) => {
            const cachedVolumeStats = data.cachedStats[targetId];
            const { area, mean, stdDev, max, isEmptyArea, Modality, areaUnit } = cachedVolumeStats;
            const textLines = [];
            const unit = (0,_utilities_getModalityUnit__WEBPACK_IMPORTED_MODULE_16__.getModalityUnit)(Modality, isPreScaled, isSuvScaled);
            if (area) {
                const areaLine = isEmptyArea
                    ? `Area: Oblique not supported`
                    : `Area: ${area.toFixed(2)} ${areaUnit}\xb2`;
                textLines.push(areaLine);
            }
            if (mean) {
                textLines.push(`Mean: ${mean.toFixed(2)} ${unit}`);
            }
            if (max) {
                textLines.push(`Max: ${max.toFixed(2)} ${unit}`);
            }
            if (stdDev) {
                textLines.push(`Std Dev: ${stdDev.toFixed(2)} ${unit}`);
            }
            return textLines;
        };
        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {
            const data = annotation.data;
            const { viewportId, renderingEngineId } = enabledElement;
            const { points } = data.handles;
            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
            const { viewPlaneNormal, viewUp } = viewport.getCamera();
            const [topLeftCanvas, bottomRightCanvas] = ((0,_utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_12__.getCanvasEllipseCorners)(canvasCoordinates));
            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);
            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);
            const { cachedStats } = data;
            const targetIds = Object.keys(cachedStats);
            const worldPos1 = topLeftWorld;
            const worldPos2 = bottomRightWorld;
            for (let i = 0; i < targetIds.length; i++) {
                const targetId = targetIds[i];
                const image = this.getTargetIdImage(targetId, renderingEngine);
                if (!image) {
                    continue;
                }
                const { dimensions, imageData, metadata, hasPixelSpacing } = image;
                const worldPos1Index = transformWorldToIndex(imageData, worldPos1);
                worldPos1Index[0] = Math.floor(worldPos1Index[0]);
                worldPos1Index[1] = Math.floor(worldPos1Index[1]);
                worldPos1Index[2] = Math.floor(worldPos1Index[2]);
                const worldPos2Index = transformWorldToIndex(imageData, worldPos2);
                worldPos2Index[0] = Math.floor(worldPos2Index[0]);
                worldPos2Index[1] = Math.floor(worldPos2Index[1]);
                worldPos2Index[2] = Math.floor(worldPos2Index[2]);
                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {
                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);
                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);
                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);
                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);
                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);
                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);
                    const boundsIJK = [
                        [iMin, iMax],
                        [jMin, jMax],
                        [kMin, kMax],
                    ];
                    const center = [
                        (topLeftWorld[0] + bottomRightWorld[0]) / 2,
                        (topLeftWorld[1] + bottomRightWorld[1]) / 2,
                        (topLeftWorld[2] + bottomRightWorld[2]) / 2,
                    ];
                    const ellipseObj = {
                        center,
                        xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,
                        yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,
                        zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,
                    };
                    const { worldWidth, worldHeight } = (0,_utilities_planar_getWorldWidthAndHeightFromTwoPoints__WEBPACK_IMPORTED_MODULE_11__["default"])(viewPlaneNormal, viewUp, worldPos1, worldPos2);
                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;
                    const area = Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2));
                    let count = 0;
                    let mean = 0;
                    let stdDev = 0;
                    let max = -Infinity;
                    const meanMaxCalculator = ({ value: newValue }) => {
                        if (newValue > max) {
                            max = newValue;
                        }
                        mean += newValue;
                        count += 1;
                    };
                    (0,_utilities___WEBPACK_IMPORTED_MODULE_15__.pointInShapeCallback)(imageData, (pointLPS, pointIJK) => (0,_utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_12__.pointInEllipse)(ellipseObj, pointLPS), meanMaxCalculator, boundsIJK);
                    mean /= count;
                    const stdCalculator = ({ value }) => {
                        const valueMinusMean = value - mean;
                        stdDev += valueMinusMean * valueMinusMean;
                    };
                    (0,_utilities___WEBPACK_IMPORTED_MODULE_15__.pointInShapeCallback)(imageData, (pointLPS, pointIJK) => (0,_utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_12__.pointInEllipse)(ellipseObj, pointLPS), stdCalculator, boundsIJK);
                    stdDev /= count;
                    stdDev = Math.sqrt(stdDev);
                    cachedStats[targetId] = {
                        Modality: metadata.Modality,
                        area,
                        mean,
                        max,
                        stdDev,
                        isEmptyArea,
                        areaUnit: hasPixelSpacing ? 'mm' : 'px',
                    };
                }
                else {
                    this.isHandleOutsideImage = true;
                    cachedStats[targetId] = {
                        Modality: metadata.Modality,
                    };
                }
            }
            annotation.invalidated = false;
            const eventType = _enums__WEBPACK_IMPORTED_MODULE_8__.Events.ANNOTATION_MODIFIED;
            const eventDetail = {
                annotation,
                viewportId,
                renderingEngineId,
            };
            (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            return cachedStats;
        };
        this._isInsideVolume = (index1, index2, dimensions) => {
            return (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index1, dimensions) &&
                _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index2, dimensions));
        };
        this._throttledCalculateCachedStats = (0,_utilities_throttle__WEBPACK_IMPORTED_MODULE_2__["default"])(this._calculateCachedStats, 100, { trailing: true });
    }
    _pointInEllipseCanvas(ellipse, location) {
        const xRadius = ellipse.width / 2;
        const yRadius = ellipse.height / 2;
        if (xRadius <= 0.0 || yRadius <= 0.0) {
            return false;
        }
        const center = [ellipse.left + xRadius, ellipse.top + yRadius];
        const normalized = [location[0] - center[0], location[1] - center[1]];
        const inEllipse = (normalized[0] * normalized[0]) / (xRadius * xRadius) +
            (normalized[1] * normalized[1]) / (yRadius * yRadius) <=
            1.0;
        return inEllipse;
    }
    _getCanvasEllipseCenter(ellipseCanvasPoints) {
        const [bottom, top, left, right] = ellipseCanvasPoints;
        const topLeft = [left[0], top[1]];
        const bottomRight = [right[0], bottom[1]];
        return [
            (topLeft[0] + bottomRight[0]) / 2,
            (topLeft[1] + bottomRight[1]) / 2,
        ];
    }
}
EllipticalROITool.toolName = 'EllipticalROI';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EllipticalROITool);
//# sourceMappingURL=EllipticalROITool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js":
/*!******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _utilities_throttle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilities/throttle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");
/* harmony import */ var _utilities_math_line__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/math/line */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/index.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_drawing__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/drawing */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");














const { transformWorldToIndex } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities;
class LengthTool extends _base__WEBPACK_IMPORTED_MODULE_2__.AnnotationTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            preventHandleOutsideImage: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.addNewAnnotation = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                highlighted: true,
                invalidated: true,
                metadata: {
                    toolName: this.getToolName(),
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                },
                data: {
                    handles: {
                        points: [[...worldPos], [...worldPos]],
                        activeHandleIndex: null,
                        textBox: {
                            hasMoved: false,
                            worldPosition: [0, 0, 0],
                            worldBoundingBox: {
                                topLeft: [0, 0, 0],
                                topRight: [0, 0, 0],
                                bottomLeft: [0, 0, 0],
                                bottomRight: [0, 0, 0],
                            },
                        },
                    },
                    label: '',
                    cachedStats: {},
                },
            };
            (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__.addAnnotation)(annotation, element);
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                handleIndex: 1,
                movingTextBox: false,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const { data } = annotation;
            const [point1, point2] = data.handles.points;
            const canvasPoint1 = viewport.worldToCanvas(point1);
            const canvasPoint2 = viewport.worldToCanvas(point2);
            const line = {
                start: {
                    x: canvasPoint1[0],
                    y: canvasPoint1[1],
                },
                end: {
                    x: canvasPoint2[0],
                    y: canvasPoint2[1],
                },
            };
            const distanceToPoint = _utilities_math_line__WEBPACK_IMPORTED_MODULE_7__.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);
            if (distanceToPoint <= proximity) {
                return true;
            }
            return false;
        };
        this.toolSelectedCallback = (evt, annotation) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            annotation.highlighted = true;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                movingTextBox: false,
            };
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
            evt.preventDefault();
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
            const { data } = annotation;
            if (newAnnotation && !hasMoved) {
                return;
            }
            data.handles.activeHandleIndex = null;
            this._deactivateModify(element);
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            if (this.isHandleOutsideImage &&
                this.configuration.preventHandleOutsideImage) {
                (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__.removeAnnotation)(annotation.annotationUID);
            }
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
            if (newAnnotation) {
                const eventType = _enums__WEBPACK_IMPORTED_MODULE_0__.Events.ANNOTATION_COMPLETED;
                const eventDetail = {
                    annotation,
                };
                (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            }
            this.editData = null;
            this.isDrawing = false;
        };
        this._dragCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;
            const { data } = annotation;
            if (movingTextBox) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const { textBox } = data.handles;
                const { worldPosition } = textBox;
                worldPosition[0] += worldPosDelta[0];
                worldPosition[1] += worldPosDelta[1];
                worldPosition[2] += worldPosDelta[2];
                textBox.hasMoved = true;
            }
            else if (handleIndex === undefined) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const points = data.handles.points;
                points.forEach((point) => {
                    point[0] += worldPosDelta[0];
                    point[1] += worldPosDelta[1];
                    point[2] += worldPosDelta[2];
                });
                annotation.invalidated = true;
            }
            else {
                const { currentPoints } = eventDetail;
                const worldPos = currentPoints.world;
                data.handles.points[handleIndex] = [...worldPos];
                annotation.invalidated = true;
            }
            this.editData.hasMoved = true;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
        };
        this.cancel = (element) => {
            if (this.isDrawing) {
                this.isDrawing = false;
                this._deactivateDraw(element);
                this._deactivateModify(element);
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.resetElementCursor)(element);
                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
                const { data } = annotation;
                annotation.highlighted = false;
                data.handles.activeHandleIndex = null;
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
                const { renderingEngine } = enabledElement;
                (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
                if (newAnnotation) {
                    const eventType = _enums__WEBPACK_IMPORTED_MODULE_0__.Events.ANNOTATION_COMPLETED;
                    const eventDetail = {
                        annotation,
                    };
                    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
                }
                this.editData = null;
                return annotation.annotationUID;
            }
        };
        this._activateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_9__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_9__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
        };
        this._activateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_9__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_MOVE, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_9__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_MOVE, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_0__.Events.TOUCH_TAP, this._endCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport } = enabledElement;
            const { element } = viewport;
            let annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__.getAnnotations)(this.getToolName(), element);
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const targetId = this.getTargetId(viewport);
            const renderingEngine = viewport.getRenderingEngine();
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const { annotationUID, data } = annotation;
                const { points, activeHandleIndex } = data.handles;
                styleSpecifier.annotationUID = annotationUID;
                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
                const color = this.getStyle('color', styleSpecifier, annotation);
                const shadow = this.getStyle('shadow', styleSpecifier, annotation);
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                let activeHandleCanvasCoords;
                if (!data.cachedStats[targetId] ||
                    data.cachedStats[targetId].unit === undefined) {
                    data.cachedStats[targetId] = {
                        length: null,
                        unit: null,
                    };
                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);
                }
                else if (annotation.invalidated) {
                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);
                }
                if (!(0,_stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_6__.isAnnotationVisible)(annotationUID)) {
                    continue;
                }
                if (!(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_5__.isAnnotationLocked)(annotation) &&
                    !this.editData &&
                    activeHandleIndex !== null) {
                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
                }
                if (activeHandleCanvasCoords) {
                    const handleGroupUID = '0';
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_8__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {
                        color,
                        lineDash,
                        lineWidth,
                    });
                }
                const dataId = `${annotationUID}-line`;
                const lineUID = '1';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_8__.drawLine)(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {
                    color,
                    width: lineWidth,
                    lineDash,
                    shadow,
                }, dataId);
                renderStatus = true;
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                const textLines = this._getTextLines(data, targetId);
                if (!data.handles.textBox.hasMoved) {
                    const canvasTextBoxCoords = (0,_utilities_drawing__WEBPACK_IMPORTED_MODULE_11__.getTextBoxCoordsCanvas)(canvasCoordinates);
                    data.handles.textBox.worldPosition =
                        viewport.canvasToWorld(canvasTextBoxCoords);
                }
                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
                const textBoxUID = '1';
                const boundingBox = (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_8__.drawLinkedTextBox)(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, this.getLinkedTextBoxStyle(styleSpecifier, annotation));
                const { x: left, y: top, width, height } = boundingBox;
                data.handles.textBox.worldBoundingBox = {
                    topLeft: viewport.canvasToWorld([left, top]),
                    topRight: viewport.canvasToWorld([left + width, top]),
                    bottomLeft: viewport.canvasToWorld([left, top + height]),
                    bottomRight: viewport.canvasToWorld([left + width, top + height]),
                };
            }
            return renderStatus;
        };
        this._throttledCalculateCachedStats = (0,_utilities_throttle__WEBPACK_IMPORTED_MODULE_3__["default"])(this._calculateCachedStats, 100, { trailing: true });
    }
    handleSelectedCallback(evt, annotation, handle) {
        const eventDetail = evt.detail;
        const { element } = eventDetail;
        const { data } = annotation;
        annotation.highlighted = true;
        let movingTextBox = false;
        let handleIndex;
        if (handle.worldPosition) {
            movingTextBox = true;
        }
        else {
            handleIndex = data.handles.points.findIndex((p) => p === handle);
        }
        const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_10__.getViewportIdsWithToolToRender)(element, this.getToolName());
        this.editData = {
            annotation,
            viewportIdsToRender,
            handleIndex,
            movingTextBox,
        };
        this._activateModify(element);
        (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const { renderingEngine } = enabledElement;
        (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_12__["default"])(renderingEngine, viewportIdsToRender);
        evt.preventDefault();
    }
    _getTextLines(data, targetId) {
        const cachedVolumeStats = data.cachedStats[targetId];
        const { length, unit } = cachedVolumeStats;
        if (length === undefined || length === null || isNaN(length)) {
            return;
        }
        const textLines = [`${length.toFixed(2)} ${unit}`];
        return textLines;
    }
    _calculateLength(pos1, pos2) {
        const dx = pos1[0] - pos2[0];
        const dy = pos1[1] - pos2[1];
        const dz = pos1[2] - pos2[2];
        return Math.sqrt(dx * dx + dy * dy + dz * dz);
    }
    _calculateCachedStats(annotation, renderingEngine, enabledElement) {
        const data = annotation.data;
        const { viewportId, renderingEngineId } = enabledElement;
        const worldPos1 = data.handles.points[0];
        const worldPos2 = data.handles.points[1];
        const { cachedStats } = data;
        const targetIds = Object.keys(cachedStats);
        for (let i = 0; i < targetIds.length; i++) {
            const targetId = targetIds[i];
            const image = this.getTargetIdImage(targetId, renderingEngine);
            if (!image) {
                continue;
            }
            const { imageData, dimensions, hasPixelSpacing } = image;
            const length = this._calculateLength(worldPos1, worldPos2);
            const index1 = transformWorldToIndex(imageData, worldPos1);
            const index2 = transformWorldToIndex(imageData, worldPos2);
            this._isInsideVolume(index1, index2, dimensions)
                ? (this.isHandleOutsideImage = false)
                : (this.isHandleOutsideImage = true);
            cachedStats[targetId] = {
                length,
                unit: hasPixelSpacing ? 'mm' : 'px',
            };
        }
        annotation.invalidated = false;
        const eventType = _enums__WEBPACK_IMPORTED_MODULE_0__.Events.ANNOTATION_MODIFIED;
        const eventDetail = {
            annotation,
            viewportId,
            renderingEngineId,
        };
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
        return cachedStats;
    }
    _isInsideVolume(index1, index2, dimensions) {
        return (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index1, dimensions) &&
            _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index2, dimensions));
    }
}
LengthTool.toolName = 'Length';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LengthTool);
//# sourceMappingURL=LengthTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandROITool.js":
/*!*****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandROITool.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _utilities_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/math */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js");
/* harmony import */ var _utilities_planar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/planar */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/index.js");
/* harmony import */ var _utilities_throttle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/throttle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _planarFreehandROITool_drawLoop__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./planarFreehandROITool/drawLoop */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/drawLoop.js");
/* harmony import */ var _planarFreehandROITool_editLoopCommon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./planarFreehandROITool/editLoopCommon */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/editLoopCommon.js");
/* harmony import */ var _planarFreehandROITool_closedContourEditLoop__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./planarFreehandROITool/closedContourEditLoop */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/closedContourEditLoop.js");
/* harmony import */ var _planarFreehandROITool_openContourEditLoop__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./planarFreehandROITool/openContourEditLoop */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/openContourEditLoop.js");
/* harmony import */ var _planarFreehandROITool_openContourEndEditLoop__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./planarFreehandROITool/openContourEndEditLoop */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/openContourEndEditLoop.js");
/* harmony import */ var _planarFreehandROITool_renderMethods__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./planarFreehandROITool/renderMethods */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/renderMethods.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _utilities_drawing__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../utilities/drawing */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js");
/* harmony import */ var _utilities_math_polyline_getIntersectionWithPolyline__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../utilities/math/polyline/getIntersectionWithPolyline */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getIntersectionWithPolyline.js");
/* harmony import */ var _utilities_pointInShapeCallback__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../utilities/pointInShapeCallback */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInShapeCallback.js");
/* harmony import */ var _utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../utilities/viewport/isViewportPreScaled */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js");
/* harmony import */ var _utilities_getModalityUnit__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../utilities/getModalityUnit */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getModalityUnit.js");






















const { pointCanProjectOnLine } = _utilities_math__WEBPACK_IMPORTED_MODULE_5__.polyline;
const { EPSILON } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.CONSTANTS;
const PARALLEL_THRESHOLD = 1 - EPSILON;
class PlanarFreehandROITool extends _base__WEBPACK_IMPORTED_MODULE_3__.AnnotationTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            shadow: true,
            preventHandleOutsideImage: false,
            alwaysRenderOpenContourHandles: {
                enabled: false,
                radius: 2,
            },
            allowOpenContours: true,
            closeContourProximity: 10,
            checkCanvasEditFallbackProximity: 6,
            subPixelResolution: 4,
            interpolation: {
                interpolateOnAdd: false,
                interpolateOnEdit: false,
                knotsRatioPercentageOnAdd: 40,
                knotsRatioPercentageOnEdit: 40,
            },
            calculateStats: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.isDrawing = false;
        this.isEditingClosed = false;
        this.isEditingOpen = false;
        this.addNewAnnotation = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_8__.getViewportIdsWithToolToRender)(element, this.getToolName());
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                highlighted: true,
                invalidated: true,
                metadata: {
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                    toolName: this.getToolName(),
                },
                data: {
                    handles: {
                        points: [],
                        activeHandleIndex: null,
                        textBox: {
                            hasMoved: false,
                            worldPosition: [0, 0, 0],
                            worldBoundingBox: {
                                topLeft: [0, 0, 0],
                                topRight: [0, 0, 0],
                                bottomLeft: [0, 0, 0],
                                bottomRight: [0, 0, 0],
                            },
                        },
                    },
                    polyline: [[...worldPos]],
                    label: '',
                    cachedStats: {},
                },
            };
            (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__.addAnnotation)(annotation, element);
            this.activateDraw(evt, annotation, viewportIdsToRender);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this.handleSelectedCallback = (evt, annotation, handle) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_8__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, handle);
        };
        this.toolSelectedCallback = (evt, annotation) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_8__.getViewportIdsWithToolToRender)(element, this.getToolName());
            if (annotation.data.isOpenContour) {
                this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);
            }
            else {
                this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);
            }
        };
        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const points = annotation.data.polyline;
            let previousPoint = viewport.worldToCanvas(points[0]);
            for (let i = 1; i < points.length; i++) {
                const p1 = previousPoint;
                const p2 = viewport.worldToCanvas(points[i]);
                const distance = pointCanProjectOnLine(canvasCoords, p1, p2, proximity);
                if (distance === true) {
                    return true;
                }
                previousPoint = p2;
            }
            if (annotation.data.isOpenContour) {
                return false;
            }
            const pStart = viewport.worldToCanvas(points[0]);
            const pEnd = viewport.worldToCanvas(points[points.length - 1]);
            const distance = pointCanProjectOnLine(canvasCoords, pStart, pEnd, proximity);
            if (distance === true) {
                return true;
            }
            return false;
        };
        this.cancel = (element) => {
            const isDrawing = this.isDrawing;
            const isEditingOpen = this.isEditingOpen;
            const isEditingClosed = this.isEditingClosed;
            if (isDrawing) {
                this.cancelDrawing(element);
            }
            else if (isEditingOpen) {
                this.cancelOpenContourEdit(element);
            }
            else if (isEditingClosed) {
                this.cancelClosedContourEdit(element);
            }
        };
        this.triggerAnnotationModified = (annotation, enabledElement) => {
            const { viewportId, renderingEngineId } = enabledElement;
            const eventType = _enums__WEBPACK_IMPORTED_MODULE_2__.Events.ANNOTATION_MODIFIED;
            const eventDetail = {
                annotation,
                viewportId,
                renderingEngineId,
            };
            (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, eventType, eventDetail);
        };
        this.triggerAnnotationCompleted = (annotation) => {
            const eventType = _enums__WEBPACK_IMPORTED_MODULE_2__.Events.ANNOTATION_COMPLETED;
            const eventDetail = {
                annotation,
            };
            (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, eventType, eventDetail);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport, renderingEngine } = enabledElement;
            const { element } = viewport;
            const targetId = this.getTargetId(viewport);
            let annotations = ((0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_4__.getAnnotations)(this.getToolName(), element));
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const isDrawing = this.isDrawing;
            const isEditingOpen = this.isEditingOpen;
            const isEditingClosed = this.isEditingClosed;
            if (!(isDrawing || isEditingOpen || isEditingClosed)) {
                annotations.forEach((annotation) => {
                    this.renderContour(enabledElement, svgDrawingHelper, annotation);
                });
            }
            else {
                const activeAnnotationUID = this.commonData.annotation.annotationUID;
                annotations.forEach((annotation) => {
                    if (annotation.annotationUID === activeAnnotationUID) {
                        if (isDrawing) {
                            this.renderContourBeingDrawn(enabledElement, svgDrawingHelper, annotation);
                        }
                        else if (isEditingClosed) {
                            this.renderClosedContourBeingEdited(enabledElement, svgDrawingHelper, annotation);
                        }
                        else if (isEditingOpen) {
                            this.renderOpenContourBeingEdited(enabledElement, svgDrawingHelper, annotation);
                        }
                        else {
                            throw new Error(`Unknown ${this.getToolName()} annotation rendering state`);
                        }
                    }
                    else {
                        this.renderContour(enabledElement, svgDrawingHelper, annotation);
                    }
                });
                renderStatus = true;
            }
            if (!this.configuration.calculateStats)
                return;
            annotations.forEach((annotation) => {
                const activeAnnotationUID = this.commonData?.annotation.annotationUID;
                if (annotation.annotationUID === activeAnnotationUID &&
                    !this.commonData?.movingTextBox)
                    return;
                if (!this.commonData?.movingTextBox) {
                    const { data } = annotation;
                    if (!data.cachedStats[targetId] ||
                        data.cachedStats[targetId].areaUnit === undefined) {
                        data.cachedStats[targetId] = {
                            Modality: null,
                            area: null,
                            max: null,
                            mean: null,
                            stdDev: null,
                            areaUnit: null,
                        };
                        this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);
                    }
                    else if (annotation.invalidated) {
                        this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);
                    }
                }
                this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);
            });
            return renderStatus;
        };
        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {
            const data = annotation.data;
            const { cachedStats, polyline: points } = data;
            const targetIds = Object.keys(cachedStats);
            for (let i = 0; i < targetIds.length; i++) {
                const targetId = targetIds[i];
                const image = this.getTargetIdImage(targetId, renderingEngine);
                if (!image) {
                    continue;
                }
                const { imageData, metadata, hasPixelSpacing } = image;
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                const area = _utilities_math__WEBPACK_IMPORTED_MODULE_5__.polyline.calculateAreaOfPoints(canvasCoordinates);
                const worldPosIndex = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.transformWorldToIndex(imageData, points[0]);
                worldPosIndex[0] = Math.floor(worldPosIndex[0]);
                worldPosIndex[1] = Math.floor(worldPosIndex[1]);
                worldPosIndex[2] = Math.floor(worldPosIndex[2]);
                let iMin = worldPosIndex[0];
                let iMax = worldPosIndex[0];
                let jMin = worldPosIndex[1];
                let jMax = worldPosIndex[1];
                let kMin = worldPosIndex[2];
                let kMax = worldPosIndex[2];
                for (let j = 1; j < points.length; j++) {
                    const worldPosIndex = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.transformWorldToIndex(imageData, points[j]);
                    worldPosIndex[0] = Math.floor(worldPosIndex[0]);
                    worldPosIndex[1] = Math.floor(worldPosIndex[1]);
                    worldPosIndex[2] = Math.floor(worldPosIndex[2]);
                    iMin = Math.min(iMin, worldPosIndex[0]);
                    iMax = Math.max(iMax, worldPosIndex[0]);
                    jMin = Math.min(jMin, worldPosIndex[1]);
                    jMax = Math.max(jMax, worldPosIndex[1]);
                    kMin = Math.min(kMin, worldPosIndex[2]);
                    kMax = Math.max(kMax, worldPosIndex[2]);
                }
                const iDelta = 0.01 * (iMax - iMin);
                const jDelta = 0.01 * (jMax - jMin);
                const kDelta = 0.01 * (kMax - kMin);
                iMin = Math.floor(iMin - iDelta);
                iMax = Math.ceil(iMax + iDelta);
                jMin = Math.floor(jMin - jDelta);
                jMax = Math.ceil(jMax + jDelta);
                kMin = Math.floor(kMin - kDelta);
                kMax = Math.ceil(kMax + kDelta);
                const boundsIJK = [
                    [iMin, iMax],
                    [jMin, jMax],
                    [kMin, kMax],
                ];
                const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);
                const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);
                let count = 0;
                let sum = 0;
                let sumSquares = 0;
                let max = -Infinity;
                const statCalculator = ({ value: newValue }) => {
                    if (newValue > max) {
                        max = newValue;
                    }
                    sum += newValue;
                    sumSquares += newValue ** 2;
                    count += 1;
                };
                let curRow = 0;
                let intersections = [];
                let intersectionCounter = 0;
                (0,_utilities_pointInShapeCallback__WEBPACK_IMPORTED_MODULE_19__["default"])(imageData, (pointLPS, pointIJK) => {
                    let result = true;
                    const point = viewport.worldToCanvas(pointLPS);
                    if (point[1] != curRow) {
                        intersectionCounter = 0;
                        curRow = point[1];
                        intersections = (0,_utilities_math_polyline_getIntersectionWithPolyline__WEBPACK_IMPORTED_MODULE_18__.getIntersectionCoordinatesWithPolyline)(canvasCoordinates, point, [canvasPosEnd[0], point[1]]);
                        intersections.sort((function (index) {
                            return function (a, b) {
                                return a[index] === b[index]
                                    ? 0
                                    : a[index] < b[index]
                                        ? -1
                                        : 1;
                            };
                        })(0));
                    }
                    if (intersections.length && point[0] > intersections[0][0]) {
                        intersections.shift();
                        intersectionCounter++;
                    }
                    if (intersectionCounter % 2 === 0) {
                        result = false;
                    }
                    return result;
                }, statCalculator, boundsIJK);
                const mean = sum / count;
                let stdDev = sumSquares / count - mean ** 2;
                stdDev = Math.sqrt(stdDev);
                cachedStats[targetId] = {
                    Modality: metadata.Modality,
                    area,
                    mean,
                    max,
                    stdDev,
                    areaUnit: hasPixelSpacing ? 'mm' : 'px',
                };
            }
            annotation.invalidated = false;
            return cachedStats;
        };
        this._renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {
            const data = annotation.data;
            const targetId = this.getTargetId(viewport);
            const isPreScaled = (0,_utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_20__.isViewportPreScaled)(viewport, targetId);
            const isSuvScaled = this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId);
            const textLines = this._getTextLines(data, targetId, isPreScaled, isSuvScaled);
            if (!textLines || textLines.length === 0)
                return;
            const canvasCoordinates = data.polyline.map((p) => viewport.worldToCanvas(p));
            if (!data.handles.textBox.hasMoved) {
                const canvasTextBoxCoords = (0,_utilities_drawing__WEBPACK_IMPORTED_MODULE_17__.getTextBoxCoordsCanvas)(canvasCoordinates);
                data.handles.textBox.worldPosition =
                    viewport.canvasToWorld(canvasTextBoxCoords);
            }
            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            const textBoxUID = '1';
            const boundingBox = (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_16__.drawLinkedTextBox)(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, this.getLinkedTextBoxStyle(styleSpecifier, annotation));
            const { x: left, y: top, width, height } = boundingBox;
            data.handles.textBox.worldBoundingBox = {
                topLeft: viewport.canvasToWorld([left, top]),
                topRight: viewport.canvasToWorld([left + width, top]),
                bottomLeft: viewport.canvasToWorld([left, top + height]),
                bottomRight: viewport.canvasToWorld([left + width, top + height]),
            };
        };
        this._getTextLines = (data, targetId, isPreScaled, isSuvScaled) => {
            const cachedVolumeStats = data.cachedStats[targetId];
            const { area, mean, stdDev, max, isEmptyArea, Modality, areaUnit } = cachedVolumeStats;
            const textLines = [];
            const unit = (0,_utilities_getModalityUnit__WEBPACK_IMPORTED_MODULE_21__.getModalityUnit)(Modality, isPreScaled, isSuvScaled);
            if (area) {
                const areaLine = isEmptyArea
                    ? `Area: Oblique not supported`
                    : `Area: ${area.toFixed(2)} ${areaUnit}\xb2`;
                textLines.push(areaLine);
            }
            if (mean) {
                textLines.push(`Mean: ${mean.toFixed(2)} ${unit}`);
            }
            if (max) {
                textLines.push(`Max: ${max.toFixed(2)} ${unit}`);
            }
            if (stdDev) {
                textLines.push(`Std Dev: ${stdDev.toFixed(2)} ${unit}`);
            }
            return textLines;
        };
        (0,_planarFreehandROITool_drawLoop__WEBPACK_IMPORTED_MODULE_10__["default"])(this);
        (0,_planarFreehandROITool_editLoopCommon__WEBPACK_IMPORTED_MODULE_11__["default"])(this);
        (0,_planarFreehandROITool_closedContourEditLoop__WEBPACK_IMPORTED_MODULE_12__["default"])(this);
        (0,_planarFreehandROITool_openContourEditLoop__WEBPACK_IMPORTED_MODULE_13__["default"])(this);
        (0,_planarFreehandROITool_openContourEndEditLoop__WEBPACK_IMPORTED_MODULE_14__["default"])(this);
        (0,_planarFreehandROITool_renderMethods__WEBPACK_IMPORTED_MODULE_15__["default"])(this);
        this._throttledCalculateCachedStats = (0,_utilities_throttle__WEBPACK_IMPORTED_MODULE_7__["default"])(this._calculateCachedStats, 100, { trailing: true });
    }
    filterInteractableAnnotationsForElement(element, annotations) {
        if (!annotations || !annotations.length) {
            return;
        }
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
        const { viewport } = enabledElement;
        let annotationsToDisplay;
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
            annotationsToDisplay = (0,_utilities_planar__WEBPACK_IMPORTED_MODULE_6__.filterAnnotationsForDisplay)(viewport, annotations);
        }
        else if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.VolumeViewport) {
            const camera = viewport.getCamera();
            const { spacingInNormalDirection } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getTargetVolumeAndSpacingInNormalDir(viewport, camera);
            annotationsToDisplay = this.filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection);
        }
        else {
            throw new Error(`Viewport Type ${viewport.type} not supported`);
        }
        return annotationsToDisplay;
    }
    filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection) {
        const { viewPlaneNormal } = camera;
        const annotationsWithParallelNormals = annotations.filter((td) => {
            const annotationViewPlaneNormal = td.metadata.viewPlaneNormal;
            const isParallel = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >
                PARALLEL_THRESHOLD;
            return annotationViewPlaneNormal && isParallel;
        });
        if (!annotationsWithParallelNormals.length) {
            return [];
        }
        const halfSpacingInNormalDirection = spacingInNormalDirection / 2;
        const { focalPoint } = camera;
        const annotationsWithinSlice = [];
        for (const annotation of annotationsWithParallelNormals) {
            const data = annotation.data;
            const point = data.polyline[0];
            if (!annotation.isVisible) {
                continue;
            }
            const dir = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create();
            gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.sub(dir, focalPoint, point);
            const dot = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(dir, viewPlaneNormal);
            if (Math.abs(dot) < halfSpacingInNormalDirection) {
                annotationsWithinSlice.push(annotation);
            }
        }
        return annotationsWithinSlice;
    }
}
PlanarFreehandROITool.toolName = 'PlanarFreehandROI';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlanarFreehandROITool);
//# sourceMappingURL=PlanarFreehandROITool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js":
/*!*****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _utilities_getModalityUnit__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/getModalityUnit */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getModalityUnit.js");
/* harmony import */ var _utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/viewport/isViewportPreScaled */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js");












const { transformWorldToIndex } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities;
class ProbeTool extends _base__WEBPACK_IMPORTED_MODULE_2__.AnnotationTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            shadow: true,
            preventHandleOutsideImage: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.addNewAnnotation = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                invalidated: true,
                highlighted: true,
                metadata: {
                    toolName: this.getToolName(),
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                },
                data: {
                    label: '',
                    handles: { points: [[...worldPos]] },
                    cachedStats: {},
                },
            };
            (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.addAnnotation)(annotation, element);
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_7__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                newAnnotation: true,
                viewportIdsToRender,
            };
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_8__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            const { viewportId } = enabledElement;
            this.eventDispatchDetail = {
                viewportId,
                renderingEngineId: renderingEngine.id,
            };
            this._deactivateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_8__.resetElementCursor)(element);
            this.editData = null;
            this.isDrawing = false;
            if (this.isHandleOutsideImage &&
                this.configuration.preventHandleOutsideImage) {
                (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.removeAnnotation)(annotation.annotationUID);
            }
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__["default"])(renderingEngine, viewportIdsToRender);
            if (newAnnotation) {
                const eventType = _enums__WEBPACK_IMPORTED_MODULE_6__.Events.ANNOTATION_COMPLETED;
                const eventDetail = {
                    annotation,
                };
                (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            }
        };
        this._dragCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const { annotation, viewportIdsToRender } = this.editData;
            const { data } = annotation;
            data.handles.points[0] = [...worldPos];
            annotation.invalidated = true;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__["default"])(renderingEngine, viewportIdsToRender);
        };
        this.cancel = (element) => {
            if (this.isDrawing) {
                this.isDrawing = false;
                this._deactivateModify(element);
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_8__.resetElementCursor)(element);
                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
                const { data } = annotation;
                annotation.highlighted = false;
                data.handles.activeHandleIndex = null;
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
                const { renderingEngine } = enabledElement;
                (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__["default"])(renderingEngine, viewportIdsToRender);
                if (newAnnotation) {
                    const eventType = _enums__WEBPACK_IMPORTED_MODULE_6__.Events.ANNOTATION_COMPLETED;
                    const eventDetail = {
                        annotation,
                    };
                    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
                }
                this.editData = null;
                return annotation.annotationUID;
            }
        };
        this._activateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_5__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.TOUCH_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_5__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.TOUCH_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.TOUCH_TAP, this._endCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport } = enabledElement;
            const { element } = viewport;
            let annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getAnnotations)(this.getToolName(), element);
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const targetId = this.getTargetId(viewport);
            const renderingEngine = viewport.getRenderingEngine();
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const annotationUID = annotation.annotationUID;
                const data = annotation.data;
                const point = data.handles.points[0];
                const canvasCoordinates = viewport.worldToCanvas(point);
                styleSpecifier.annotationUID = annotationUID;
                const color = this.getStyle('color', styleSpecifier, annotation);
                if (!data.cachedStats[targetId]) {
                    data.cachedStats[targetId] = {
                        Modality: null,
                        index: null,
                        value: null,
                    };
                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);
                }
                else if (annotation.invalidated) {
                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);
                    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.VolumeViewport) {
                        const { referencedImageId } = annotation.metadata;
                        for (const targetId in data.cachedStats) {
                            if (targetId.startsWith('imageId')) {
                                const viewports = renderingEngine.getStackViewports();
                                const invalidatedStack = viewports.find((vp) => {
                                    const referencedImageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.imageIdToURI(referencedImageId);
                                    const hasImageURI = vp.hasImageURI(referencedImageURI);
                                    const currentImageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.imageIdToURI(vp.getCurrentImageId());
                                    return hasImageURI && currentImageURI !== referencedImageURI;
                                });
                                if (invalidatedStack) {
                                    delete data.cachedStats[targetId];
                                }
                            }
                        }
                    }
                }
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                const handleGroupUID = '0';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_4__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });
                renderStatus = true;
                const isPreScaled = (0,_utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_11__.isViewportPreScaled)(viewport, targetId);
                const isSuvScaled = this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId);
                const textLines = this._getTextLines(data, targetId, isPreScaled, isSuvScaled);
                if (textLines) {
                    const textCanvasCoordinates = [
                        canvasCoordinates[0] + 6,
                        canvasCoordinates[1] - 6,
                    ];
                    const textUID = '0';
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_4__.drawTextBox)(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));
                }
            }
            return renderStatus;
        };
    }
    isPointNearTool() {
        return false;
    }
    toolSelectedCallback() { }
    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const { viewport } = enabledElement;
        const { data } = annotation;
        const point = data.handles.points[0];
        const annotationCanvasCoordinate = viewport.worldToCanvas(point);
        const near = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;
        if (near === true) {
            return point;
        }
    }
    handleSelectedCallback(evt, annotation) {
        const eventDetail = evt.detail;
        const { element } = eventDetail;
        annotation.highlighted = true;
        const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_7__.getViewportIdsWithToolToRender)(element, this.getToolName());
        this.editData = {
            annotation,
            viewportIdsToRender,
        };
        this._activateModify(element);
        (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_8__.hideElementCursor)(element);
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
        const { renderingEngine } = enabledElement;
        (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__["default"])(renderingEngine, viewportIdsToRender);
        evt.preventDefault();
    }
    _getTextLines(data, targetId, isPreScaled, isSuvScaled) {
        const cachedVolumeStats = data.cachedStats[targetId];
        const { index, Modality, value, SUVBw, SUVLbm, SUVBsa } = cachedVolumeStats;
        if (value === undefined && SUVBw === undefined) {
            return;
        }
        const textLines = [];
        const unit = (0,_utilities_getModalityUnit__WEBPACK_IMPORTED_MODULE_10__.getModalityUnit)(Modality, isPreScaled, isSuvScaled);
        textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);
        if (Modality === 'PT' && isPreScaled === true && SUVBw !== undefined) {
            textLines.push(`${SUVBw.toFixed(2)} SUV bw`);
            if (SUVLbm) {
                textLines.push(`${SUVLbm.toFixed(2)} SUV lbm`);
            }
            if (SUVBsa) {
                textLines.push(`${SUVBsa.toFixed(2)} SUV bsa`);
            }
        }
        else {
            textLines.push(`${value.toFixed(2)} ${unit}`);
        }
        return textLines;
    }
    _getValueForModality(value, imageVolume, modality) {
        const values = {};
        values['value'] = value;
        if (modality === 'PT' &&
            imageVolume.scaling?.PET &&
            (imageVolume.scaling.PET.suvbwToSuvbsa ||
                imageVolume.scaling.PET.suvbwToSuvlbm)) {
            const { suvbwToSuvlbm, suvbwToSuvbsa } = imageVolume.scaling.PET;
            values['SUVBw'] = value;
            if (suvbwToSuvlbm) {
                const SUVLbm = value * suvbwToSuvlbm;
                values['SUVLbm'] = SUVLbm;
            }
            if (suvbwToSuvbsa) {
                const SUVBsa = value * suvbwToSuvbsa;
                values['SUVBsa'] = SUVBsa;
            }
        }
        return values;
    }
    _calculateCachedStats(annotation, renderingEngine, enabledElement) {
        const data = annotation.data;
        const { viewportId, renderingEngineId } = enabledElement;
        const worldPos = data.handles.points[0];
        const { cachedStats } = data;
        const targetIds = Object.keys(cachedStats);
        for (let i = 0; i < targetIds.length; i++) {
            const targetId = targetIds[i];
            const image = this.getTargetIdImage(targetId, renderingEngine);
            if (!image) {
                continue;
            }
            const { dimensions, imageData, metadata } = image;
            const scalarData = 'getScalarData' in image ? image.getScalarData() : image.scalarData;
            const modality = metadata.Modality;
            const index = transformWorldToIndex(imageData, worldPos);
            index[0] = Math.round(index[0]);
            index[1] = Math.round(index[1]);
            index[2] = Math.round(index[2]);
            if (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index, dimensions)) {
                this.isHandleOutsideImage = false;
                const yMultiple = dimensions[0];
                const zMultiple = dimensions[0] * dimensions[1];
                const value = scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];
                if (targetId.startsWith('imageId:')) {
                    const imageId = targetId.split('imageId:')[1];
                    const imageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.imageIdToURI(imageId);
                    const viewports = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.getViewportsWithImageURI(imageURI, renderingEngineId);
                    const viewport = viewports[0];
                    index[2] = viewport.getCurrentImageIdIndex();
                }
                const values = this._getValueForModality(value, image, modality);
                cachedStats[targetId] = {
                    index,
                    ...values,
                    Modality: modality,
                };
            }
            else {
                this.isHandleOutsideImage = true;
                cachedStats[targetId] = {
                    index,
                    Modality: modality,
                };
            }
            annotation.invalidated = false;
            const eventType = _enums__WEBPACK_IMPORTED_MODULE_6__.Events.ANNOTATION_MODIFIED;
            const eventDetail = {
                annotation,
                viewportId,
                renderingEngineId,
            };
            (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
        }
        return cachedStats;
    }
}
ProbeTool.toolName = 'Probe';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProbeTool);
//# sourceMappingURL=ProbeTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js":
/*!************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities_throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilities/throttle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js");
/* harmony import */ var _stateManagement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/index.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_math_rectangle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/math/rectangle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/rectangle/index.js");
/* harmony import */ var _utilities_drawing__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utilities/drawing */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js");
/* harmony import */ var _utilities_planar_getWorldWidthAndHeightFromCorners__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utilities/planar/getWorldWidthAndHeightFromCorners */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getWorldWidthAndHeightFromCorners.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _utilities_getModalityUnit__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../utilities/getModalityUnit */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getModalityUnit.js");
/* harmony import */ var _utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../utilities/viewport/isViewportPreScaled */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js");

















const { transformWorldToIndex } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities;
class RectangleROITool extends _base__WEBPACK_IMPORTED_MODULE_0__.AnnotationTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            shadow: true,
            preventHandleOutsideImage: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.addNewAnnotation = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                invalidated: true,
                highlighted: true,
                metadata: {
                    toolName: this.getToolName(),
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                },
                data: {
                    label: '',
                    handles: {
                        points: [
                            [...worldPos],
                            [...worldPos],
                            [...worldPos],
                            [...worldPos],
                        ],
                        textBox: {
                            hasMoved: false,
                            worldPosition: [0, 0, 0],
                            worldBoundingBox: {
                                topLeft: [0, 0, 0],
                                topRight: [0, 0, 0],
                                bottomLeft: [0, 0, 0],
                                bottomRight: [0, 0, 0],
                            },
                        },
                        activeHandleIndex: null,
                    },
                    cachedStats: {},
                },
            };
            (0,_stateManagement__WEBPACK_IMPORTED_MODULE_3__.addAnnotation)(annotation, element);
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                handleIndex: 3,
                movingTextBox: false,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const { data } = annotation;
            const { points } = data.handles;
            const canvasPoint1 = viewport.worldToCanvas(points[0]);
            const canvasPoint2 = viewport.worldToCanvas(points[3]);
            const rect = this._getRectangleImageCoordinates([
                canvasPoint1,
                canvasPoint2,
            ]);
            const point = [canvasCoords[0], canvasCoords[1]];
            const { left, top, width, height } = rect;
            const distanceToPoint = _utilities_math_rectangle__WEBPACK_IMPORTED_MODULE_10__.distanceToPoint([left, top, width, height], point);
            if (distanceToPoint <= proximity) {
                return true;
            }
            return false;
        };
        this.toolSelectedCallback = (evt, annotation) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            annotation.highlighted = true;
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                movingTextBox: false,
            };
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            evt.preventDefault();
        };
        this.handleSelectedCallback = (evt, annotation, handle) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { data } = annotation;
            annotation.highlighted = true;
            let movingTextBox = false;
            let handleIndex;
            if (handle.worldPosition) {
                movingTextBox = true;
            }
            else {
                handleIndex = data.handles.points.findIndex((p) => p === handle);
            }
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_9__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                handleIndex,
                movingTextBox,
            };
            this._activateModify(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.hideElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            evt.preventDefault();
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;
            const { data } = annotation;
            if (newAnnotation && !hasMoved) {
                return;
            }
            data.handles.activeHandleIndex = null;
            this._deactivateModify(element);
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            this.editData = null;
            this.isDrawing = false;
            if (this.isHandleOutsideImage &&
                this.configuration.preventHandleOutsideImage) {
                (0,_stateManagement__WEBPACK_IMPORTED_MODULE_3__.removeAnnotation)(annotation.annotationUID);
            }
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
            if (newAnnotation) {
                const eventType = _enums__WEBPACK_IMPORTED_MODULE_8__.Events.ANNOTATION_COMPLETED;
                const eventDetail = {
                    annotation,
                };
                (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            }
        };
        this._dragCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;
            const { data } = annotation;
            if (movingTextBox) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const { textBox } = data.handles;
                const { worldPosition } = textBox;
                worldPosition[0] += worldPosDelta[0];
                worldPosition[1] += worldPosDelta[1];
                worldPosition[2] += worldPosDelta[2];
                textBox.hasMoved = true;
            }
            else if (handleIndex === undefined) {
                const { deltaPoints } = eventDetail;
                const worldPosDelta = deltaPoints.world;
                const { points } = data.handles;
                points.forEach((point) => {
                    point[0] += worldPosDelta[0];
                    point[1] += worldPosDelta[1];
                    point[2] += worldPosDelta[2];
                });
                annotation.invalidated = true;
            }
            else {
                const { currentPoints } = eventDetail;
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;
                const worldPos = currentPoints.world;
                const { points } = data.handles;
                points[handleIndex] = [...worldPos];
                let bottomLeftCanvas;
                let bottomRightCanvas;
                let topLeftCanvas;
                let topRightCanvas;
                let bottomLeftWorld;
                let bottomRightWorld;
                let topLeftWorld;
                let topRightWorld;
                switch (handleIndex) {
                    case 0:
                    case 3:
                        bottomLeftCanvas = worldToCanvas(points[0]);
                        topRightCanvas = worldToCanvas(points[3]);
                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];
                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];
                        bottomRightWorld = canvasToWorld(bottomRightCanvas);
                        topLeftWorld = canvasToWorld(topLeftCanvas);
                        points[1] = bottomRightWorld;
                        points[2] = topLeftWorld;
                        break;
                    case 1:
                    case 2:
                        bottomRightCanvas = worldToCanvas(points[1]);
                        topLeftCanvas = worldToCanvas(points[2]);
                        bottomLeftCanvas = [
                            topLeftCanvas[0],
                            bottomRightCanvas[1],
                        ];
                        topRightCanvas = [
                            bottomRightCanvas[0],
                            topLeftCanvas[1],
                        ];
                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);
                        topRightWorld = canvasToWorld(topRightCanvas);
                        points[0] = bottomLeftWorld;
                        points[3] = topRightWorld;
                        break;
                }
                annotation.invalidated = true;
            }
            this.editData.hasMoved = true;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
        };
        this.cancel = (element) => {
            if (this.isDrawing) {
                this.isDrawing = false;
                this._deactivateDraw(element);
                this._deactivateModify(element);
                (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_13__.resetElementCursor)(element);
                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;
                const { data } = annotation;
                annotation.highlighted = false;
                data.handles.activeHandleIndex = null;
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
                const { renderingEngine } = enabledElement;
                (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_14__["default"])(renderingEngine, viewportIdsToRender);
                if (newAnnotation) {
                    const eventType = _enums__WEBPACK_IMPORTED_MODULE_8__.Events.ANNOTATION_COMPLETED;
                    const eventDetail = {
                        annotation,
                    };
                    (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
                }
                this.editData = null;
                return annotation.annotationUID;
            }
        };
        this._activateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_MOVE, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateDraw = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_MOVE, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this._activateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = true;
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateModify = (element) => {
            _store__WEBPACK_IMPORTED_MODULE_7__.state.isInteractingWithTool = false;
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_8__.Events.TOUCH_TAP, this._endCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport } = enabledElement;
            const { element } = viewport;
            let annotations = (0,_stateManagement__WEBPACK_IMPORTED_MODULE_3__.getAnnotations)(this.getToolName(), element);
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const targetId = this.getTargetId(viewport);
            const renderingEngine = viewport.getRenderingEngine();
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const { annotationUID, data } = annotation;
                const { points, activeHandleIndex } = data.handles;
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                styleSpecifier.annotationUID = annotationUID;
                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
                const color = this.getStyle('color', styleSpecifier, annotation);
                const { viewPlaneNormal, viewUp } = viewport.getCamera();
                if (!data.cachedStats[targetId] ||
                    data.cachedStats[targetId].areaUnit === undefined) {
                    data.cachedStats[targetId] = {
                        Modality: null,
                        area: null,
                        max: null,
                        mean: null,
                        stdDev: null,
                        areaUnit: null,
                    };
                    this._calculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);
                }
                else if (annotation.invalidated) {
                    this._throttledCalculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);
                    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.VolumeViewport) {
                        const { referencedImageId } = annotation.metadata;
                        for (const targetId in data.cachedStats) {
                            if (targetId.startsWith('imageId')) {
                                const viewports = renderingEngine.getStackViewports();
                                const invalidatedStack = viewports.find((vp) => {
                                    const referencedImageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.imageIdToURI(referencedImageId);
                                    const hasImageURI = vp.hasImageURI(referencedImageURI);
                                    const currentImageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.imageIdToURI(vp.getCurrentImageId());
                                    return hasImageURI && currentImageURI !== referencedImageURI;
                                });
                                if (invalidatedStack) {
                                    delete data.cachedStats[targetId];
                                }
                            }
                        }
                    }
                }
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                let activeHandleCanvasCoords;
                if (!(0,_stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_5__.isAnnotationVisible)(annotationUID)) {
                    continue;
                }
                if (!(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_4__.isAnnotationLocked)(annotation) &&
                    !this.editData &&
                    activeHandleIndex !== null) {
                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
                }
                if (activeHandleCanvasCoords) {
                    const handleGroupUID = '0';
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
                        color,
                    });
                }
                const dataId = `${annotationUID}-rect`;
                const rectangleUID = '0';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawRect)(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {
                    color,
                    lineDash,
                    lineWidth,
                }, dataId);
                renderStatus = true;
                const isPreScaled = (0,_utilities_viewport_isViewportPreScaled__WEBPACK_IMPORTED_MODULE_16__.isViewportPreScaled)(viewport, targetId);
                const isSuvScaled = this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId);
                const textLines = this._getTextLines(data, targetId, isPreScaled, isSuvScaled);
                if (!textLines || textLines.length === 0) {
                    continue;
                }
                if (!data.handles.textBox.hasMoved) {
                    const canvasTextBoxCoords = (0,_utilities_drawing__WEBPACK_IMPORTED_MODULE_11__.getTextBoxCoordsCanvas)(canvasCoordinates);
                    data.handles.textBox.worldPosition =
                        viewport.canvasToWorld(canvasTextBoxCoords);
                }
                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);
                const textBoxUID = '1';
                const boundingBox = (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawLinkedTextBox)(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, this.getLinkedTextBoxStyle(styleSpecifier, annotation));
                const { x: left, y: top, width, height } = boundingBox;
                data.handles.textBox.worldBoundingBox = {
                    topLeft: viewport.canvasToWorld([left, top]),
                    topRight: viewport.canvasToWorld([left + width, top]),
                    bottomLeft: viewport.canvasToWorld([left, top + height]),
                    bottomRight: viewport.canvasToWorld([left + width, top + height]),
                };
            }
            return renderStatus;
        };
        this._getRectangleImageCoordinates = (points) => {
            const [point0, point1] = points;
            return {
                left: Math.min(point0[0], point1[0]),
                top: Math.min(point0[1], point1[1]),
                width: Math.abs(point0[0] - point1[0]),
                height: Math.abs(point0[1] - point1[1]),
            };
        };
        this._getTextLines = (data, targetId, isPreScaled, isSuvScaled) => {
            const cachedVolumeStats = data.cachedStats[targetId];
            const { area, mean, max, stdDev, Modality, areaUnit } = cachedVolumeStats;
            if (mean === undefined) {
                return;
            }
            const textLines = [];
            const unit = (0,_utilities_getModalityUnit__WEBPACK_IMPORTED_MODULE_15__.getModalityUnit)(Modality, isPreScaled, isSuvScaled);
            textLines.push(`Area: ${area.toFixed(2)} ${areaUnit}\xb2`);
            textLines.push(`Mean: ${mean.toFixed(2)} ${unit}`);
            textLines.push(`Max: ${max.toFixed(2)} ${unit}`);
            textLines.push(`Std Dev: ${stdDev.toFixed(2)} ${unit}`);
            return textLines;
        };
        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {
            const { data } = annotation;
            const { viewportId, renderingEngineId } = enabledElement;
            const worldPos1 = data.handles.points[0];
            const worldPos2 = data.handles.points[3];
            const { cachedStats } = data;
            const targetIds = Object.keys(cachedStats);
            for (let i = 0; i < targetIds.length; i++) {
                const targetId = targetIds[i];
                const image = this.getTargetIdImage(targetId, renderingEngine);
                if (!image) {
                    continue;
                }
                const { dimensions, imageData, metadata, hasPixelSpacing } = image;
                const scalarData = 'getScalarData' in image ? image.getScalarData() : image.scalarData;
                const worldPos1Index = transformWorldToIndex(imageData, worldPos1);
                worldPos1Index[0] = Math.floor(worldPos1Index[0]);
                worldPos1Index[1] = Math.floor(worldPos1Index[1]);
                worldPos1Index[2] = Math.floor(worldPos1Index[2]);
                const worldPos2Index = transformWorldToIndex(imageData, worldPos2);
                worldPos2Index[0] = Math.floor(worldPos2Index[0]);
                worldPos2Index[1] = Math.floor(worldPos2Index[1]);
                worldPos2Index[2] = Math.floor(worldPos2Index[2]);
                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {
                    this.isHandleOutsideImage = false;
                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);
                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);
                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);
                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);
                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);
                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);
                    const { worldWidth, worldHeight } = (0,_utilities_planar_getWorldWidthAndHeightFromCorners__WEBPACK_IMPORTED_MODULE_12__["default"])(viewPlaneNormal, viewUp, worldPos1, worldPos2);
                    const area = Math.abs(worldWidth * worldHeight);
                    let count = 0;
                    let mean = 0;
                    let stdDev = 0;
                    let max = -Infinity;
                    const yMultiple = dimensions[0];
                    const zMultiple = dimensions[0] * dimensions[1];
                    for (let k = kMin; k <= kMax; k++) {
                        for (let j = jMin; j <= jMax; j++) {
                            for (let i = iMin; i <= iMax; i++) {
                                const value = scalarData[k * zMultiple + j * yMultiple + i];
                                if (value > max) {
                                    max = value;
                                }
                                count++;
                                mean += value;
                            }
                        }
                    }
                    mean /= count;
                    for (let k = kMin; k <= kMax; k++) {
                        for (let j = jMin; j <= jMax; j++) {
                            for (let i = iMin; i <= iMax; i++) {
                                const value = scalarData[k * zMultiple + j * yMultiple + i];
                                const valueMinusMean = value - mean;
                                stdDev += valueMinusMean * valueMinusMean;
                            }
                        }
                    }
                    stdDev /= count;
                    stdDev = Math.sqrt(stdDev);
                    cachedStats[targetId] = {
                        Modality: metadata.Modality,
                        area,
                        mean,
                        stdDev,
                        max,
                        areaUnit: hasPixelSpacing ? 'mm' : 'px',
                    };
                }
                else {
                    this.isHandleOutsideImage = true;
                    cachedStats[targetId] = {
                        Modality: metadata.Modality,
                    };
                }
            }
            annotation.invalidated = false;
            const eventType = _enums__WEBPACK_IMPORTED_MODULE_8__.Events.ANNOTATION_MODIFIED;
            const eventDetail = {
                annotation,
                viewportId,
                renderingEngineId,
            };
            (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.eventTarget, eventType, eventDetail);
            return cachedStats;
        };
        this._isInsideVolume = (index1, index2, dimensions) => {
            return (_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index1, dimensions) &&
                _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.indexWithinDimensions(index2, dimensions));
        };
        this._throttledCalculateCachedStats = (0,_utilities_throttle__WEBPACK_IMPORTED_MODULE_2__["default"])(this._calculateCachedStats, 100, { trailing: true });
    }
}
RectangleROITool.toolName = 'RectangleROI';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RectangleROITool);
//# sourceMappingURL=RectangleROITool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/closedContourEditLoop.js":
/*!***************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/closedContourEditLoop.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utilities/math */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _utilities_planarFreehandROITool_interpolatePoints__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../utilities/planarFreehandROITool/interpolatePoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolatePoints.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");








const { getSubPixelSpacingAndXYDirections, addCanvasPointsToArray, calculateAreaOfPoints, } = _utilities_math__WEBPACK_IMPORTED_MODULE_4__.polyline;
function activateClosedContourEdit(evt, annotation, viewportIdsToRender) {
    this.isEditingClosed = true;
    const eventDetail = evt.detail;
    const { currentPoints, element } = eventDetail;
    const canvasPos = currentPoints.canvas;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport } = enabledElement;
    const prevCanvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);
    const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(viewport, this.configuration.subPixelResolution);
    this.editData = {
        prevCanvasPoints,
        editCanvasPoints: [canvasPos],
        startCrossingIndex: undefined,
        editIndex: 0,
    };
    this.commonData = {
        annotation,
        viewportIdsToRender,
        spacing,
        xDir,
        yDir,
        movingTextBox: false,
    };
    _store__WEBPACK_IMPORTED_MODULE_1__.state.isInteractingWithTool = true;
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_UP, this.mouseUpClosedContourEditCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_DRAG, this.mouseDragClosedContourEditCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_CLICK, this.mouseUpClosedContourEditCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_END, this.mouseUpClosedContourEditCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_DRAG, this.mouseDragClosedContourEditCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_TAP, this.mouseUpClosedContourEditCallback);
    (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_3__.hideElementCursor)(element);
}
function deactivateClosedContourEdit(element) {
    _store__WEBPACK_IMPORTED_MODULE_1__.state.isInteractingWithTool = false;
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_UP, this.mouseUpClosedContourEditCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_DRAG, this.mouseDragClosedContourEditCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_CLICK, this.mouseUpClosedContourEditCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_END, this.mouseUpClosedContourEditCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_DRAG, this.mouseDragClosedContourEditCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_TAP, this.mouseUpClosedContourEditCallback);
    (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_3__.resetElementCursor)(element);
}
function mouseDragClosedContourEditCallback(evt) {
    const eventDetail = evt.detail;
    const { currentPoints, element } = eventDetail;
    const worldPos = currentPoints.world;
    const canvasPos = currentPoints.canvas;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { renderingEngine, viewport } = enabledElement;
    const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;
    const { editIndex, editCanvasPoints, startCrossingIndex } = this.editData;
    const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];
    const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);
    const worldPosDiff = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.vec3.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_5__.vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);
    const xDist = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_5__.vec3.dot(worldPosDiff, xDir));
    const yDist = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_5__.vec3.dot(worldPosDiff, yDir));
    if (xDist <= spacing[0] && yDist <= spacing[1]) {
        return;
    }
    if (startCrossingIndex !== undefined) {
        this.checkAndRemoveCrossesOnEditLine(evt);
    }
    const numPointsAdded = addCanvasPointsToArray(element, editCanvasPoints, canvasPos, this.commonData);
    const currentEditIndex = editIndex + numPointsAdded;
    this.editData.editIndex = currentEditIndex;
    if (startCrossingIndex === undefined && editCanvasPoints.length > 1) {
        this.checkForFirstCrossing(evt, true);
    }
    this.editData.snapIndex = this.findSnapIndex();
    if (this.editData.snapIndex === -1) {
        this.finishEditAndStartNewEdit(evt);
        return;
    }
    this.editData.fusedCanvasPoints = this.fuseEditPointsWithClosedContour(evt);
    if (startCrossingIndex !== undefined &&
        this.checkForSecondCrossing(evt, true)) {
        this.removePointsAfterSecondCrossing(true);
        this.finishEditAndStartNewEdit(evt);
    }
    (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_7__["default"])(renderingEngine, viewportIdsToRender);
}
function finishEditAndStartNewEdit(evt) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport, renderingEngine } = enabledElement;
    const { annotation, viewportIdsToRender } = this.commonData;
    const { fusedCanvasPoints, editCanvasPoints } = this.editData;
    const worldPoints = fusedCanvasPoints.map((canvasPoint) => viewport.canvasToWorld(canvasPoint));
    annotation.data.polyline = worldPoints;
    annotation.data.isOpenContour = false;
    this.triggerAnnotationModified(annotation, enabledElement);
    const lastEditCanvasPoint = editCanvasPoints.pop();
    this.editData = {
        prevCanvasPoints: fusedCanvasPoints,
        editCanvasPoints: [lastEditCanvasPoint],
        startCrossingIndex: undefined,
        editIndex: 0,
        snapIndex: undefined,
    };
    (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_7__["default"])(renderingEngine, viewportIdsToRender);
}
function fuseEditPointsWithClosedContour(evt) {
    const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } = this.editData;
    if (startCrossingIndex === undefined || snapIndex === undefined) {
        return;
    }
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const augmentedEditCanvasPoints = [...editCanvasPoints];
    addCanvasPointsToArray(element, augmentedEditCanvasPoints, prevCanvasPoints[snapIndex], this.commonData);
    if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {
        augmentedEditCanvasPoints.pop();
    }
    let lowIndex;
    let highIndex;
    if (startCrossingIndex > snapIndex) {
        lowIndex = snapIndex;
        highIndex = startCrossingIndex;
    }
    else {
        lowIndex = startCrossingIndex;
        highIndex = snapIndex;
    }
    const distanceBetweenLowAndFirstPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.vec2.distance(prevCanvasPoints[lowIndex], augmentedEditCanvasPoints[0]);
    const distanceBetweenLowAndLastPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.vec2.distance(prevCanvasPoints[lowIndex], augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]);
    const distanceBetweenHighAndFirstPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.vec2.distance(prevCanvasPoints[highIndex], augmentedEditCanvasPoints[0]);
    const distanceBetweenHighAndLastPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.vec2.distance(prevCanvasPoints[highIndex], augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]);
    const pointSet1 = [];
    for (let i = 0; i < lowIndex; i++) {
        const canvasPoint = prevCanvasPoints[i];
        pointSet1.push([canvasPoint[0], canvasPoint[1]]);
    }
    let inPlaceDistance = distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;
    let reverseDistance = distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;
    if (inPlaceDistance < reverseDistance) {
        for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {
            const canvasPoint = augmentedEditCanvasPoints[i];
            pointSet1.push([canvasPoint[0], canvasPoint[1]]);
        }
    }
    else {
        for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {
            const canvasPoint = augmentedEditCanvasPoints[i];
            pointSet1.push([canvasPoint[0], canvasPoint[1]]);
        }
    }
    for (let i = highIndex; i < prevCanvasPoints.length; i++) {
        const canvasPoint = prevCanvasPoints[i];
        pointSet1.push([canvasPoint[0], canvasPoint[1]]);
    }
    const pointSet2 = [];
    for (let i = lowIndex; i < highIndex; i++) {
        const canvasPoint = prevCanvasPoints[i];
        pointSet2.push([canvasPoint[0], canvasPoint[1]]);
    }
    inPlaceDistance =
        distanceBetweenHighAndFirstPoint + distanceBetweenLowAndLastPoint;
    reverseDistance =
        distanceBetweenHighAndLastPoint + distanceBetweenLowAndFirstPoint;
    if (inPlaceDistance < reverseDistance) {
        for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {
            const canvasPoint = augmentedEditCanvasPoints[i];
            pointSet2.push([canvasPoint[0], canvasPoint[1]]);
        }
    }
    else {
        for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {
            const canvasPoint = augmentedEditCanvasPoints[i];
            pointSet2.push([canvasPoint[0], canvasPoint[1]]);
        }
    }
    const areaPointSet1 = calculateAreaOfPoints(pointSet1);
    const areaPointSet2 = calculateAreaOfPoints(pointSet2);
    const pointsToRender = areaPointSet1 > areaPointSet2 ? pointSet1 : pointSet2;
    return pointsToRender;
}
function mouseUpClosedContourEditCallback(evt) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    this.completeClosedContourEdit(element);
}
function completeClosedContourEdit(element) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport, renderingEngine } = enabledElement;
    const { annotation, viewportIdsToRender } = this.commonData;
    const { fusedCanvasPoints, prevCanvasPoints } = this.editData;
    if (fusedCanvasPoints) {
        const updatedPoints = (0,_utilities_planarFreehandROITool_interpolatePoints__WEBPACK_IMPORTED_MODULE_6__.shouldInterpolate)(this.configuration)
            ? (0,_utilities_planarFreehandROITool_interpolatePoints__WEBPACK_IMPORTED_MODULE_6__.getInterpolatedPoints)(this.configuration, fusedCanvasPoints, prevCanvasPoints)
            : fusedCanvasPoints;
        const worldPoints = updatedPoints.map((canvasPoint) => viewport.canvasToWorld(canvasPoint));
        annotation.data.polyline = worldPoints;
        annotation.data.isOpenContour = false;
        this.triggerAnnotationModified(annotation, enabledElement);
    }
    this.isEditingClosed = false;
    this.editData = undefined;
    this.commonData = undefined;
    (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_7__["default"])(renderingEngine, viewportIdsToRender);
    this.deactivateClosedContourEdit(element);
}
function cancelClosedContourEdit(element) {
    this.completeClosedContourEdit(element);
}
function registerClosedContourEditLoop(toolInstance) {
    toolInstance.activateClosedContourEdit =
        activateClosedContourEdit.bind(toolInstance);
    toolInstance.deactivateClosedContourEdit =
        deactivateClosedContourEdit.bind(toolInstance);
    toolInstance.mouseDragClosedContourEditCallback =
        mouseDragClosedContourEditCallback.bind(toolInstance);
    toolInstance.mouseUpClosedContourEditCallback =
        mouseUpClosedContourEditCallback.bind(toolInstance);
    toolInstance.finishEditAndStartNewEdit =
        finishEditAndStartNewEdit.bind(toolInstance);
    toolInstance.fuseEditPointsWithClosedContour =
        fuseEditPointsWithClosedContour.bind(toolInstance);
    toolInstance.cancelClosedContourEdit =
        cancelClosedContourEdit.bind(toolInstance);
    toolInstance.completeClosedContourEdit =
        completeClosedContourEdit.bind(toolInstance);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (registerClosedContourEditLoop);
//# sourceMappingURL=closedContourEditLoop.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/drawLoop.js":
/*!**************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/drawLoop.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _utilities_planarFreehandROITool_interpolatePoints__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../utilities/planarFreehandROITool/interpolatePoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolatePoints.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _findOpenUShapedContourVectorToPeak__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./findOpenUShapedContourVectorToPeak */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/findOpenUShapedContourVectorToPeak.js");
/* harmony import */ var _utilities_math__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../utilities/math */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");










const { addCanvasPointsToArray, pointsAreWithinCloseContourProximity, getFirstIntersectionWithPolyline, getSubPixelSpacingAndXYDirections, } = _utilities_math__WEBPACK_IMPORTED_MODULE_8__.polyline;
function activateDraw(evt, annotation, viewportIdsToRender) {
    this.isDrawing = true;
    const eventDetail = evt.detail;
    const { currentPoints, element } = eventDetail;
    const canvasPos = currentPoints.canvas;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport } = enabledElement;
    const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(viewport, this.configuration.subPixelResolution);
    this.drawData = {
        canvasPoints: [canvasPos],
        polylineIndex: 0,
    };
    this.commonData = {
        annotation,
        viewportIdsToRender,
        spacing,
        xDir,
        yDir,
        movingTextBox: false,
    };
    _store__WEBPACK_IMPORTED_MODULE_3__.state.isInteractingWithTool = true;
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_UP, this.mouseUpDrawCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_DRAG, this.mouseDragDrawCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_CLICK, this.mouseUpDrawCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_END, this.mouseUpDrawCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_DRAG, this.mouseDragDrawCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_TAP, this.mouseUpDrawCallback);
    (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_1__.hideElementCursor)(element);
}
function deactivateDraw(element) {
    _store__WEBPACK_IMPORTED_MODULE_3__.state.isInteractingWithTool = false;
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_UP, this.mouseUpDrawCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_DRAG, this.mouseDragDrawCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_CLICK, this.mouseUpDrawCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_END, this.mouseUpDrawCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_DRAG, this.mouseDragDrawCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_TAP, this.mouseUpDrawCallback);
    (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_1__.resetElementCursor)(element);
}
function mouseDragDrawCallback(evt) {
    const eventDetail = evt.detail;
    const { currentPoints, element } = eventDetail;
    const worldPos = currentPoints.world;
    const canvasPos = currentPoints.canvas;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { renderingEngine, viewport } = enabledElement;
    const { annotation, viewportIdsToRender, xDir, yDir, spacing, movingTextBox, } = this.commonData;
    const { polylineIndex, canvasPoints } = this.drawData;
    const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];
    const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);
    const worldPosDiff = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec3.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);
    const xDist = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec3.dot(worldPosDiff, xDir));
    const yDist = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec3.dot(worldPosDiff, yDir));
    if (xDist <= spacing[0] && yDist <= spacing[1]) {
        return;
    }
    if (movingTextBox) {
        this.isDrawing = false;
        const { deltaPoints } = eventDetail;
        const worldPosDelta = deltaPoints.world;
        const { textBox } = annotation.data.handles;
        const { worldPosition } = textBox;
        worldPosition[0] += worldPosDelta[0];
        worldPosition[1] += worldPosDelta[1];
        worldPosition[2] += worldPosDelta[2];
        textBox.hasMoved = true;
    }
    else {
        const crossingIndex = this.findCrossingIndexDuringCreate(evt);
        if (crossingIndex !== undefined) {
            this.applyCreateOnCross(evt, crossingIndex);
        }
        else {
            const numPointsAdded = addCanvasPointsToArray(element, canvasPoints, canvasPos, this.commonData);
            this.drawData.polylineIndex = polylineIndex + numPointsAdded;
        }
    }
    (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__["default"])(renderingEngine, viewportIdsToRender);
}
function mouseUpDrawCallback(evt) {
    const { allowOpenContours } = this.configuration;
    const { canvasPoints } = this.drawData;
    const firstPoint = canvasPoints[0];
    const lastPoint = canvasPoints[canvasPoints.length - 1];
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    if (allowOpenContours &&
        !pointsAreWithinCloseContourProximity(firstPoint, lastPoint, this.configuration.closeContourProximity)) {
        this.completeDrawOpenContour(element);
    }
    else {
        this.completeDrawClosedContour(element);
    }
}
function completeDrawClosedContour(element) {
    this.removeCrossedLinesOnCompleteDraw();
    const { canvasPoints } = this.drawData;
    if (this.haltDrawing(element, canvasPoints)) {
        return false;
    }
    const { annotation, viewportIdsToRender } = this.commonData;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport, renderingEngine } = enabledElement;
    addCanvasPointsToArray(element, canvasPoints, canvasPoints[0], this.commonData);
    canvasPoints.pop();
    const updatedPoints = (0,_utilities_planarFreehandROITool_interpolatePoints__WEBPACK_IMPORTED_MODULE_5__.shouldInterpolate)(this.configuration)
        ? (0,_utilities_planarFreehandROITool_interpolatePoints__WEBPACK_IMPORTED_MODULE_5__.getInterpolatedPoints)(this.configuration, canvasPoints)
        : canvasPoints;
    const worldPoints = updatedPoints.map((canvasPoint) => viewport.canvasToWorld(canvasPoint));
    annotation.data.polyline = worldPoints;
    annotation.data.isOpenContour = false;
    this.triggerAnnotationCompleted(annotation);
    this.isDrawing = false;
    this.drawData = undefined;
    this.commonData = undefined;
    (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__["default"])(renderingEngine, viewportIdsToRender);
    this.deactivateDraw(element);
    return true;
}
function removeCrossedLinesOnCompleteDraw() {
    const { canvasPoints } = this.drawData;
    const numPoints = canvasPoints.length;
    const endToStart = [canvasPoints[0], canvasPoints[numPoints - 1]];
    const canvasPointsMinusEnds = canvasPoints.slice(0, -1).slice(1);
    const lineSegment = getFirstIntersectionWithPolyline(canvasPointsMinusEnds, endToStart[0], endToStart[1], false);
    if (lineSegment) {
        const indexToRemoveUpTo = lineSegment[1];
        this.drawData.canvasPoints = canvasPoints.splice(0, indexToRemoveUpTo);
    }
}
function completeDrawOpenContour(element) {
    const { canvasPoints } = this.drawData;
    if (this.haltDrawing(element, canvasPoints)) {
        return false;
    }
    const { annotation, viewportIdsToRender } = this.commonData;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport, renderingEngine } = enabledElement;
    const updatedPoints = (0,_utilities_planarFreehandROITool_interpolatePoints__WEBPACK_IMPORTED_MODULE_5__.shouldInterpolate)(this.configuration)
        ? (0,_utilities_planarFreehandROITool_interpolatePoints__WEBPACK_IMPORTED_MODULE_5__.getInterpolatedPoints)(this.configuration, canvasPoints)
        : canvasPoints;
    const worldPoints = updatedPoints.map((canvasPoint) => viewport.canvasToWorld(canvasPoint));
    annotation.data.polyline = worldPoints;
    annotation.data.isOpenContour = true;
    annotation.data.handles.points = [
        worldPoints[0],
        worldPoints[worldPoints.length - 1],
    ];
    if (annotation.data.isOpenUShapeContour) {
        annotation.data.openUShapeContourVectorToPeak =
            (0,_findOpenUShapedContourVectorToPeak__WEBPACK_IMPORTED_MODULE_7__["default"])(canvasPoints, viewport);
    }
    this.triggerAnnotationCompleted(annotation);
    this.isDrawing = false;
    this.drawData = undefined;
    this.commonData = undefined;
    (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__["default"])(renderingEngine, viewportIdsToRender);
    this.deactivateDraw(element);
    return true;
}
function findCrossingIndexDuringCreate(evt) {
    const eventDetail = evt.detail;
    const { currentPoints, lastPoints } = eventDetail;
    const canvasPos = currentPoints.canvas;
    const lastCanvasPoint = lastPoints.canvas;
    const { canvasPoints } = this.drawData;
    const pointsLessLastOne = canvasPoints.slice(0, -1);
    const lineSegment = getFirstIntersectionWithPolyline(pointsLessLastOne, canvasPos, lastCanvasPoint, false);
    if (lineSegment === undefined) {
        return;
    }
    const crossingIndex = lineSegment[0];
    return crossingIndex;
}
function applyCreateOnCross(evt, crossingIndex) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const { canvasPoints } = this.drawData;
    const { annotation, viewportIdsToRender } = this.commonData;
    addCanvasPointsToArray(element, canvasPoints, canvasPoints[crossingIndex], this.commonData);
    canvasPoints.pop();
    for (let i = 0; i < crossingIndex; i++) {
        canvasPoints.shift();
    }
    if (this.completeDrawClosedContour(element)) {
        this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);
    }
}
function cancelDrawing(element) {
    const { allowOpenContours } = this.configuration;
    const { canvasPoints } = this.drawData;
    const firstPoint = canvasPoints[0];
    const lastPoint = canvasPoints[canvasPoints.length - 1];
    if (allowOpenContours &&
        !pointsAreWithinCloseContourProximity(firstPoint, lastPoint, this.configuration.closeContourProximity)) {
        this.completeDrawOpenContour(element);
    }
    else {
        this.completeDrawClosedContour(element);
    }
}
function shouldHaltDrawing(canvasPoints, subPixelResolution) {
    const minPoints = Math.max(subPixelResolution * 3, 3);
    return canvasPoints.length < minPoints;
}
function haltDrawing(element, canvasPoints) {
    const { subPixelResolution } = this.configuration;
    if (shouldHaltDrawing(canvasPoints, subPixelResolution)) {
        const { annotation, viewportIdsToRender } = this.commonData;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
        const { renderingEngine } = enabledElement;
        (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_9__.removeAnnotation)(annotation.annotationUID);
        this.isDrawing = false;
        this.drawData = undefined;
        this.commonData = undefined;
        (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__["default"])(renderingEngine, viewportIdsToRender);
        this.deactivateDraw(element);
        return true;
    }
    return false;
}
function registerDrawLoop(toolInstance) {
    toolInstance.activateDraw = activateDraw.bind(toolInstance);
    toolInstance.deactivateDraw = deactivateDraw.bind(toolInstance);
    toolInstance.applyCreateOnCross = applyCreateOnCross.bind(toolInstance);
    toolInstance.findCrossingIndexDuringCreate =
        findCrossingIndexDuringCreate.bind(toolInstance);
    toolInstance.completeDrawOpenContour =
        completeDrawOpenContour.bind(toolInstance);
    toolInstance.removeCrossedLinesOnCompleteDraw =
        removeCrossedLinesOnCompleteDraw.bind(toolInstance);
    toolInstance.mouseDragDrawCallback = mouseDragDrawCallback.bind(toolInstance);
    toolInstance.mouseUpDrawCallback = mouseUpDrawCallback.bind(toolInstance);
    toolInstance.completeDrawClosedContour =
        completeDrawClosedContour.bind(toolInstance);
    toolInstance.cancelDrawing = cancelDrawing.bind(toolInstance);
    toolInstance.haltDrawing = haltDrawing.bind(toolInstance);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (registerDrawLoop);
//# sourceMappingURL=drawLoop.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/editLoopCommon.js":
/*!********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/editLoopCommon.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _utilities_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/math */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js");


const { addCanvasPointsToArray, getFirstIntersectionWithPolyline } = _utilities_math__WEBPACK_IMPORTED_MODULE_1__.polyline;
function checkForFirstCrossing(evt, isClosedContour) {
    const eventDetail = evt.detail;
    const { element, currentPoints, lastPoints } = eventDetail;
    const canvasPos = currentPoints.canvas;
    const lastCanvasPoint = lastPoints.canvas;
    const { editCanvasPoints, prevCanvasPoints } = this.editData;
    const crossedLineSegment = getFirstIntersectionWithPolyline(prevCanvasPoints, canvasPos, lastCanvasPoint, isClosedContour);
    if (crossedLineSegment) {
        this.editData.startCrossingIndex = crossedLineSegment[0];
        this.removePointsUpUntilFirstCrossing(isClosedContour);
    }
    else if (prevCanvasPoints.length >= 2) {
        if (editCanvasPoints.length >
            this.configuration.checkCanvasEditFallbackProximity) {
            const firstEditCanvasPoint = editCanvasPoints[0];
            const distanceIndexPairs = [];
            for (let i = 0; i < prevCanvasPoints.length; i++) {
                const prevCanvasPoint = prevCanvasPoints[i];
                const distance = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.distance(prevCanvasPoint, firstEditCanvasPoint);
                distanceIndexPairs.push({ distance, index: i });
            }
            distanceIndexPairs.sort((a, b) => a.distance - b.distance);
            const twoClosestDistanceIndexPairs = [
                distanceIndexPairs[0],
                distanceIndexPairs[1],
            ];
            const lowestIndex = Math.min(twoClosestDistanceIndexPairs[0].index, twoClosestDistanceIndexPairs[1].index);
            this.editData.startCrossingIndex = lowestIndex;
        }
        else {
            const dir = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.subtract(dir, editCanvasPoints[1], editCanvasPoints[0]);
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.normalize(dir, dir);
            const proximity = 6;
            const extendedPoint = [
                editCanvasPoints[0][0] - dir[0] * proximity,
                editCanvasPoints[0][1] - dir[1] * proximity,
            ];
            const crossedLineSegmentFromExtendedPoint = getFirstIntersectionWithPolyline(prevCanvasPoints, extendedPoint, editCanvasPoints[0], isClosedContour);
            if (crossedLineSegmentFromExtendedPoint) {
                const pointsToPrepend = [extendedPoint];
                addCanvasPointsToArray(element, pointsToPrepend, editCanvasPoints[0], this.commonData);
                editCanvasPoints.unshift(...pointsToPrepend);
                this.removePointsUpUntilFirstCrossing(isClosedContour);
                this.editData.editIndex = editCanvasPoints.length - 1;
                this.editData.startCrossingIndex =
                    crossedLineSegmentFromExtendedPoint[0];
            }
        }
    }
}
function removePointsUpUntilFirstCrossing(isClosedContour) {
    const { editCanvasPoints, prevCanvasPoints } = this.editData;
    let numPointsToRemove = 0;
    for (let i = 0; i < editCanvasPoints.length - 1; i++) {
        const firstLine = [editCanvasPoints[i], editCanvasPoints[i + 1]];
        const didCrossLine = !!getFirstIntersectionWithPolyline(prevCanvasPoints, firstLine[0], firstLine[1], isClosedContour);
        numPointsToRemove++;
        if (didCrossLine) {
            break;
        }
    }
    editCanvasPoints.splice(0, numPointsToRemove);
    this.editData.editIndex = editCanvasPoints.length - 1;
}
function checkForSecondCrossing(evt, isClosedContour) {
    const eventDetail = evt.detail;
    const { currentPoints, lastPoints } = eventDetail;
    const canvasPos = currentPoints.canvas;
    const lastCanvasPoint = lastPoints.canvas;
    const { prevCanvasPoints } = this.editData;
    const crossedLineSegment = getFirstIntersectionWithPolyline(prevCanvasPoints, canvasPos, lastCanvasPoint, isClosedContour);
    if (!crossedLineSegment) {
        return false;
    }
    return true;
}
function removePointsAfterSecondCrossing(isClosedContour) {
    const { prevCanvasPoints, editCanvasPoints } = this.editData;
    for (let i = editCanvasPoints.length - 1; i > 0; i--) {
        const lastLine = [editCanvasPoints[i], editCanvasPoints[i - 1]];
        const didCrossLine = !!getFirstIntersectionWithPolyline(prevCanvasPoints, lastLine[0], lastLine[1], isClosedContour);
        editCanvasPoints.pop();
        if (didCrossLine) {
            break;
        }
    }
}
function findSnapIndex() {
    const { editCanvasPoints, prevCanvasPoints, startCrossingIndex } = this.editData;
    if (startCrossingIndex === undefined) {
        return;
    }
    const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];
    const distanceIndexPairs = [];
    for (let i = 0; i < prevCanvasPoints.length; i++) {
        const prevCanvasPoint = prevCanvasPoints[i];
        const distance = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.distance(prevCanvasPoint, lastEditCanvasPoint);
        distanceIndexPairs.push({ distance, index: i });
    }
    distanceIndexPairs.sort((a, b) => a.distance - b.distance);
    const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -1);
    for (let i = 0; i < distanceIndexPairs.length; i++) {
        const { index } = distanceIndexPairs[i];
        const snapCanvasPosition = prevCanvasPoints[index];
        const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];
        const crossedLineSegment = getFirstIntersectionWithPolyline(editCanvasPointsLessLastOne, snapCanvasPosition, lastEditCanvasPoint, false);
        if (!crossedLineSegment) {
            return index;
        }
    }
    return -1;
}
function checkAndRemoveCrossesOnEditLine(evt) {
    const eventDetail = evt.detail;
    const { currentPoints, lastPoints } = eventDetail;
    const canvasPos = currentPoints.canvas;
    const lastCanvasPoint = lastPoints.canvas;
    const { editCanvasPoints } = this.editData;
    const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -2);
    const crossedLineSegment = getFirstIntersectionWithPolyline(editCanvasPointsLessLastOne, canvasPos, lastCanvasPoint, false);
    if (!crossedLineSegment) {
        return;
    }
    const editIndexCrossed = crossedLineSegment[0];
    const numPointsToRemove = editCanvasPoints.length - editIndexCrossed;
    for (let i = 0; i < numPointsToRemove; i++) {
        editCanvasPoints.pop();
    }
}
function registerEditLoopCommon(toolInstance) {
    toolInstance.checkForFirstCrossing = checkForFirstCrossing.bind(toolInstance);
    toolInstance.removePointsUpUntilFirstCrossing =
        removePointsUpUntilFirstCrossing.bind(toolInstance);
    toolInstance.checkForSecondCrossing =
        checkForSecondCrossing.bind(toolInstance);
    toolInstance.findSnapIndex = findSnapIndex.bind(toolInstance);
    toolInstance.removePointsAfterSecondCrossing =
        removePointsAfterSecondCrossing.bind(toolInstance);
    toolInstance.checkAndRemoveCrossesOnEditLine =
        checkAndRemoveCrossesOnEditLine.bind(toolInstance);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (registerEditLoopCommon);
//# sourceMappingURL=editLoopCommon.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/findOpenUShapedContourVectorToPeak.js":
/*!****************************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/findOpenUShapedContourVectorToPeak.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ findOpenUShapedContourVectorToPeak),
/* harmony export */   findOpenUShapedContourVectorToPeakOnRender: () => (/* binding */ findOpenUShapedContourVectorToPeakOnRender)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");

function findOpenUShapedContourVectorToPeak(canvasPoints, viewport) {
    const first = canvasPoints[0];
    const last = canvasPoints[canvasPoints.length - 1];
    const firstToLastUnitVector = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.set(firstToLastUnitVector, last[0] - first[0], last[1] - first[1]);
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.normalize(firstToLastUnitVector, firstToLastUnitVector);
    const normalVector1 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
    const normalVector2 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.set(normalVector1, -firstToLastUnitVector[1], firstToLastUnitVector[0]);
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.set(normalVector2, firstToLastUnitVector[1], -firstToLastUnitVector[0]);
    const centerOfFirstToLast = [
        (first[0] + last[0]) / 2,
        (first[1] + last[1]) / 2,
    ];
    const furthest = {
        dist: 0,
        index: null,
    };
    for (let i = 0; i < canvasPoints.length; i++) {
        const canvasPoint = canvasPoints[i];
        const distance = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.dist(canvasPoint, centerOfFirstToLast);
        if (distance > furthest.dist) {
            furthest.dist = distance;
            furthest.index = i;
        }
    }
    const toFurthest = [
        canvasPoints[furthest.index],
        centerOfFirstToLast,
    ];
    const toFurthestWorld = toFurthest.map(viewport.canvasToWorld);
    return toFurthestWorld;
}
function findOpenUShapedContourVectorToPeakOnRender(enabledElement, annotation) {
    const { viewport } = enabledElement;
    const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);
    return findOpenUShapedContourVectorToPeak(canvasPoints, viewport);
}
//# sourceMappingURL=findOpenUShapedContourVectorToPeak.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/openContourEditLoop.js":
/*!*************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/openContourEditLoop.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _utilities_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../utilities/math */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js");
/* harmony import */ var _utilities_planarFreehandROITool_interpolatePoints__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../utilities/planarFreehandROITool/interpolatePoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolatePoints.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _findOpenUShapedContourVectorToPeak__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./findOpenUShapedContourVectorToPeak */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/findOpenUShapedContourVectorToPeak.js");









const { addCanvasPointsToArray, getSubPixelSpacingAndXYDirections } = _utilities_math__WEBPACK_IMPORTED_MODULE_5__.polyline;
function activateOpenContourEdit(evt, annotation, viewportIdsToRender) {
    this.isEditingOpen = true;
    const eventDetail = evt.detail;
    const { currentPoints, element } = eventDetail;
    const canvasPos = currentPoints.canvas;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport } = enabledElement;
    const prevCanvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);
    const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(viewport, this.configuration.subPixelResolution);
    this.editData = {
        prevCanvasPoints,
        editCanvasPoints: [canvasPos],
        startCrossingIndex: undefined,
        editIndex: 0,
    };
    this.commonData = {
        annotation,
        viewportIdsToRender,
        spacing,
        xDir,
        yDir,
        movingTextBox: false,
    };
    _store__WEBPACK_IMPORTED_MODULE_1__.state.isInteractingWithTool = true;
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_UP, this.mouseUpOpenContourEditCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_DRAG, this.mouseDragOpenContourEditCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_CLICK, this.mouseUpOpenContourEditCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_END, this.mouseUpOpenContourEditCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_DRAG, this.mouseDragOpenContourEditCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_TAP, this.mouseUpOpenContourEditCallback);
    (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_3__.hideElementCursor)(element);
}
function deactivateOpenContourEdit(element) {
    _store__WEBPACK_IMPORTED_MODULE_1__.state.isInteractingWithTool = false;
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_UP, this.mouseUpOpenContourEditCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_DRAG, this.mouseDragOpenContourEditCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_CLICK, this.mouseUpOpenContourEditCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_END, this.mouseUpOpenContourEditCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_DRAG, this.mouseDragOpenContourEditCallback);
    element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_TAP, this.mouseUpOpenContourEditCallback);
    (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_3__.resetElementCursor)(element);
}
function mouseDragOpenContourEditCallback(evt) {
    const eventDetail = evt.detail;
    const { currentPoints, element } = eventDetail;
    const worldPos = currentPoints.world;
    const canvasPos = currentPoints.canvas;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { renderingEngine, viewport } = enabledElement;
    const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;
    const { editIndex, editCanvasPoints, startCrossingIndex } = this.editData;
    const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];
    const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);
    const worldPosDiff = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec3.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);
    const xDist = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec3.dot(worldPosDiff, xDir));
    const yDist = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec3.dot(worldPosDiff, yDir));
    if (xDist <= spacing[0] && yDist <= spacing[1]) {
        return;
    }
    if (startCrossingIndex !== undefined) {
        this.checkAndRemoveCrossesOnEditLine(evt);
    }
    const numPointsAdded = addCanvasPointsToArray(element, editCanvasPoints, canvasPos, this.commonData);
    const currentEditIndex = editIndex + numPointsAdded;
    this.editData.editIndex = currentEditIndex;
    if (startCrossingIndex === undefined && editCanvasPoints.length > 1) {
        this.checkForFirstCrossing(evt, false);
    }
    this.editData.snapIndex = this.findSnapIndex();
    this.editData.fusedCanvasPoints = this.fuseEditPointsWithOpenContour(evt);
    if (startCrossingIndex !== undefined &&
        this.checkForSecondCrossing(evt, false)) {
        this.removePointsAfterSecondCrossing(false);
        this.finishEditOpenOnSecondCrossing(evt);
    }
    else if (this.checkIfShouldOverwriteAnEnd(evt)) {
        this.openContourEditOverwriteEnd(evt);
    }
    (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_7__["default"])(renderingEngine, viewportIdsToRender);
}
function openContourEditOverwriteEnd(evt) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport } = enabledElement;
    const { annotation, viewportIdsToRender } = this.commonData;
    const fusedCanvasPoints = this.fuseEditPointsForOpenContourEndEdit();
    const worldPoints = fusedCanvasPoints.map((canvasPoint) => viewport.canvasToWorld(canvasPoint));
    annotation.data.polyline = worldPoints;
    annotation.data.isOpenContour = true;
    annotation.data.handles.points = [
        worldPoints[0],
        worldPoints[worldPoints.length - 1],
    ];
    annotation.data.handles.activeHandleIndex = 1;
    this.triggerAnnotationModified(annotation, enabledElement);
    this.isEditingOpen = false;
    this.editData = undefined;
    this.commonData = undefined;
    this.deactivateOpenContourEdit(element);
    this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, null);
}
function checkIfShouldOverwriteAnEnd(evt) {
    const eventDetail = evt.detail;
    const { currentPoints, lastPoints } = eventDetail;
    const canvasPos = currentPoints.canvas;
    const lastCanvasPos = lastPoints.canvas;
    const { snapIndex, prevCanvasPoints, startCrossingIndex } = this.editData;
    if (startCrossingIndex === undefined || snapIndex === undefined) {
        return false;
    }
    if (snapIndex === -1) {
        return true;
    }
    if (snapIndex !== 0 && snapIndex !== prevCanvasPoints.length - 1) {
        return false;
    }
    const p1 = canvasPos;
    const p2 = lastCanvasPos;
    const p3 = prevCanvasPoints[snapIndex];
    const a = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec2.create();
    const b = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec2.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec2.set(a, p1[0] - p2[0], p1[1] - p2[1]);
    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec2.set(b, p1[0] - p3[0], p1[1] - p3[1]);
    const aDotb = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec2.dot(a, b);
    const magA = Math.sqrt(a[0] * a[0] + a[1] * a[1]);
    const magB = Math.sqrt(b[0] * b[0] + b[1] * b[1]);
    const theta = Math.acos(aDotb / (magA * magB));
    if (theta < Math.PI / 2) {
        return true;
    }
    return false;
}
function fuseEditPointsForOpenContourEndEdit() {
    const { snapIndex, prevCanvasPoints, editCanvasPoints, startCrossingIndex } = this.editData;
    const newCanvasPoints = [];
    if (snapIndex === 0) {
        for (let i = prevCanvasPoints.length - 1; i >= startCrossingIndex; i--) {
            const canvasPoint = prevCanvasPoints[i];
            newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);
        }
    }
    else {
        for (let i = 0; i < startCrossingIndex; i++) {
            const canvasPoint = prevCanvasPoints[i];
            newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);
        }
    }
    const distanceBetweenCrossingIndexAndFirstPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec2.distance(prevCanvasPoints[startCrossingIndex], editCanvasPoints[0]);
    const distanceBetweenCrossingIndexAndLastPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec2.distance(prevCanvasPoints[startCrossingIndex], editCanvasPoints[editCanvasPoints.length - 1]);
    if (distanceBetweenCrossingIndexAndFirstPoint <
        distanceBetweenCrossingIndexAndLastPoint) {
        for (let i = 0; i < editCanvasPoints.length; i++) {
            const canvasPoint = editCanvasPoints[i];
            newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);
        }
    }
    else {
        for (let i = editCanvasPoints.length - 1; i >= 0; i--) {
            const canvasPoint = editCanvasPoints[i];
            newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);
        }
    }
    return newCanvasPoints;
}
function fuseEditPointsWithOpenContour(evt) {
    const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } = this.editData;
    if (startCrossingIndex === undefined || snapIndex === undefined) {
        return undefined;
    }
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const augmentedEditCanvasPoints = [...editCanvasPoints];
    addCanvasPointsToArray(element, augmentedEditCanvasPoints, prevCanvasPoints[snapIndex], this.commonData);
    if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {
        augmentedEditCanvasPoints.pop();
    }
    let lowIndex;
    let highIndex;
    if (startCrossingIndex > snapIndex) {
        lowIndex = snapIndex;
        highIndex = startCrossingIndex;
    }
    else {
        lowIndex = startCrossingIndex;
        highIndex = snapIndex;
    }
    const distanceBetweenLowAndFirstPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec2.distance(prevCanvasPoints[lowIndex], augmentedEditCanvasPoints[0]);
    const distanceBetweenLowAndLastPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec2.distance(prevCanvasPoints[lowIndex], augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]);
    const distanceBetweenHighAndFirstPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec2.distance(prevCanvasPoints[highIndex], augmentedEditCanvasPoints[0]);
    const distanceBetweenHighAndLastPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.vec2.distance(prevCanvasPoints[highIndex], augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]);
    const pointsToRender = [];
    for (let i = 0; i < lowIndex; i++) {
        const canvasPoint = prevCanvasPoints[i];
        pointsToRender.push([canvasPoint[0], canvasPoint[1]]);
    }
    const inPlaceDistance = distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;
    const reverseDistance = distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;
    if (inPlaceDistance < reverseDistance) {
        for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {
            const canvasPoint = augmentedEditCanvasPoints[i];
            pointsToRender.push([canvasPoint[0], canvasPoint[1]]);
        }
    }
    else {
        for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {
            const canvasPoint = augmentedEditCanvasPoints[i];
            pointsToRender.push([canvasPoint[0], canvasPoint[1]]);
        }
    }
    for (let i = highIndex; i < prevCanvasPoints.length; i++) {
        const canvasPoint = prevCanvasPoints[i];
        pointsToRender.push([canvasPoint[0], canvasPoint[1]]);
    }
    return pointsToRender;
}
function finishEditOpenOnSecondCrossing(evt) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport, renderingEngine } = enabledElement;
    const { annotation, viewportIdsToRender } = this.commonData;
    const { fusedCanvasPoints, editCanvasPoints } = this.editData;
    const worldPoints = fusedCanvasPoints.map((canvasPoint) => viewport.canvasToWorld(canvasPoint));
    annotation.data.polyline = worldPoints;
    annotation.data.isOpenContour = true;
    annotation.data.handles.points = [
        worldPoints[0],
        worldPoints[worldPoints.length - 1],
    ];
    this.triggerAnnotationModified(annotation, enabledElement);
    const lastEditCanvasPoint = editCanvasPoints.pop();
    this.editData = {
        prevCanvasPoints: fusedCanvasPoints,
        editCanvasPoints: [lastEditCanvasPoint],
        startCrossingIndex: undefined,
        editIndex: 0,
    };
    (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_7__["default"])(renderingEngine, viewportIdsToRender);
}
function mouseUpOpenContourEditCallback(evt) {
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    this.completeOpenContourEdit(element);
}
function completeOpenContourEdit(element) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport, renderingEngine } = enabledElement;
    const { annotation, viewportIdsToRender } = this.commonData;
    const { fusedCanvasPoints, prevCanvasPoints } = this.editData;
    if (fusedCanvasPoints) {
        const updatedPoints = (0,_utilities_planarFreehandROITool_interpolatePoints__WEBPACK_IMPORTED_MODULE_6__.shouldInterpolate)(this.configuration)
            ? (0,_utilities_planarFreehandROITool_interpolatePoints__WEBPACK_IMPORTED_MODULE_6__.getInterpolatedPoints)(this.configuration, fusedCanvasPoints, prevCanvasPoints)
            : fusedCanvasPoints;
        const worldPoints = updatedPoints.map((canvasPoint) => viewport.canvasToWorld(canvasPoint));
        annotation.data.polyline = worldPoints;
        annotation.data.isOpenContour = true;
        annotation.data.handles.points = [
            worldPoints[0],
            worldPoints[worldPoints.length - 1],
        ];
        if (annotation.data.isOpenUShapeContour) {
            annotation.data.openUShapeContourVectorToPeak =
                (0,_findOpenUShapedContourVectorToPeak__WEBPACK_IMPORTED_MODULE_8__["default"])(fusedCanvasPoints, viewport);
        }
        this.triggerAnnotationModified(annotation, enabledElement);
    }
    this.isEditingOpen = false;
    this.editData = undefined;
    this.commonData = undefined;
    (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_7__["default"])(renderingEngine, viewportIdsToRender);
    this.deactivateOpenContourEdit(element);
}
function cancelOpenContourEdit(element) {
    this.completeOpenContourEdit(element);
}
function registerOpenContourEditLoop(toolInstance) {
    toolInstance.activateOpenContourEdit =
        activateOpenContourEdit.bind(toolInstance);
    toolInstance.deactivateOpenContourEdit =
        deactivateOpenContourEdit.bind(toolInstance);
    toolInstance.mouseDragOpenContourEditCallback =
        mouseDragOpenContourEditCallback.bind(toolInstance);
    toolInstance.mouseUpOpenContourEditCallback =
        mouseUpOpenContourEditCallback.bind(toolInstance);
    toolInstance.fuseEditPointsWithOpenContour =
        fuseEditPointsWithOpenContour.bind(toolInstance);
    toolInstance.finishEditOpenOnSecondCrossing =
        finishEditOpenOnSecondCrossing.bind(toolInstance);
    toolInstance.checkIfShouldOverwriteAnEnd =
        checkIfShouldOverwriteAnEnd.bind(toolInstance);
    toolInstance.fuseEditPointsForOpenContourEndEdit =
        fuseEditPointsForOpenContourEndEdit.bind(toolInstance);
    toolInstance.openContourEditOverwriteEnd =
        openContourEditOverwriteEnd.bind(toolInstance);
    toolInstance.cancelOpenContourEdit = cancelOpenContourEdit.bind(toolInstance);
    toolInstance.completeOpenContourEdit =
        completeOpenContourEdit.bind(toolInstance);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (registerOpenContourEditLoop);
//# sourceMappingURL=openContourEditLoop.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/openContourEndEditLoop.js":
/*!****************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/openContourEndEditLoop.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utilities/math */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js");





const { getSubPixelSpacingAndXYDirections } = _utilities_math__WEBPACK_IMPORTED_MODULE_4__.polyline;
function activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, handle) {
    this.isDrawing = true;
    const eventDetail = evt.detail;
    const { element } = eventDetail;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport } = enabledElement;
    const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(viewport, this.configuration.subPixelResolution);
    const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);
    const handleIndexGrabbed = annotation.data.handles.activeHandleIndex;
    if (handleIndexGrabbed === 0) {
        canvasPoints.reverse();
    }
    let movingTextBox = false;
    if (handle.worldPosition) {
        movingTextBox = true;
    }
    this.drawData = {
        canvasPoints: canvasPoints,
        polylineIndex: canvasPoints.length - 1,
    };
    this.commonData = {
        annotation,
        viewportIdsToRender,
        spacing,
        xDir,
        yDir,
        movingTextBox,
    };
    _store__WEBPACK_IMPORTED_MODULE_1__.state.isInteractingWithTool = true;
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_UP, this.mouseUpDrawCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_DRAG, this.mouseDragDrawCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.MOUSE_CLICK, this.mouseUpDrawCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_END, this.mouseUpDrawCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_DRAG, this.mouseDragDrawCallback);
    element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_2__.Events.TOUCH_TAP, this.mouseUpDrawCallback);
    (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_3__.hideElementCursor)(element);
}
function registerOpenContourEndEditLoop(toolInstance) {
    toolInstance.activateOpenContourEndEdit =
        activateOpenContourEndEdit.bind(toolInstance);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (registerOpenContourEndEditLoop);
//# sourceMappingURL=openContourEndEditLoop.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/renderMethods.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/renderMethods.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _utilities_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/math */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js");
/* harmony import */ var _findOpenUShapedContourVectorToPeak__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./findOpenUShapedContourVectorToPeak */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/planarFreehandROITool/findOpenUShapedContourVectorToPeak.js");



const { pointsAreWithinCloseContourProximity } = _utilities_math__WEBPACK_IMPORTED_MODULE_1__.polyline;
function _getRenderingOptions(enabledElement, annotation) {
    const styleSpecifier = {
        toolGroupId: this.toolGroupId,
        toolName: this.getToolName(),
        viewportId: enabledElement.viewport.id,
        annotationUID: annotation.annotationUID,
    };
    const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
    const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
    const color = this.getStyle('color', styleSpecifier, annotation);
    const isOpenContour = annotation.data.isOpenContour;
    const options = {
        color: color === undefined ? undefined : color,
        width: lineWidth === undefined ? undefined : lineWidth,
        lineDash: lineDash === undefined ? undefined : lineDash,
        connectLastToFirst: !isOpenContour,
    };
    return options;
}
function renderContour(enabledElement, svgDrawingHelper, annotation) {
    if (!enabledElement?.viewport?.getImageData()) {
        return;
    }
    if (annotation.data.isOpenContour) {
        if (annotation.data.isOpenUShapeContour) {
            calculateUShapeContourVectorToPeakIfNotPresent(enabledElement, annotation);
            this.renderOpenUShapedContour(enabledElement, svgDrawingHelper, annotation);
        }
        else {
            this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);
        }
    }
    else {
        this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);
    }
}
function calculateUShapeContourVectorToPeakIfNotPresent(enabledElement, annotation) {
    if (!annotation.data.openUShapeContourVectorToPeak) {
        annotation.data.openUShapeContourVectorToPeak =
            (0,_findOpenUShapedContourVectorToPeak__WEBPACK_IMPORTED_MODULE_2__.findOpenUShapedContourVectorToPeakOnRender)(enabledElement, annotation);
    }
}
function renderClosedContour(enabledElement, svgDrawingHelper, annotation) {
    const { viewport } = enabledElement;
    const options = this._getRenderingOptions(enabledElement, annotation);
    const canvasPoints = annotation.data.polyline.map((worldPos) => viewport.worldToCanvas(worldPos));
    const polylineUID = '1';
    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_0__.drawPolyline)(svgDrawingHelper, annotation.annotationUID, polylineUID, canvasPoints, options);
}
function renderOpenContour(enabledElement, svgDrawingHelper, annotation) {
    const { viewport } = enabledElement;
    const options = this._getRenderingOptions(enabledElement, annotation);
    const canvasPoints = annotation.data.polyline.map((worldPos) => viewport.worldToCanvas(worldPos));
    const polylineUID = '1';
    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_0__.drawPolyline)(svgDrawingHelper, annotation.annotationUID, polylineUID, canvasPoints, options);
    const activeHandleIndex = annotation.data.handles.activeHandleIndex;
    if (this.configuration.alwaysRenderOpenContourHandles?.enabled === true) {
        const radius = this.configuration.alwaysRenderOpenContourHandles.radius;
        const handleGroupUID = '0';
        const handlePoints = [
            canvasPoints[0],
            canvasPoints[canvasPoints.length - 1],
        ];
        if (activeHandleIndex === 0) {
            handlePoints.shift();
        }
        else if (activeHandleIndex === 1) {
            handlePoints.pop();
        }
        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_0__.drawHandles)(svgDrawingHelper, annotation.annotationUID, handleGroupUID, handlePoints, {
            color: options.color,
            handleRadius: radius,
        });
    }
    if (activeHandleIndex !== null) {
        const handleGroupUID = '1';
        const indexOfCanvasPoints = activeHandleIndex === 0 ? 0 : canvasPoints.length - 1;
        const handlePoint = canvasPoints[indexOfCanvasPoints];
        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_0__.drawHandles)(svgDrawingHelper, annotation.annotationUID, handleGroupUID, [handlePoint], { color: options.color });
    }
}
function renderOpenUShapedContour(enabledElement, svgDrawingHelper, annotation) {
    const { viewport } = enabledElement;
    const { polyline, openUShapeContourVectorToPeak } = annotation.data;
    this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);
    if (!openUShapeContourVectorToPeak) {
        return;
    }
    const firstCanvasPoint = viewport.worldToCanvas(polyline[0]);
    const lastCanvasPoint = viewport.worldToCanvas(polyline[polyline.length - 1]);
    const openUShapeContourVectorToPeakCanvas = [
        viewport.worldToCanvas(openUShapeContourVectorToPeak[0]),
        viewport.worldToCanvas(openUShapeContourVectorToPeak[1]),
    ];
    const options = this._getRenderingOptions(enabledElement, annotation);
    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_0__.drawPolyline)(svgDrawingHelper, annotation.annotationUID, 'first-to-last', [firstCanvasPoint, lastCanvasPoint], {
        color: options.color,
        width: options.width,
        connectLastToFirst: false,
        lineDash: '2,2',
    });
    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_0__.drawPolyline)(svgDrawingHelper, annotation.annotationUID, 'midpoint-to-open-contour', [
        openUShapeContourVectorToPeakCanvas[0],
        openUShapeContourVectorToPeakCanvas[1],
    ], {
        color: options.color,
        width: options.width,
        connectLastToFirst: false,
        lineDash: '2,2',
    });
}
function renderContourBeingDrawn(enabledElement, svgDrawingHelper, annotation) {
    const options = this._getRenderingOptions(enabledElement, annotation);
    const { allowOpenContours } = this.configuration;
    const { canvasPoints } = this.drawData;
    options.connectLastToFirst = false;
    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_0__.drawPolyline)(svgDrawingHelper, annotation.annotationUID, '1', canvasPoints, options);
    if (allowOpenContours) {
        const firstPoint = canvasPoints[0];
        const lastPoint = canvasPoints[canvasPoints.length - 1];
        if (pointsAreWithinCloseContourProximity(firstPoint, lastPoint, this.configuration.closeContourProximity)) {
            (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_0__.drawPolyline)(svgDrawingHelper, annotation.annotationUID, '2', [lastPoint, firstPoint], options);
        }
        else {
            const handleGroupUID = '0';
            (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_0__.drawHandles)(svgDrawingHelper, annotation.annotationUID, handleGroupUID, [firstPoint], { color: options.color, handleRadius: 2 });
        }
    }
}
function renderClosedContourBeingEdited(enabledElement, svgDrawingHelper, annotation) {
    const { fusedCanvasPoints } = this.editData;
    if (fusedCanvasPoints === undefined) {
        this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);
        return;
    }
    const options = this._getRenderingOptions(enabledElement, annotation);
    const polylineUIDToRender = 'preview-1';
    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_0__.drawPolyline)(svgDrawingHelper, annotation.annotationUID, polylineUIDToRender, fusedCanvasPoints, options);
}
function renderOpenContourBeingEdited(enabledElement, svgDrawingHelper, annotation) {
    const { fusedCanvasPoints } = this.editData;
    if (fusedCanvasPoints === undefined) {
        this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);
        return;
    }
    const options = this._getRenderingOptions(enabledElement, annotation);
    const polylineUIDToRender = 'preview-1';
    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_0__.drawPolyline)(svgDrawingHelper, annotation.annotationUID, polylineUIDToRender, fusedCanvasPoints, options);
}
function registerRenderMethods(toolInstance) {
    toolInstance.renderContour = renderContour.bind(toolInstance);
    toolInstance.renderClosedContour = renderClosedContour.bind(toolInstance);
    toolInstance.renderOpenContour = renderOpenContour.bind(toolInstance);
    toolInstance.renderOpenUShapedContour =
        renderOpenUShapedContour.bind(toolInstance);
    toolInstance.renderContourBeingDrawn =
        renderContourBeingDrawn.bind(toolInstance);
    toolInstance.renderClosedContourBeingEdited =
        renderClosedContourBeingEdited.bind(toolInstance);
    toolInstance.renderOpenContourBeingEdited =
        renderOpenContourBeingEdited.bind(toolInstance);
    toolInstance._getRenderingOptions = _getRenderingOptions.bind(toolInstance);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (registerRenderMethods);
//# sourceMappingURL=renderMethods.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationDisplayTool.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationDisplayTool.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _BaseTool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BaseTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/BaseTool.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _utilities_triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js");
/* harmony import */ var _utilities_planar_filterAnnotationsForDisplay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/planar/filterAnnotationsForDisplay */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/filterAnnotationsForDisplay.js");
/* harmony import */ var _stateManagement_annotation_config_helpers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../stateManagement/annotation/config/helpers */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/helpers.js");
/* harmony import */ var _stateManagement_annotation_config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../stateManagement/annotation/config */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/config/index.js");








class AnnotationDisplayTool extends _BaseTool__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor() {
        super(...arguments);
        this.onImageSpacingCalibrated = (evt) => {
            const { element, rowScale, columnScale, imageId, imageData: calibratedImageData, worldToIndex: nonCalibratedWorldToIndex, } = evt.detail;
            const { viewport } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.VolumeViewport) {
                throw new Error('Cannot calibrate a volume viewport');
            }
            const calibratedIndexToWorld = calibratedImageData.getIndexToWorld();
            const imageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.imageIdToURI(imageId);
            const stateManager = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_3__.getAnnotationManager)();
            const framesOfReference = stateManager.getFramesOfReference();
            framesOfReference.forEach((frameOfReference) => {
                const frameOfReferenceSpecificAnnotations = stateManager.getAnnotations(frameOfReference);
                const toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[this.getToolName()];
                if (!toolSpecificAnnotations || !toolSpecificAnnotations.length) {
                    return;
                }
                toolSpecificAnnotations.forEach((annotation) => {
                    const referencedImageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.imageIdToURI(annotation.metadata.referencedImageId);
                    if (referencedImageURI === imageURI) {
                        annotation.invalidated = true;
                        annotation.data.cachedStats = {};
                        annotation.data.handles.points = annotation.data.handles.points.map((point) => {
                            const p = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec4.fromValues(...point, 1);
                            const pCalibrated = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec4.fromValues(0, 0, 0, 1);
                            const nonCalibratedIndexVec4 = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec4.create();
                            gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec4.transformMat4(nonCalibratedIndexVec4, p, nonCalibratedWorldToIndex);
                            const calibratedIndex = [
                                columnScale * nonCalibratedIndexVec4[0],
                                rowScale * nonCalibratedIndexVec4[1],
                                nonCalibratedIndexVec4[2],
                            ];
                            gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec4.transformMat4(pCalibrated, gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec4.fromValues(calibratedIndex[0], calibratedIndex[1], calibratedIndex[2], 1), calibratedIndexToWorld);
                            return pCalibrated.slice(0, 3);
                        });
                    }
                });
                (0,_utilities_triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_4__["default"])(element);
            });
        };
    }
    filterInteractableAnnotationsForElement(element, annotations) {
        if (!annotations || !annotations.length) {
            return;
        }
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
        const { viewport } = enabledElement;
        return (0,_utilities_planar_filterAnnotationsForDisplay__WEBPACK_IMPORTED_MODULE_5__["default"])(viewport, annotations);
    }
    getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp) {
        const targetId = this.getTargetId(viewport);
        let referencedImageId;
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
            referencedImageId = targetId.split('imageId:')[1];
        }
        else {
            const volumeId = targetId.split('volumeId:')[1];
            const imageVolume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(volumeId);
            referencedImageId = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);
        }
        return referencedImageId;
    }
    getStyle(property, specifications, annotation) {
        return (0,_stateManagement_annotation_config_helpers__WEBPACK_IMPORTED_MODULE_6__.getStyleProperty)(property, specifications, (0,_stateManagement_annotation_config__WEBPACK_IMPORTED_MODULE_7__.getState)(annotation), this.mode);
    }
}
AnnotationDisplayTool.toolName = 'AnnotationDisplayTool';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AnnotationDisplayTool);
//# sourceMappingURL=AnnotationDisplayTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationTool.js":
/*!****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationTool.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _AnnotationDisplayTool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AnnotationDisplayTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationDisplayTool.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");





class AnnotationTool extends _AnnotationDisplayTool__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor() {
        super(...arguments);
        this.mouseMoveCallback = (evt, filteredAnnotations) => {
            if (!filteredAnnotations) {
                return false;
            }
            const { element, currentPoints } = evt.detail;
            const canvasCoords = currentPoints.canvas;
            let annotationsNeedToBeRedrawn = false;
            for (const annotation of filteredAnnotations) {
                if ((0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_3__.isAnnotationLocked)(annotation) ||
                    !(0,_stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_4__.isAnnotationVisible)(annotation.annotationUID)) {
                    continue;
                }
                const { data } = annotation;
                const activateHandleIndex = data.handles
                    ? data.handles.activeHandleIndex
                    : undefined;
                const near = this._imagePointNearToolOrHandle(element, annotation, canvasCoords, 6);
                const nearToolAndNotMarkedActive = near && !annotation.highlighted;
                const notNearToolAndMarkedActive = !near && annotation.highlighted;
                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {
                    annotation.highlighted = !annotation.highlighted;
                    annotationsNeedToBeRedrawn = true;
                }
                else if (data.handles &&
                    data.handles.activeHandleIndex !== activateHandleIndex) {
                    annotationsNeedToBeRedrawn = true;
                }
            }
            return annotationsNeedToBeRedrawn;
        };
    }
    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
        const { viewport } = enabledElement;
        const { data } = annotation;
        const { points, textBox } = data.handles;
        const { worldBoundingBox } = textBox;
        if (worldBoundingBox) {
            const canvasBoundingBox = {
                topLeft: viewport.worldToCanvas(worldBoundingBox.topLeft),
                topRight: viewport.worldToCanvas(worldBoundingBox.topRight),
                bottomLeft: viewport.worldToCanvas(worldBoundingBox.bottomLeft),
                bottomRight: viewport.worldToCanvas(worldBoundingBox.bottomRight),
            };
            if (canvasCoords[0] >= canvasBoundingBox.topLeft[0] &&
                canvasCoords[0] <= canvasBoundingBox.bottomRight[0] &&
                canvasCoords[1] >= canvasBoundingBox.topLeft[1] &&
                canvasCoords[1] <= canvasBoundingBox.bottomRight[1]) {
                data.handles.activeHandleIndex = null;
                return textBox;
            }
        }
        for (let i = 0; i < points.length; i++) {
            const point = points[i];
            const annotationCanvasCoordinate = viewport.worldToCanvas(point);
            const near = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;
            if (near === true) {
                data.handles.activeHandleIndex = i;
                return point;
            }
        }
        data.handles.activeHandleIndex = null;
    }
    getLinkedTextBoxStyle(specifications, annotation) {
        return {
            fontFamily: this.getStyle('textBoxFontFamily', specifications, annotation),
            fontSize: this.getStyle('textBoxFontSize', specifications, annotation),
            color: this.getStyle('textBoxColor', specifications, annotation),
            shadow: this.getStyle('textBoxShadow', specifications, annotation),
            background: this.getStyle('textBoxBackground', specifications, annotation),
            lineWidth: this.getStyle('textBoxLinkLineWidth', specifications, annotation),
            lineDash: this.getStyle('textBoxLinkLineDash', specifications, annotation),
        };
    }
    isSuvScaled(viewport, targetId, imageId) {
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.BaseVolumeViewport) {
            const volumeId = targetId.split('volumeId:')[1];
            const volume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(volumeId);
            return volume.scaling?.PET !== undefined;
        }
        else if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
            const scalingModule = imageId && _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.metaData.get('scalingModule', imageId);
            return typeof scalingModule?.suvbw === 'number';
        }
        else {
            throw new Error('Viewport is not a valid type');
        }
    }
    _imagePointNearToolOrHandle(element, annotation, canvasCoords, proximity) {
        const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, proximity);
        if (handleNearImagePoint) {
            return true;
        }
        const toolNewImagePoint = this.isPointNearTool(element, annotation, canvasCoords, proximity, 'mouse');
        if (toolNewImagePoint) {
            return true;
        }
    }
}
AnnotationTool.toolName = 'AnnotationTool';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AnnotationTool);
//# sourceMappingURL=AnnotationTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/BaseTool.js":
/*!**********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/BaseTool.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");


class BaseTool {
    constructor(toolProps, defaultToolProps) {
        const initialProps = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.deepMerge(defaultToolProps, toolProps);
        const { configuration = {}, supportedInteractionTypes, toolGroupId, } = initialProps;
        if (!configuration.strategies) {
            configuration.strategies = {};
            configuration.defaultStrategy = undefined;
            configuration.activeStrategy = undefined;
            configuration.strategyOptions = {};
        }
        this.toolGroupId = toolGroupId;
        this.supportedInteractionTypes = supportedInteractionTypes || [];
        this.configuration = Object.assign({}, configuration);
        this.mode = _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes.Disabled;
    }
    getToolName() {
        return this.constructor.toolName;
    }
    applyActiveStrategy(enabledElement, operationData) {
        const { strategies, activeStrategy } = this.configuration;
        return strategies[activeStrategy].call(this, enabledElement, operationData);
    }
    setConfiguration(newConfiguration) {
        this.configuration = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.deepMerge(this.configuration, newConfiguration);
    }
    setActiveStrategy(strategyName) {
        this.setConfiguration({ activeStrategy: strategyName });
    }
    getTargetVolumeId(viewport) {
        if (this.configuration.volumeId) {
            return this.configuration.volumeId;
        }
        const actorEntries = viewport.getActors();
        if (!actorEntries) {
            return;
        }
        return actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume')?.uid;
    }
    getTargetIdImage(targetId, renderingEngine) {
        if (targetId.startsWith('imageId:')) {
            const imageId = targetId.split('imageId:')[1];
            const imageURI = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.imageIdToURI(imageId);
            let viewports = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getViewportsWithImageURI(imageURI, renderingEngine.id);
            if (!viewports || !viewports.length) {
                return;
            }
            viewports = viewports.filter((viewport) => {
                return viewport.getCurrentImageId() === imageId;
            });
            if (!viewports || !viewports.length) {
                return;
            }
            return viewports[0].getImageData();
        }
        else if (targetId.startsWith('volumeId:')) {
            const volumeId = targetId.split('volumeId:')[1];
            const viewports = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getViewportsWithVolumeId(volumeId, renderingEngine.id);
            if (!viewports || !viewports.length) {
                return;
            }
            return viewports[0].getImageData();
        }
        else {
            throw new Error('getTargetIdImage: targetId must start with "imageId:" or "volumeId:"');
        }
    }
    getTargetId(viewport) {
        if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
            return `imageId:${viewport.getCurrentImageId()}`;
        }
        else if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.BaseVolumeViewport) {
            return `volumeId:${this.getTargetVolumeId(viewport)}`;
        }
        else {
            throw new Error('getTargetId: viewport must be a StackViewport or VolumeViewport');
        }
    }
}
BaseTool.toolName = 'BaseTool';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BaseTool);
//# sourceMappingURL=BaseTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js":
/*!*******************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AnnotationTool: () => (/* reexport safe */ _AnnotationTool__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   BaseTool: () => (/* reexport safe */ _BaseTool__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _BaseTool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/BaseTool.js");
/* harmony import */ var _AnnotationTool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AnnotationTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/AnnotationTool.js");



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/addContourSetsToElement.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/addContourSetsToElement.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addContourSetsToElement: () => (/* binding */ addContourSetsToElement)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _kitware_vtk_js_Common_Core_DataArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @kitware/vtk.js/Common/Core/DataArray */ "../../../node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _kitware_vtk_js_Filters_General_AppendPolyData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @kitware/vtk.js/Filters/General/AppendPolyData */ "../../../node_modules/@kitware/vtk.js/Filters/General/AppendPolyData.js");
/* harmony import */ var _kitware_vtk_js_Rendering_Core_Actor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Core/Actor */ "../../../node_modules/@kitware/vtk.js/Rendering/Core/Actor.js");
/* harmony import */ var _kitware_vtk_js_Rendering_Core_Mapper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Core/Mapper */ "../../../node_modules/@kitware/vtk.js/Rendering/Core/Mapper.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/utils.js");
/* harmony import */ var _contourConfigCache__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./contourConfigCache */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourConfigCache.js");







function addContourSetsToElement(viewport, geometryIds, contourRepresentation, contourRepresentationConfig, contourActorUID) {
    const { segmentationRepresentationUID, segmentsHidden } = contourRepresentation;
    const appendPolyData = _kitware_vtk_js_Filters_General_AppendPolyData__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
    const scalarToColorMap = new Map();
    const segmentSpecificMap = new Map();
    geometryIds.forEach((geometryId) => {
        const geometry = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getGeometry(geometryId);
        if (!geometry) {
            console.warn(`No geometry found for geometryId ${geometryId}. Skipping render.`);
            return;
        }
        const segmentIndex = geometry.data.getSegmentIndex();
        (0,_utils__WEBPACK_IMPORTED_MODULE_5__.validateGeometry)(geometry);
        const segmentSpecificConfig = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getSegmentSpecificConfig)(contourRepresentation, geometryId, segmentIndex);
        const contourSet = geometry.data;
        const polyData = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.getPolyData)(contourSet);
        const color = contourSet.getColor();
        const size = polyData.getPoints().getNumberOfPoints();
        const scalars = _kitware_vtk_js_Common_Core_DataArray__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance({
            size: size * 4,
            numberOfComponents: 4,
            dataType: 'Uint8Array',
        });
        for (let i = 0; i < size; ++i) {
            scalars.setTuple(i, [...color, 255]);
        }
        polyData.getPointData().setScalars(scalars);
        if (segmentSpecificConfig) {
            segmentSpecificMap.set(segmentIndex, segmentSpecificConfig);
        }
        scalarToColorMap.set(segmentIndex, [
            ...color,
            segmentsHidden.has(segmentIndex) ? 0 : 255,
        ]);
        segmentIndex === 0
            ? appendPolyData.setInputData(polyData)
            : appendPolyData.addInputData(polyData);
    });
    const polyDataOutput = appendPolyData.getOutputData();
    const outlineWidthActive = contourRepresentationConfig.representations.CONTOUR.outlineWidthActive;
    const mapper = _kitware_vtk_js_Rendering_Core_Mapper__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
    mapper.setInputData(polyDataOutput);
    const actor = _kitware_vtk_js_Rendering_Core_Actor__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    actor.setMapper(mapper);
    actor.getProperty().setLineWidth(outlineWidthActive);
    (0,_contourConfigCache__WEBPACK_IMPORTED_MODULE_6__.setConfigCache)(segmentationRepresentationUID, Object.assign({}, (0,_contourConfigCache__WEBPACK_IMPORTED_MODULE_6__.getConfigCache)(segmentationRepresentationUID), {
        segmentsHidden: new Set(segmentsHidden),
        segmentSpecificMap,
        outlineWidthActive,
    }));
    actor.setForceOpaque(true);
    viewport.addActor({
        uid: contourActorUID,
        actor: actor,
    });
    viewport.resetCamera();
    viewport.render();
}
//# sourceMappingURL=addContourSetsToElement.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/addOrUpdateContourSets.js":
/*!****************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/addOrUpdateContourSets.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addOrUpdateContourSets: () => (/* binding */ addOrUpdateContourSets)
/* harmony export */ });
/* harmony import */ var _addContourSetsToElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addContourSetsToElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/addContourSetsToElement.js");
/* harmony import */ var _updateContourSets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./updateContourSets */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/updateContourSets.js");


function addOrUpdateContourSets(viewport, geometryIds, contourRepresentation, contourRepresentationConfig) {
    const { segmentationRepresentationUID } = contourRepresentation;
    const actorUID = `CONTOUR_${segmentationRepresentationUID}`;
    const actor = viewport.getActor(actorUID);
    const addOrUpdateFn = actor ? _updateContourSets__WEBPACK_IMPORTED_MODULE_1__.updateContourSets : _addContourSetsToElement__WEBPACK_IMPORTED_MODULE_0__.addContourSetsToElement;
    addOrUpdateFn(viewport, geometryIds, contourRepresentation, contourRepresentationConfig, actorUID);
}
//# sourceMappingURL=addOrUpdateContourSets.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourConfig.js":
/*!*******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourConfig.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const defaultContourConfig = {
    renderOutline: true,
    outlineWidthActive: 2,
    outlineWidthInactive: 2,
    outlineOpacity: 1,
    outlineOpacityInactive: 0.85,
    renderFill: true,
    fillAlpha: 1,
    fillAlphaInactive: 0,
};
function getDefaultContourConfig() {
    return defaultContourConfig;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getDefaultContourConfig);
//# sourceMappingURL=contourConfig.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourConfigCache.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourConfigCache.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteConfigCache: () => (/* binding */ deleteConfigCache),
/* harmony export */   getConfigCache: () => (/* binding */ getConfigCache),
/* harmony export */   setConfigCache: () => (/* binding */ setConfigCache)
/* harmony export */ });
const configCachePerSegmentationRepresentationUID = new Map();
function getConfigCache(segmentationRepresentationUID) {
    return configCachePerSegmentationRepresentationUID.get(segmentationRepresentationUID);
}
function setConfigCache(segmentationRepresentationUID, config) {
    configCachePerSegmentationRepresentationUID.set(segmentationRepresentationUID, config);
}
function deleteConfigCache(segmentationRepresentationUID) {
    configCachePerSegmentationRepresentationUID.delete(segmentationRepresentationUID);
}
//# sourceMappingURL=contourConfigCache.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourDisplay.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourDisplay.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../enums/SegmentationRepresentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js");
/* harmony import */ var _stateManagement_segmentation_config_segmentationConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../stateManagement/segmentation/config/segmentationConfig */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationConfig.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");
/* harmony import */ var _addOrUpdateContourSets__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./addOrUpdateContourSets */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/addOrUpdateContourSets.js");
/* harmony import */ var _removeContourFromElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./removeContourFromElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/removeContourFromElement.js");
/* harmony import */ var _contourConfigCache__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./contourConfigCache */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourConfigCache.js");








async function addSegmentationRepresentation(toolGroupId, representationInput, toolGroupSpecificConfig) {
    const { segmentationId } = representationInput;
    const segmentationRepresentationUID = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.uuidv4();
    const segmentsHidden = new Set();
    const visibility = true;
    const colorLUTIndex = 0;
    const active = true;
    const toolGroupSpecificRepresentation = {
        segmentationId,
        segmentationRepresentationUID,
        type: _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_1__["default"].Contour,
        segmentsHidden,
        colorLUTIndex,
        active,
        segmentationRepresentationSpecificConfig: {},
        segmentSpecificConfig: {},
        config: {},
    };
    if (toolGroupSpecificConfig) {
        const currentToolGroupConfig = _stateManagement_segmentation_config_segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.getToolGroupSpecificConfig(toolGroupId);
        const mergedConfig = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.deepMerge(currentToolGroupConfig, toolGroupSpecificConfig);
        _stateManagement_segmentation_config_segmentationConfig__WEBPACK_IMPORTED_MODULE_2__.setToolGroupSpecificConfig(toolGroupId, {
            renderInactiveSegmentations: mergedConfig.renderInactiveSegmentations || true,
            representations: {
                ...mergedConfig.representations,
            },
        });
    }
    _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_3__.addSegmentationRepresentation(toolGroupId, toolGroupSpecificRepresentation);
    return segmentationRepresentationUID;
}
function removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID, renderImmediate = false) {
    _removeContourFromToolGroupViewports(toolGroupId, segmentationRepresentationUID);
    _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_3__.removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID);
    (0,_contourConfigCache__WEBPACK_IMPORTED_MODULE_7__.deleteConfigCache)(segmentationRepresentationUID);
    if (renderImmediate) {
        const viewportsInfo = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_4__.getToolGroup)(toolGroupId).getViewportsInfo();
        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElementByIds)(viewportId, renderingEngineId);
            enabledElement.viewport.render();
        });
    }
}
async function render(viewport, representationConfig, toolGroupConfig) {
    const { segmentationId } = representationConfig;
    const segmentation = _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_3__.getSegmentation(segmentationId);
    const contourData = segmentation.representationData[_enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_1__["default"].Contour];
    const { geometryIds } = contourData;
    if (!geometryIds?.length) {
        console.warn(`No contours found for segmentationId ${segmentationId}. Skipping render.`);
    }
    (0,_addOrUpdateContourSets__WEBPACK_IMPORTED_MODULE_5__.addOrUpdateContourSets)(viewport, geometryIds, representationConfig, toolGroupConfig);
}
function _removeContourFromToolGroupViewports(toolGroupId, segmentationRepresentationUID) {
    const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_4__.getToolGroup)(toolGroupId);
    if (toolGroup === undefined) {
        throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);
    }
    const { viewportsInfo } = toolGroup;
    for (const viewportInfo of viewportsInfo) {
        const { viewportId, renderingEngineId } = viewportInfo;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElementByIds)(viewportId, renderingEngineId);
        (0,_removeContourFromElement__WEBPACK_IMPORTED_MODULE_6__["default"])(enabledElement.viewport.element, segmentationRepresentationUID);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    render,
    addSegmentationRepresentation,
    removeSegmentationRepresentation,
});
//# sourceMappingURL=contourDisplay.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/index.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   contourDisplay: () => (/* reexport safe */ _contourDisplay__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _contourDisplay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contourDisplay */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourDisplay.js");


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/removeContourFromElement.js":
/*!******************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/removeContourFromElement.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function removeContourFromElement(element, segmentationRepresentationUID, removeFromCache = false) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport } = enabledElement;
    const actorEntries = viewport.getActors();
    const actorUIDsToRemove = actorEntries
        .map(({ uid }) => uid.includes(segmentationRepresentationUID) ? uid : undefined)
        .filter(Boolean);
    viewport.removeActors(actorUIDsToRemove);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (removeContourFromElement);
//# sourceMappingURL=removeContourFromElement.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/updateContourSets.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/updateContourSets.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   updateContourSets: () => (/* binding */ updateContourSets)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _contourConfigCache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./contourConfigCache */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourConfigCache.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/utils.js");



function updateContourSets(viewport, geometryIds, contourRepresentation, contourRepresentationConfig, contourActorUID) {
    const { segmentationRepresentationUID, segmentsHidden } = contourRepresentation;
    const newContourConfig = contourRepresentationConfig.representations.CONTOUR;
    const cachedConfig = (0,_contourConfigCache__WEBPACK_IMPORTED_MODULE_1__.getConfigCache)(segmentationRepresentationUID);
    const contourSetsActor = viewport.getActor(contourActorUID);
    if (!contourSetsActor) {
        console.warn(`No contour actor found for actorUID ${contourActorUID}. Skipping render.`);
        return;
    }
    const { actor } = contourSetsActor;
    const newOutlineWithActive = newContourConfig.outlineWidthActive;
    if (cachedConfig?.outlineWidthActive !== newOutlineWithActive) {
        actor
            .getProperty()
            .setLineWidth(newOutlineWithActive);
        (0,_contourConfigCache__WEBPACK_IMPORTED_MODULE_1__.setConfigCache)(segmentationRepresentationUID, Object.assign({}, cachedConfig, {
            outlineWidthActive: newOutlineWithActive,
        }));
    }
    const mapper = actor.getMapper();
    const lut = mapper.getLookupTable();
    const segmentsToSetToInvisible = [];
    const segmentsToSetToVisible = [];
    for (const segmentIndex of segmentsHidden) {
        if (!cachedConfig.segmentsHidden.has(segmentIndex)) {
            segmentsToSetToInvisible.push(segmentIndex);
        }
    }
    for (const segmentIndex of cachedConfig.segmentsHidden) {
        if (!segmentsHidden.has(segmentIndex)) {
            segmentsToSetToVisible.push(segmentIndex);
        }
    }
    const mergedInvisibleSegments = Array.from(cachedConfig.segmentsHidden)
        .filter((segmentIndex) => !segmentsToSetToVisible.includes(segmentIndex))
        .concat(segmentsToSetToInvisible);
    const { contourSets, segmentSpecificConfigs } = geometryIds.reduce((acc, geometryId) => {
        const geometry = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getGeometry(geometryId);
        const { data: contourSet } = geometry;
        const segmentIndex = contourSet.getSegmentIndex();
        const segmentSpecificConfig = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getSegmentSpecificConfig)(contourRepresentation, geometryId, segmentIndex);
        acc.contourSets.push(contourSet);
        acc.segmentSpecificConfigs[segmentIndex] = segmentSpecificConfig ?? {};
        return acc;
    }, { contourSets: [], segmentSpecificConfigs: {} });
    const affectedSegments = [
        ...mergedInvisibleSegments,
        ...segmentsToSetToVisible,
    ];
    const hasCustomSegmentSpecificConfig = Object.values(segmentSpecificConfigs).some((config) => Object.keys(config).length > 0);
    let polyDataModified = false;
    if (affectedSegments.length || hasCustomSegmentSpecificConfig) {
        const appendPolyData = mapper.getInputData();
        const appendScalars = appendPolyData.getPointData().getScalars();
        const appendScalarsData = appendScalars.getData();
        let offset = 0;
        contourSets.forEach((contourSet) => {
            const segmentIndex = contourSet.getSegmentIndex();
            const size = contourSet.getTotalNumberOfPoints();
            if (affectedSegments.includes(segmentIndex) ||
                segmentSpecificConfigs[segmentIndex]?.fillAlpha) {
                const color = contourSet.getColor();
                let visibility = mergedInvisibleSegments.includes(segmentIndex)
                    ? 0
                    : 255;
                const segmentConfig = segmentSpecificConfigs[segmentIndex];
                if (segmentConfig.fillAlpha !== undefined) {
                    visibility = segmentConfig.fillAlpha * 255;
                }
                for (let i = 0; i < size; ++i) {
                    appendScalarsData[offset + i * 4] = color[0];
                    appendScalarsData[offset + i * 4 + 1] = color[1];
                    appendScalarsData[offset + i * 4 + 2] = color[2];
                    appendScalarsData[offset + i * 4 + 3] = visibility;
                }
                polyDataModified = true;
            }
            offset = offset + size * 4;
        });
        if (polyDataModified) {
            appendPolyData.modified();
        }
        (0,_contourConfigCache__WEBPACK_IMPORTED_MODULE_1__.setConfigCache)(segmentationRepresentationUID, Object.assign({}, cachedConfig, {
            segmentsHidden: new Set(segmentsHidden),
        }));
        mapper.setLookupTable(lut);
    }
    viewport.render();
}
//# sourceMappingURL=updateContourSets.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/utils.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/utils.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getPolyData: () => (/* binding */ getPolyData),
/* harmony export */   getSegmentSpecificConfig: () => (/* binding */ getSegmentSpecificConfig),
/* harmony export */   validateGeometry: () => (/* binding */ validateGeometry)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _kitware_vtk_js_Common_Core_CellArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @kitware/vtk.js/Common/Core/CellArray */ "../../../node_modules/@kitware/vtk.js/Common/Core/CellArray.js");
/* harmony import */ var _kitware_vtk_js_Common_Core_Points__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @kitware/vtk.js/Common/Core/Points */ "../../../node_modules/@kitware/vtk.js/Common/Core/Points.js");
/* harmony import */ var _kitware_vtk_js_Common_DataModel_PolyData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @kitware/vtk.js/Common/DataModel/PolyData */ "../../../node_modules/@kitware/vtk.js/Common/DataModel/PolyData.js");




function getSegmentSpecificConfig(contourRepresentation, segmentId, index) {
    let segmentSpecificConfig = contourRepresentation.segmentSpecificConfig?.[segmentId];
    if (!segmentSpecificConfig) {
        segmentSpecificConfig =
            contourRepresentation.segmentSpecificConfig?.[index];
    }
    if (!segmentSpecificConfig) {
        return null;
    }
    return segmentSpecificConfig.CONTOUR;
}
function validateGeometry(geometry) {
    if (!geometry) {
        throw new Error(`No contours found for geometryId ${geometry.id}`);
    }
    const geometryId = geometry.id;
    if (geometry.type !== _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.GeometryType.CONTOUR) {
        throw new Error(`Geometry type ${geometry.type} not supported for rendering.`);
    }
    if (!geometry.data) {
        console.warn(`No contours found for geometryId ${geometryId}. Skipping render.`);
        return;
    }
}
function getPolyData(contourSet) {
    const pointArray = [];
    const points = _kitware_vtk_js_Common_Core_Points__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
    const lines = _kitware_vtk_js_Common_Core_CellArray__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
    let pointIndex = 0;
    contourSet.getContours().forEach((contour) => {
        const pointList = contour.getPoints();
        const flatPoints = contour.getFlatPointsArray();
        const type = contour.getType();
        const pointIndexes = pointList.map((_, pointListIndex) => pointListIndex + pointIndex);
        if (type === _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.ContourType.CLOSED_PLANAR) {
            pointIndexes.push(pointIndexes[0]);
        }
        const linePoints = Float32Array.from(flatPoints);
        pointArray.push(...linePoints);
        lines.insertNextCell([...pointIndexes]);
        pointIndex = pointIndex + pointList.length;
    });
    points.setData(pointArray, 3);
    const polygon = _kitware_vtk_js_Common_DataModel_PolyData__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    polygon.setPoints(points);
    polygon.setLines(lines);
    return polygon;
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/addLabelmapToElement.js":
/*!***************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/addLabelmapToElement.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

async function addLabelmapToElement(element, volumeId, segmentationRepresentationUID) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { renderingEngine, viewport } = enabledElement;
    const { id: viewportId } = viewport;
    const visibility = true;
    const immediateRender = false;
    const suppressEvents = true;
    const volumeInputs = [
        {
            volumeId,
            actorUID: segmentationRepresentationUID,
            visibility,
            blendMode: _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,
        },
    ];
    await (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.addVolumesToViewports)(renderingEngine, volumeInputs, [viewportId], immediateRender, suppressEvents);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addLabelmapToElement);
//# sourceMappingURL=addLabelmapToElement.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/index.js":
/*!************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   labelmapConfig: () => (/* reexport safe */ _labelmapConfig__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   labelmapDisplay: () => (/* reexport safe */ _labelmapDisplay__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _labelmapDisplay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./labelmapDisplay */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapDisplay.js");
/* harmony import */ var _labelmapConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./labelmapConfig */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapConfig.js");



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapConfig.js":
/*!*********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapConfig.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isValidLabelmapConfig: () => (/* binding */ isValidLabelmapConfig)
/* harmony export */ });
const defaultLabelmapConfig = {
    renderOutline: true,
    outlineWidthActive: 3,
    outlineWidthInactive: 2,
    renderFill: true,
    renderFillInactive: true,
    fillAlpha: 0.7,
    fillAlphaInactive: 0.65,
    outlineOpacity: 1,
    outlineOpacityInactive: 0.85,
};
function getDefaultLabelmapConfig() {
    return defaultLabelmapConfig;
}
function isValidLabelmapConfig(config) {
    return (config &&
        typeof config.renderOutline === 'boolean' &&
        typeof config.outlineWidthActive === 'number' &&
        typeof config.outlineWidthInactive === 'number' &&
        typeof config.renderFill === 'boolean' &&
        typeof config.renderFillInactive === 'boolean' &&
        typeof config.fillAlpha === 'number' &&
        typeof config.fillAlphaInactive === 'number' &&
        typeof config.outlineOpacity === 'number' &&
        typeof config.outlineOpacityInactive === 'number');
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getDefaultLabelmapConfig);

//# sourceMappingURL=labelmapConfig.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapDisplay.js":
/*!**********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapDisplay.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _kitware_vtk_js_Common_DataModel_PiecewiseFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @kitware/vtk.js/Common/DataModel/PiecewiseFunction */ "../../../node_modules/@kitware/vtk.js/Common/DataModel/PiecewiseFunction.js");
/* harmony import */ var _kitware_vtk_js_Rendering_Core_ColorTransferFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Core/ColorTransferFunction */ "../../../node_modules/@kitware/vtk.js/Rendering/Core/ColorTransferFunction.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../enums/SegmentationRepresentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js");
/* harmony import */ var _stateManagement_segmentation_config_segmentationConfig__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../stateManagement/segmentation/config/segmentationConfig */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationConfig.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");
/* harmony import */ var _addLabelmapToElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./addLabelmapToElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/addLabelmapToElement.js");
/* harmony import */ var _removeLabelmapFromElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./removeLabelmapFromElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/removeLabelmapFromElement.js");









const MAX_NUMBER_COLORS = 255;
const labelMapConfigCache = new Map();
async function addSegmentationRepresentation(toolGroupId, representationInput, toolGroupSpecificConfig) {
    const { segmentationId } = representationInput;
    const segmentationRepresentationUID = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.utilities.uuidv4();
    const segmentsHidden = new Set();
    const colorLUTIndex = 0;
    const active = true;
    const cfun = _kitware_vtk_js_Rendering_Core_ColorTransferFunction__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
    const ofun = _kitware_vtk_js_Common_DataModel_PiecewiseFunction__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance();
    ofun.addPoint(0, 0);
    const toolGroupSpecificRepresentation = {
        segmentationId,
        segmentationRepresentationUID,
        type: _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_3__["default"].Labelmap,
        segmentsHidden,
        colorLUTIndex,
        active,
        segmentationRepresentationSpecificConfig: {},
        segmentSpecificConfig: {},
        config: {
            cfun,
            ofun,
        },
    };
    if (toolGroupSpecificConfig) {
        const currentToolGroupConfig = _stateManagement_segmentation_config_segmentationConfig__WEBPACK_IMPORTED_MODULE_4__.getToolGroupSpecificConfig(toolGroupId);
        const mergedConfig = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.utilities.deepMerge(currentToolGroupConfig, toolGroupSpecificConfig);
        _stateManagement_segmentation_config_segmentationConfig__WEBPACK_IMPORTED_MODULE_4__.setToolGroupSpecificConfig(toolGroupId, {
            renderInactiveSegmentations: mergedConfig.renderInactiveSegmentations || true,
            representations: {
                ...mergedConfig.representations,
            },
        });
    }
    _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_5__.addSegmentationRepresentation(toolGroupId, toolGroupSpecificRepresentation);
    return segmentationRepresentationUID;
}
function removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID, renderImmediate = false) {
    _removeLabelmapFromToolGroupViewports(toolGroupId, segmentationRepresentationUID);
    _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_5__.removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID);
    if (renderImmediate) {
        const viewportsInfo = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_6__.getToolGroup)(toolGroupId).getViewportsInfo();
        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElementByIds)(viewportId, renderingEngineId);
            enabledElement.viewport.render();
        });
    }
}
function isSameFrameOfReference(viewport, referencedVolumeId) {
    if (!referencedVolumeId) {
        return true;
    }
    const defaultActor = viewport.getDefaultActor();
    if (!defaultActor) {
        return false;
    }
    const { uid: defaultActorUID } = defaultActor;
    const volume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.cache.getVolume(defaultActorUID);
    if (volume) {
        const referencedVolume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.cache.getVolume(referencedVolumeId);
        if (referencedVolume &&
            volume.metadata.FrameOfReferenceUID ===
                referencedVolume.metadata.FrameOfReferenceUID) {
            return true;
        }
    }
    return false;
}
async function render(viewport, representation, toolGroupConfig) {
    const { colorLUTIndex, active, segmentationId, segmentationRepresentationUID, segmentsHidden, config: renderingConfig, } = representation;
    const segmentation = _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_5__.getSegmentation(segmentationId);
    const labelmapData = segmentation.representationData[_enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_3__["default"].Labelmap];
    const { volumeId: labelmapUID } = labelmapData;
    const labelmap = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.cache.getVolume(labelmapUID);
    if (!labelmap) {
        throw new Error(`No Labelmap found for volumeId: ${labelmapUID}`);
    }
    if (!isSameFrameOfReference(viewport, labelmapData?.referencedVolumeId)) {
        return;
    }
    let actorEntry = viewport.getActor(segmentationRepresentationUID);
    if (!actorEntry) {
        const segmentation = _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_5__.getSegmentation(segmentationId);
        const { volumeId } = segmentation.representationData[_enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_3__["default"].Labelmap];
        await _addLabelmapToViewport(viewport, volumeId, segmentationRepresentationUID);
        actorEntry = viewport.getActor(segmentationRepresentationUID);
    }
    if (!actorEntry) {
        return;
    }
    const { cfun, ofun } = renderingConfig;
    const renderInactiveSegmentations = toolGroupConfig.renderInactiveSegmentations;
    _setLabelmapColorAndOpacity(viewport.id, actorEntry, cfun, ofun, colorLUTIndex, toolGroupConfig.representations[_enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_3__["default"].Labelmap], representation, active, renderInactiveSegmentations, segmentsHidden);
}
function _setLabelmapColorAndOpacity(viewportId, actorEntry, cfun, ofun, colorLUTIndex, toolGroupLabelmapConfig, segmentationRepresentation, isActiveLabelmap, renderInactiveSegmentations, segmentsHidden) {
    const { segmentSpecificConfig, segmentationRepresentationSpecificConfig } = segmentationRepresentation;
    const segmentationRepresentationLabelmapConfig = segmentationRepresentationSpecificConfig[_enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_3__["default"].Labelmap];
    const colorLUT = _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_5__.getColorLUT(colorLUTIndex);
    const numColors = Math.min(256, colorLUT.length);
    const volumeActor = actorEntry.actor;
    const { uid: actorUID } = actorEntry;
    const { outlineWidth, renderOutline, outlineOpacity } = _getLabelmapConfig(toolGroupLabelmapConfig, segmentationRepresentationLabelmapConfig, isActiveLabelmap);
    for (let i = 0; i < numColors; i++) {
        const segmentIndex = i;
        const segmentColor = colorLUT[segmentIndex];
        const segmentSpecificLabelmapConfig = segmentSpecificConfig[segmentIndex]?.[_enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_3__["default"].Labelmap];
        const { fillAlpha, outlineWidth, renderFill, renderOutline } = _getLabelmapConfig(toolGroupLabelmapConfig, segmentationRepresentationLabelmapConfig, isActiveLabelmap, segmentSpecificLabelmapConfig);
        const { forceOpacityUpdate, forceColorUpdate } = _needsTransferFunctionUpdate(viewportId, actorUID, segmentIndex, {
            fillAlpha,
            renderFill,
            renderOutline,
            segmentColor,
            outlineWidth,
            segmentsHidden,
        });
        if (forceColorUpdate) {
            cfun.addRGBPoint(segmentIndex, segmentColor[0] / MAX_NUMBER_COLORS, segmentColor[1] / MAX_NUMBER_COLORS, segmentColor[2] / MAX_NUMBER_COLORS);
        }
        if (forceOpacityUpdate) {
            if (renderFill) {
                const segmentOpacity = segmentsHidden.has(segmentIndex)
                    ? 0
                    : (segmentColor[3] / 255) * fillAlpha;
                ofun.removePoint(segmentIndex);
                ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1.0);
            }
            else {
                ofun.addPointLong(segmentIndex, 0.01, 0.5, 1.0);
            }
        }
    }
    volumeActor.getProperty().setRGBTransferFunction(0, cfun);
    ofun.setClamping(false);
    volumeActor.getProperty().setScalarOpacity(0, ofun);
    volumeActor.getProperty().setInterpolationTypeToNearest();
    volumeActor.getProperty().setUseLabelOutline(renderOutline);
    volumeActor.getProperty().setLabelOutlineOpacity(outlineOpacity);
    volumeActor.getProperty().setLabelOutlineThickness(outlineWidth);
    const visible = isActiveLabelmap || renderInactiveSegmentations;
    volumeActor.setVisibility(visible);
}
function _getLabelmapConfig(toolGroupLabelmapConfig, segmentationRepresentationLabelmapConfig, isActiveLabelmap, segmentsLabelmapConfig) {
    const segmentLabelmapConfig = segmentsLabelmapConfig || {};
    const configToUse = {
        ...toolGroupLabelmapConfig,
        ...segmentationRepresentationLabelmapConfig,
        ...segmentLabelmapConfig,
    };
    const fillAlpha = isActiveLabelmap
        ? configToUse.fillAlpha
        : configToUse.fillAlphaInactive;
    const outlineWidth = isActiveLabelmap
        ? configToUse.outlineWidthActive
        : configToUse.outlineWidthInactive;
    const renderFill = isActiveLabelmap
        ? configToUse.renderFill
        : configToUse.renderFillInactive;
    const renderOutline = configToUse.renderOutline;
    const outlineOpacity = isActiveLabelmap
        ? configToUse.outlineOpacity
        : configToUse.outlineOpacityInactive;
    return {
        fillAlpha,
        outlineWidth,
        renderFill,
        renderOutline,
        outlineOpacity,
    };
}
function _needsTransferFunctionUpdate(viewportId, actorUID, segmentIndex, { fillAlpha, renderFill, renderOutline, segmentColor, outlineWidth, segmentsHidden, }) {
    const cacheUID = `${viewportId}-${actorUID}-${segmentIndex}`;
    const oldConfig = labelMapConfigCache.get(cacheUID);
    if (!oldConfig) {
        labelMapConfigCache.set(cacheUID, {
            fillAlpha,
            renderFill,
            renderOutline,
            outlineWidth,
            segmentColor,
            segmentsHidden: new Set(segmentsHidden),
        });
        return {
            forceOpacityUpdate: true,
            forceColorUpdate: true,
        };
    }
    const { fillAlpha: oldFillAlpha, renderFill: oldRenderFill, renderOutline: oldRenderOutline, outlineWidth: oldOutlineWidth, segmentColor: oldSegmentColor, segmentsHidden: oldSegmentsHidden, } = oldConfig;
    const forceColorUpdate = oldSegmentColor[0] !== segmentColor[0] ||
        oldSegmentColor[1] !== segmentColor[1] ||
        oldSegmentColor[2] !== segmentColor[2];
    const forceOpacityUpdate = oldSegmentColor[3] !== segmentColor[3] ||
        oldFillAlpha !== fillAlpha ||
        oldRenderFill !== renderFill ||
        oldRenderOutline !== renderOutline ||
        oldOutlineWidth !== outlineWidth ||
        oldSegmentsHidden.has(segmentIndex) !== segmentsHidden.has(segmentIndex);
    labelMapConfigCache.set(cacheUID, {
        fillAlpha,
        renderFill,
        renderOutline,
        outlineWidth,
        segmentColor: segmentColor.slice(),
        segmentsHidden: new Set(segmentsHidden),
    });
    return {
        forceOpacityUpdate,
        forceColorUpdate,
    };
}
function _removeLabelmapFromToolGroupViewports(toolGroupId, segmentationRepresentationUID) {
    const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_6__.getToolGroup)(toolGroupId);
    if (toolGroup === undefined) {
        throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);
    }
    const { viewportsInfo } = toolGroup;
    for (const viewportInfo of viewportsInfo) {
        const { viewportId, renderingEngineId } = viewportInfo;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getEnabledElementByIds)(viewportId, renderingEngineId);
        (0,_removeLabelmapFromElement__WEBPACK_IMPORTED_MODULE_8__["default"])(enabledElement.viewport.element, segmentationRepresentationUID);
    }
}
async function _addLabelmapToViewport(viewport, volumeId, segmentationRepresentationUID) {
    await (0,_addLabelmapToElement__WEBPACK_IMPORTED_MODULE_7__["default"])(viewport.element, volumeId, segmentationRepresentationUID);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    render,
    addSegmentationRepresentation,
    removeSegmentationRepresentation,
});
//# sourceMappingURL=labelmapDisplay.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/removeLabelmapFromElement.js":
/*!********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/removeLabelmapFromElement.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function removeLabelmapFromElement(element, segmentationRepresentationUID, removeFromCache = false) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport } = enabledElement;
    viewport.removeVolumeActors([
        segmentationRepresentationUID,
    ]);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (removeLabelmapFromElement);
//# sourceMappingURL=removeLabelmapFromElement.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/validateRepresentationData.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/validateRepresentationData.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function validate(segmentationInput) {
    if (!segmentationInput.representation.data) {
        throw new Error('The segmentationInput.representationData.data is undefined, please provide a valid representationData.data');
    }
    const representationData = segmentationInput.representation
        .data;
    if (!representationData.volumeId) {
        throw new Error('The segmentationInput.representationData.volumeId is undefined, please provide a valid representationData.volumeId');
    }
    const cachedVolume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(representationData.volumeId);
    if (!cachedVolume) {
        throw new Error(`volumeId of ${representationData.volumeId} not found in cache, you should load and cache volume before adding segmentation`);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);
//# sourceMappingURL=validateRepresentationData.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/SegmentationDisplayTool.js":
/*!*********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/SegmentationDisplayTool.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums/SegmentationRepresentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js");
/* harmony import */ var _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stateManagement/segmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js");
/* harmony import */ var _stateManagement_segmentation_config_segmentationVisibility__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement/segmentation/config/segmentationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationVisibility.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _Contour__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Contour */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/index.js");
/* harmony import */ var _Labelmap__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Labelmap */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/index.js");









class SegmentationDisplayTool extends _base__WEBPACK_IMPORTED_MODULE_6__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        configuration: {},
    }) {
        super(toolProps, defaultToolProps);
        this.renderSegmentation = (toolGroupId) => {
            const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_5__.getToolGroup)(toolGroupId);
            if (!toolGroup) {
                return;
            }
            const toolGroupSegmentationRepresentations = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_4__.getSegmentationRepresentations)(toolGroupId);
            if (!toolGroupSegmentationRepresentations ||
                toolGroupSegmentationRepresentations.length === 0) {
                return;
            }
            const toolGroupViewports = toolGroup.viewportsInfo.map(({ renderingEngineId, viewportId }) => {
                const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElementByIds)(viewportId, renderingEngineId);
                if (enabledElement) {
                    return enabledElement.viewport;
                }
            });
            const segmentationRenderList = toolGroupSegmentationRepresentations.map((representation) => {
                const config = this._getMergedRepresentationsConfig(toolGroupId);
                const viewportsRenderList = [];
                for (const viewport of toolGroupViewports) {
                    if (representation.type == _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_1__["default"].Labelmap) {
                        viewportsRenderList.push(_Labelmap__WEBPACK_IMPORTED_MODULE_8__.labelmapDisplay.render(viewport, representation, config));
                    }
                    else if (representation.type == _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_1__["default"].Contour) {
                        viewportsRenderList.push(_Contour__WEBPACK_IMPORTED_MODULE_7__.contourDisplay.render(viewport, representation, config));
                    }
                }
                return viewportsRenderList;
            });
            Promise.allSettled(segmentationRenderList).then(() => {
                toolGroupViewports.forEach((viewport) => {
                    viewport.render();
                });
            });
        };
    }
    onSetToolEnabled() {
        const toolGroupId = this.toolGroupId;
        const toolGroupSegmentationRepresentations = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_4__.getSegmentationRepresentations)(toolGroupId);
        if (!toolGroupSegmentationRepresentations ||
            toolGroupSegmentationRepresentations.length === 0) {
            return;
        }
        toolGroupSegmentationRepresentations.forEach((segmentationRepresentation) => {
            (0,_stateManagement_segmentation_config_segmentationVisibility__WEBPACK_IMPORTED_MODULE_3__.setSegmentationVisibility)(toolGroupId, segmentationRepresentation.segmentationRepresentationUID, true);
        });
    }
    onSetToolDisabled() {
        const toolGroupId = this.toolGroupId;
        const toolGroupSegmentationRepresentations = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_4__.getSegmentationRepresentations)(toolGroupId);
        if (!toolGroupSegmentationRepresentations ||
            toolGroupSegmentationRepresentations.length === 0) {
            return;
        }
        toolGroupSegmentationRepresentations.forEach((segmentationRepresentation) => {
            (0,_stateManagement_segmentation_config_segmentationVisibility__WEBPACK_IMPORTED_MODULE_3__.setSegmentationVisibility)(toolGroupId, segmentationRepresentation.segmentationRepresentationUID, false);
        });
    }
    _getMergedRepresentationsConfig(toolGroupId) {
        const toolGroupConfig = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_2__.config.getToolGroupSpecificConfig(toolGroupId);
        const globalConfig = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_2__.config.getGlobalConfig();
        const mergedConfig = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.deepMerge(globalConfig, toolGroupConfig);
        return mergedConfig;
    }
}
SegmentationDisplayTool.toolName = 'SegmentationDisplay';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SegmentationDisplayTool);
//# sourceMappingURL=SegmentationDisplayTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/index.js":
/*!**************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AngleTool: () => (/* reexport safe */ _annotation_AngleTool__WEBPACK_IMPORTED_MODULE_22__["default"]),
/* harmony export */   AnnotationTool: () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.AnnotationTool),
/* harmony export */   ArrowAnnotateTool: () => (/* reexport safe */ _annotation_ArrowAnnotateTool__WEBPACK_IMPORTED_MODULE_21__["default"]),
/* harmony export */   BaseTool: () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.BaseTool),
/* harmony export */   BidirectionalTool: () => (/* reexport safe */ _annotation_BidirectionalTool__WEBPACK_IMPORTED_MODULE_13__["default"]),
/* harmony export */   BrushTool: () => (/* reexport safe */ _segmentation_BrushTool__WEBPACK_IMPORTED_MODULE_32__["default"]),
/* harmony export */   CircleROITool: () => (/* reexport safe */ _annotation_CircleROITool__WEBPACK_IMPORTED_MODULE_19__["default"]),
/* harmony export */   CircleScissorsTool: () => (/* reexport safe */ _segmentation_CircleScissorsTool__WEBPACK_IMPORTED_MODULE_28__["default"]),
/* harmony export */   CobbAngleTool: () => (/* reexport safe */ _annotation_CobbAngleTool__WEBPACK_IMPORTED_MODULE_23__["default"]),
/* harmony export */   CrosshairsTool: () => (/* reexport safe */ _CrosshairsTool__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   DragProbeTool: () => (/* reexport safe */ _annotation_DragProbeTool__WEBPACK_IMPORTED_MODULE_16__["default"]),
/* harmony export */   EllipticalROITool: () => (/* reexport safe */ _annotation_EllipticalROITool__WEBPACK_IMPORTED_MODULE_18__["default"]),
/* harmony export */   LengthTool: () => (/* reexport safe */ _annotation_LengthTool__WEBPACK_IMPORTED_MODULE_14__["default"]),
/* harmony export */   MIPJumpToClickTool: () => (/* reexport safe */ _MIPJumpToClickTool__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   MagnifyTool: () => (/* reexport safe */ _MagnifyTool__WEBPACK_IMPORTED_MODULE_11__["default"]),
/* harmony export */   PaintFillTool: () => (/* reexport safe */ _segmentation_PaintFillTool__WEBPACK_IMPORTED_MODULE_33__["default"]),
/* harmony export */   PanTool: () => (/* reexport safe */ _PanTool__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   PlanarFreehandROITool: () => (/* reexport safe */ _annotation_PlanarFreehandROITool__WEBPACK_IMPORTED_MODULE_20__["default"]),
/* harmony export */   PlanarRotateTool: () => (/* reexport safe */ _PlanarRotateTool__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   ProbeTool: () => (/* reexport safe */ _annotation_ProbeTool__WEBPACK_IMPORTED_MODULE_15__["default"]),
/* harmony export */   RectangleROIStartEndThresholdTool: () => (/* reexport safe */ _segmentation_RectangleROIStartEndThresholdTool__WEBPACK_IMPORTED_MODULE_31__["default"]),
/* harmony export */   RectangleROIThresholdTool: () => (/* reexport safe */ _segmentation_RectangleROIThresholdTool__WEBPACK_IMPORTED_MODULE_30__["default"]),
/* harmony export */   RectangleROITool: () => (/* reexport safe */ _annotation_RectangleROITool__WEBPACK_IMPORTED_MODULE_17__["default"]),
/* harmony export */   RectangleScissorsTool: () => (/* reexport safe */ _segmentation_RectangleScissorsTool__WEBPACK_IMPORTED_MODULE_27__["default"]),
/* harmony export */   ReferenceCursors: () => (/* reexport safe */ _ReferenceCursors__WEBPACK_IMPORTED_MODULE_24__["default"]),
/* harmony export */   ReferenceLines: () => (/* reexport safe */ _ReferenceLinesTool__WEBPACK_IMPORTED_MODULE_12__["default"]),
/* harmony export */   ReferenceLinesTool: () => (/* reexport safe */ _ReferenceLinesTool__WEBPACK_IMPORTED_MODULE_12__["default"]),
/* harmony export */   ScaleOverlayTool: () => (/* reexport safe */ _ScaleOverlayTool__WEBPACK_IMPORTED_MODULE_25__["default"]),
/* harmony export */   SegmentationDisplayTool: () => (/* reexport safe */ _displayTools_SegmentationDisplayTool__WEBPACK_IMPORTED_MODULE_26__["default"]),
/* harmony export */   SphereScissorsTool: () => (/* reexport safe */ _segmentation_SphereScissorsTool__WEBPACK_IMPORTED_MODULE_29__["default"]),
/* harmony export */   StackScrollMouseWheelTool: () => (/* reexport safe */ _StackScrollToolMouseWheelTool__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   StackScrollTool: () => (/* reexport safe */ _StackScrollTool__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   TrackballRotateTool: () => (/* reexport safe */ _TrackballRotateTool__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   VolumeRotateMouseWheelTool: () => (/* reexport safe */ _VolumeRotateMouseWheelTool__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   WindowLevelTool: () => (/* reexport safe */ _WindowLevelTool__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   ZoomTool: () => (/* reexport safe */ _ZoomTool__WEBPACK_IMPORTED_MODULE_7__["default"])
/* harmony export */ });
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _PanTool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PanTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js");
/* harmony import */ var _TrackballRotateTool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TrackballRotateTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js");
/* harmony import */ var _WindowLevelTool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WindowLevelTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js");
/* harmony import */ var _StackScrollTool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./StackScrollTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js");
/* harmony import */ var _PlanarRotateTool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./PlanarRotateTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js");
/* harmony import */ var _StackScrollToolMouseWheelTool__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StackScrollToolMouseWheelTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollToolMouseWheelTool.js");
/* harmony import */ var _ZoomTool__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ZoomTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js");
/* harmony import */ var _VolumeRotateMouseWheelTool__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./VolumeRotateMouseWheelTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateMouseWheelTool.js");
/* harmony import */ var _MIPJumpToClickTool__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./MIPJumpToClickTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js");
/* harmony import */ var _CrosshairsTool__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./CrosshairsTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js");
/* harmony import */ var _MagnifyTool__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./MagnifyTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js");
/* harmony import */ var _ReferenceLinesTool__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ReferenceLinesTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js");
/* harmony import */ var _annotation_BidirectionalTool__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./annotation/BidirectionalTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js");
/* harmony import */ var _annotation_LengthTool__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./annotation/LengthTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js");
/* harmony import */ var _annotation_ProbeTool__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./annotation/ProbeTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js");
/* harmony import */ var _annotation_DragProbeTool__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./annotation/DragProbeTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js");
/* harmony import */ var _annotation_RectangleROITool__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./annotation/RectangleROITool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js");
/* harmony import */ var _annotation_EllipticalROITool__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./annotation/EllipticalROITool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js");
/* harmony import */ var _annotation_CircleROITool__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./annotation/CircleROITool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js");
/* harmony import */ var _annotation_PlanarFreehandROITool__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./annotation/PlanarFreehandROITool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandROITool.js");
/* harmony import */ var _annotation_ArrowAnnotateTool__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./annotation/ArrowAnnotateTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js");
/* harmony import */ var _annotation_AngleTool__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./annotation/AngleTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js");
/* harmony import */ var _annotation_CobbAngleTool__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./annotation/CobbAngleTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js");
/* harmony import */ var _ReferenceCursors__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./ReferenceCursors */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js");
/* harmony import */ var _ScaleOverlayTool__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./ScaleOverlayTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js");
/* harmony import */ var _displayTools_SegmentationDisplayTool__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./displayTools/SegmentationDisplayTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/SegmentationDisplayTool.js");
/* harmony import */ var _segmentation_RectangleScissorsTool__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./segmentation/RectangleScissorsTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js");
/* harmony import */ var _segmentation_CircleScissorsTool__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./segmentation/CircleScissorsTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js");
/* harmony import */ var _segmentation_SphereScissorsTool__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./segmentation/SphereScissorsTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js");
/* harmony import */ var _segmentation_RectangleROIThresholdTool__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./segmentation/RectangleROIThresholdTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIThresholdTool.js");
/* harmony import */ var _segmentation_RectangleROIStartEndThresholdTool__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./segmentation/RectangleROIStartEndThresholdTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIStartEndThresholdTool.js");
/* harmony import */ var _segmentation_BrushTool__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./segmentation/BrushTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js");
/* harmony import */ var _segmentation_PaintFillTool__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./segmentation/PaintFillTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js");




































//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js":
/*!*******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _strategies_fillSphere__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strategies/fillSphere */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillSphere.js");
/* harmony import */ var _strategies_eraseSphere__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./strategies/eraseSphere */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseSphere.js");
/* harmony import */ var _strategies_fillCircle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./strategies/fillCircle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js");
/* harmony import */ var _strategies_eraseCircle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./strategies/eraseCircle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseCircle.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../stateManagement/segmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js");











class BrushTool extends _base__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            strategies: {
                FILL_INSIDE_CIRCLE: _strategies_fillCircle__WEBPACK_IMPORTED_MODULE_4__.fillInsideCircle,
                THRESHOLD_INSIDE_CIRCLE: _strategies_fillCircle__WEBPACK_IMPORTED_MODULE_4__.thresholdInsideCircle,
                ERASE_INSIDE_CIRCLE: _strategies_eraseCircle__WEBPACK_IMPORTED_MODULE_5__.eraseInsideCircle,
                FILL_INSIDE_SPHERE: _strategies_fillSphere__WEBPACK_IMPORTED_MODULE_2__.fillInsideSphere,
                ERASE_INSIDE_SPHERE: _strategies_eraseSphere__WEBPACK_IMPORTED_MODULE_3__.eraseInsideSphere,
            },
            strategySpecificConfiguration: {
                THRESHOLD_INSIDE_CIRCLE: {
                    threshold: [-150, -70],
                },
            },
            defaultStrategy: 'FILL_INSIDE_CIRCLE',
            activeStrategy: 'FILL_INSIDE_CIRCLE',
            brushSize: 25,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.onSetToolPassive = () => {
            this.disableCursor();
        };
        this.onSetToolEnabled = () => {
            this.disableCursor();
        };
        this.onSetToolDisabled = () => {
            this.disableCursor();
        };
        this.preMouseDownCallback = (evt) => {
            const eventData = evt.detail;
            const { element } = eventData;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
                throw new Error('Not implemented yet');
            }
            const toolGroupId = this.toolGroupId;
            const activeSegmentationRepresentation = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_10__.activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);
            if (!activeSegmentationRepresentation) {
                throw new Error('No active segmentation detected, create one before using the brush tool');
            }
            const { segmentationId, type } = activeSegmentationRepresentation;
            const segmentsLocked = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_10__.segmentLocking.getLockedSegments(segmentationId);
            const { representationData } = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_10__.state.getSegmentation(segmentationId);
            const { volumeId } = representationData[type];
            const segmentation = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(volumeId);
            const actors = viewport.getActors();
            const firstVolumeActorUID = actors[0].uid;
            const imageVolume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(firstVolumeActorUID);
            const viewportIdsToRender = [viewport.id];
            this._editData = {
                segmentation,
                imageVolume,
                segmentsLocked,
            };
            this._activateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_8__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__["default"])(renderingEngine, viewportIdsToRender);
            return true;
        };
        this.mouseMoveCallback = (evt) => {
            if (this.mode === _enums__WEBPACK_IMPORTED_MODULE_6__.ToolModes.Active) {
                this.updateCursor(evt);
            }
        };
        this._dragCallback = (evt) => {
            const eventData = evt.detail;
            const { element } = eventData;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { renderingEngine } = enabledElement;
            const { imageVolume, segmentation, segmentsLocked } = this._editData;
            this.updateCursor(evt);
            const { segmentIndex, segmentationId, segmentationRepresentationUID, brushCursor, viewportIdsToRender, } = this._hoverData;
            const { data } = brushCursor;
            const { viewPlaneNormal, viewUp } = brushCursor.metadata;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__["default"])(renderingEngine, viewportIdsToRender);
            const operationData = {
                points: data.handles.points,
                volume: segmentation,
                imageVolume,
                segmentIndex,
                segmentsLocked,
                viewPlaneNormal,
                toolGroupId: this.toolGroupId,
                segmentationId,
                segmentationRepresentationUID,
                viewUp,
                strategySpecificConfiguration: this.configuration.strategySpecificConfiguration,
            };
            this.applyActiveStrategy(enabledElement, operationData);
        };
        this._endCallback = (evt) => {
            const eventData = evt.detail;
            const { element } = eventData;
            const { imageVolume, segmentation, segmentsLocked } = this._editData;
            const { segmentIndex, segmentationId, segmentationRepresentationUID, brushCursor, } = this._hoverData;
            const { data } = brushCursor;
            const { viewPlaneNormal, viewUp } = brushCursor.metadata;
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_8__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            this._editData = null;
            this.updateCursor(evt);
            if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
                throw new Error('Not implemented yet');
            }
            const operationData = {
                points: data.handles.points,
                volume: segmentation,
                imageVolume,
                segmentIndex,
                segmentsLocked,
                viewPlaneNormal,
                toolGroupId: this.toolGroupId,
                segmentationId,
                segmentationRepresentationUID,
                viewUp,
                strategySpecificConfiguration: this.configuration.strategySpecificConfiguration,
            };
            this.applyActiveStrategy(enabledElement, operationData);
        };
        this._activateDraw = (element) => {
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_CLICK, this._endCallback);
        };
        this._deactivateDraw = (element) => {
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_6__.Events.MOUSE_CLICK, this._endCallback);
        };
    }
    disableCursor() {
        this._hoverData = undefined;
    }
    updateCursor(evt) {
        const eventData = evt.detail;
        const { element } = eventData;
        const { currentPoints } = eventData;
        const centerCanvas = currentPoints.canvas;
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
        const { renderingEngine, viewport } = enabledElement;
        const camera = viewport.getCamera();
        const { viewPlaneNormal, viewUp } = camera;
        const toolGroupId = this.toolGroupId;
        const activeSegmentationRepresentation = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_10__.activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);
        if (!activeSegmentationRepresentation) {
            console.warn('No active segmentation detected, create one before using the brush tool');
            return;
        }
        const { segmentationRepresentationUID, segmentationId } = activeSegmentationRepresentation;
        const segmentIndex = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_10__.segmentIndex.getActiveSegmentIndex(segmentationId);
        const segmentColor = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_10__.config.color.getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex);
        const viewportIdsToRender = [viewport.id];
        const brushCursor = {
            metadata: {
                viewPlaneNormal: [...viewPlaneNormal],
                viewUp: [...viewUp],
                FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),
                referencedImageId: '',
                toolName: this.getToolName(),
                segmentColor,
            },
            data: {},
        };
        this._hoverData = {
            brushCursor,
            centerCanvas,
            segmentIndex,
            segmentationId,
            segmentationRepresentationUID,
            segmentColor,
            viewportIdsToRender,
        };
        this._calculateCursor(element, centerCanvas);
        (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_9__["default"])(renderingEngine, viewportIdsToRender);
    }
    _calculateCursor(element, centerCanvas) {
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
        const { viewport } = enabledElement;
        const { canvasToWorld } = viewport;
        const { brushSize } = this.configuration;
        const radius = brushSize;
        const bottomCanvas = [
            centerCanvas[0],
            centerCanvas[1] + radius,
        ];
        const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];
        const leftCanvas = [
            centerCanvas[0] - radius,
            centerCanvas[1],
        ];
        const rightCanvas = [
            centerCanvas[0] + radius,
            centerCanvas[1],
        ];
        const { brushCursor } = this._hoverData;
        const { data } = brushCursor;
        if (data.handles === undefined) {
            data.handles = {};
        }
        data.handles.points = [
            canvasToWorld(bottomCanvas),
            canvasToWorld(topCanvas),
            canvasToWorld(leftCanvas),
            canvasToWorld(rightCanvas),
        ];
        data.invalidated = false;
    }
    invalidateBrushCursor() {
        if (this._hoverData !== undefined) {
            const { data } = this._hoverData.brushCursor;
            data.invalidated = true;
        }
    }
    renderAnnotation(enabledElement, svgDrawingHelper) {
        if (!this._hoverData) {
            return;
        }
        const { viewport } = enabledElement;
        const viewportIdsToRender = this._hoverData.viewportIdsToRender;
        if (!viewportIdsToRender.includes(viewport.id)) {
            return;
        }
        const brushCursor = this._hoverData.brushCursor;
        if (brushCursor.data.invalidated === true) {
            const { centerCanvas } = this._hoverData;
            const { element } = viewport;
            this._calculateCursor(element, centerCanvas);
        }
        const toolMetadata = brushCursor.metadata;
        const annotationUID = toolMetadata.brushCursorUID;
        const data = brushCursor.data;
        const { points } = data.handles;
        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
        const bottom = canvasCoordinates[0];
        const top = canvasCoordinates[1];
        const center = [
            Math.floor((bottom[0] + top[0]) / 2),
            Math.floor((bottom[1] + top[1]) / 2),
        ];
        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));
        const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;
        if (!viewport.getRenderingEngine()) {
            console.warn('Rendering Engine has been destroyed');
            return;
        }
        const circleUID = '0';
        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_7__.drawCircle)(svgDrawingHelper, annotationUID, circleUID, center, radius, {
            color,
        });
    }
}
BrushTool.toolName = 'Brush';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BrushTool);
//# sourceMappingURL=BrushTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js":
/*!****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _strategies_fillCircle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strategies/fillCircle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../stateManagement/segmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");









class CircleScissorsTool extends _base__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            strategies: {
                FILL_INSIDE: _strategies_fillCircle__WEBPACK_IMPORTED_MODULE_2__.fillInsideCircle,
            },
            defaultStrategy: 'FILL_INSIDE',
            activeStrategy: 'FILL_INSIDE',
        },
    }) {
        super(toolProps, defaultToolProps);
        this.preMouseDownCallback = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const canvasPos = currentPoints.canvas;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const toolGroupId = this.toolGroupId;
            const activeSegmentationRepresentation = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_7__.activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);
            if (!activeSegmentationRepresentation) {
                throw new Error('No active segmentation detected, create one before using scissors tool');
            }
            const { segmentationRepresentationUID, segmentationId, type } = activeSegmentationRepresentation;
            const segmentIndex = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_7__.segmentIndex.getActiveSegmentIndex(segmentationId);
            const segmentsLocked = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_7__.segmentLocking.getLockedSegments(segmentationId);
            const segmentColor = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_7__.config.color.getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex);
            const { representationData } = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_8__.getSegmentation)(segmentationId);
            const { volumeId } = representationData[type];
            const segmentation = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(volumeId);
            const annotation = {
                invalidated: true,
                highlighted: true,
                metadata: {
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),
                    referencedImageId: '',
                    toolName: this.getToolName(),
                    segmentColor,
                },
                data: {
                    handles: {
                        points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],
                        activeHandleIndex: null,
                    },
                    isDrawing: true,
                    cachedStats: {},
                },
            };
            const viewportIdsToRender = [viewport.id];
            this.editData = {
                annotation,
                segmentation,
                centerCanvas: canvasPos,
                segmentIndex,
                segmentationId,
                segmentsLocked,
                segmentColor,
                viewportIdsToRender,
                handleIndex: 3,
                movingTextBox: false,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_5__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__["default"])(renderingEngine, viewportIdsToRender);
            return true;
        };
        this._dragCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { currentPoints } = eventDetail;
            const currentCanvasPoints = currentPoints.canvas;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { renderingEngine, viewport } = enabledElement;
            const { canvasToWorld } = viewport;
            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;
            const { data } = annotation;
            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);
            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);
            const radius = Math.sqrt(dX * dX + dY * dY);
            const bottomCanvas = [
                centerCanvas[0],
                centerCanvas[1] + radius,
            ];
            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];
            const leftCanvas = [
                centerCanvas[0] - radius,
                centerCanvas[1],
            ];
            const rightCanvas = [
                centerCanvas[0] + radius,
                centerCanvas[1],
            ];
            data.handles.points = [
                canvasToWorld(bottomCanvas),
                canvasToWorld(topCanvas),
                canvasToWorld(leftCanvas),
                canvasToWorld(rightCanvas),
            ];
            annotation.invalidated = true;
            this.editData.hasMoved = true;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__["default"])(renderingEngine, viewportIdsToRender);
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, newAnnotation, hasMoved, segmentation, segmentIndex, segmentsLocked, segmentationId, } = this.editData;
            const { data } = annotation;
            const { viewPlaneNormal, viewUp } = annotation.metadata;
            if (newAnnotation && !hasMoved) {
                return;
            }
            data.handles.activeHandleIndex = null;
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_5__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            this.editData = null;
            this.isDrawing = false;
            if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
                throw new Error('Not implemented yet');
            }
            const operationData = {
                points: data.handles.points,
                volume: segmentation,
                segmentIndex,
                segmentsLocked,
                viewPlaneNormal,
                segmentationId,
                viewUp,
            };
            this.applyActiveStrategy(enabledElement, operationData);
        };
        this._activateDraw = (element) => {
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_TAP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_END, this._endCallback);
        };
        this._deactivateDraw = (element) => {
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_TAP, this._endCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            if (!this.editData) {
                return renderStatus;
            }
            const { viewport } = enabledElement;
            const { viewportIdsToRender } = this.editData;
            if (!viewportIdsToRender.includes(viewport.id)) {
                return renderStatus;
            }
            const { annotation } = this.editData;
            const toolMetadata = annotation.metadata;
            const annotationUID = annotation.annotationUID;
            const data = annotation.data;
            const { points } = data.handles;
            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
            const bottom = canvasCoordinates[0];
            const top = canvasCoordinates[1];
            const center = [
                Math.floor((bottom[0] + top[0]) / 2),
                Math.floor((bottom[1] + top[1]) / 2),
            ];
            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));
            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;
            if (!viewport.getRenderingEngine()) {
                console.warn('Rendering Engine has been destroyed');
                return renderStatus;
            }
            const circleUID = '0';
            (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_4__.drawCircle)(svgDrawingHelper, annotationUID, circleUID, center, radius, {
                color,
            });
            renderStatus = true;
            return renderStatus;
        };
    }
}
CircleScissorsTool.toolName = 'CircleScissor';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CircleScissorsTool);
//# sourceMappingURL=CircleScissorsTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stateManagement/segmentation/triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");
/* harmony import */ var _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement/segmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js");
/* harmony import */ var _utilities_segmentation_floodFill__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/segmentation/floodFill */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");






const { transformWorldToIndex, isEqual } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities;
class PaintFillTool extends _base__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
    }) {
        super(toolProps, defaultToolProps);
        this.preMouseDownCallback = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            const camera = viewport.getCamera();
            const { viewPlaneNormal } = camera;
            const toolGroupId = this.toolGroupId;
            const activeSegmentationRepresentation = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_3__.activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);
            if (!activeSegmentationRepresentation) {
                throw new Error('No active segmentation detected, create one before using scissors tool');
            }
            const { segmentationId, type } = activeSegmentationRepresentation;
            const segmentIndex = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_3__.segmentIndex.getActiveSegmentIndex(segmentationId);
            const segmentsLocked = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_3__.segmentLocking.getLockedSegments(segmentationId);
            const { representationData } = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_5__.getSegmentation)(segmentationId);
            const { volumeId } = representationData[type];
            const segmentation = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(volumeId);
            const { dimensions, direction } = segmentation;
            const scalarData = segmentation.getScalarData();
            const index = transformWorldToIndex(segmentation.imageData, worldPos);
            const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);
            if (fixedDimension === undefined) {
                console.warn('Oblique paint fill not yet supported');
                return;
            }
            const { floodFillGetter, getLabelValue, getScalarDataPositionFromPlane, inPlaneSeedPoint, fixedDimensionValue, } = this.generateHelpers(scalarData, dimensions, index, fixedDimension);
            if (index[0] < 0 ||
                index[0] >= dimensions[0] ||
                index[1] < 0 ||
                index[1] >= dimensions[1] ||
                index[2] < 0 ||
                index[2] >= dimensions[2]) {
                return;
            }
            const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);
            if (segmentsLocked.includes(clickedLabelValue)) {
                return;
            }
            const floodFillResult = (0,_utilities_segmentation_floodFill__WEBPACK_IMPORTED_MODULE_4__["default"])(floodFillGetter, inPlaneSeedPoint);
            const { flooded } = floodFillResult;
            flooded.forEach((index) => {
                const scalarDataPosition = getScalarDataPositionFromPlane(index[0], index[1]);
                scalarData[scalarDataPosition] = segmentIndex;
            });
            const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);
            (0,_stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_2__.triggerSegmentationDataModified)(segmentationId, framesModified);
            return true;
        };
        this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {
            const { boundaries } = floodFillResult;
            if (fixedDimension === 2) {
                return [fixedDimensionValue];
            }
            let minJ = Infinity;
            let maxJ = -Infinity;
            for (let b = 0; b < boundaries.length; b++) {
                const j = boundaries[b][1];
                if (j < minJ)
                    minJ = j;
                if (j > maxJ)
                    maxJ = j;
            }
            const framesModified = [];
            for (let frame = minJ; frame <= maxJ; frame++) {
                framesModified.push(frame);
            }
            return framesModified;
        };
        this.generateHelpers = (scalarData, dimensions, seedIndex3D, fixedDimension = 2) => {
            let fixedDimensionValue;
            let inPlaneSeedPoint;
            switch (fixedDimension) {
                case 0:
                    fixedDimensionValue = seedIndex3D[0];
                    inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];
                    break;
                case 1:
                    fixedDimensionValue = seedIndex3D[1];
                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];
                    break;
                case 2:
                    fixedDimensionValue = seedIndex3D[2];
                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];
                    break;
                default:
                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);
            }
            const getScalarDataPosition = (x, y, z) => {
                return z * dimensions[1] * dimensions[0] + y * dimensions[0] + x;
            };
            const getLabelValue = (x, y, z) => {
                return scalarData[getScalarDataPosition(x, y, z)];
            };
            const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);
            const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);
            return {
                getScalarDataPositionFromPlane,
                getLabelValue,
                floodFillGetter,
                inPlaneSeedPoint,
                fixedDimensionValue,
            };
        };
        this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {
            let floodFillGetter;
            switch (fixedDimension) {
                case 0:
                    floodFillGetter = (y, z) => {
                        if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {
                            return;
                        }
                        return getLabelValue(fixedDimensionValue, y, z);
                    };
                    break;
                case 1:
                    floodFillGetter = (x, z) => {
                        if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {
                            return;
                        }
                        return getLabelValue(x, fixedDimensionValue, z);
                    };
                    break;
                case 2:
                    floodFillGetter = (x, y) => {
                        if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {
                            return;
                        }
                        return getLabelValue(x, y, fixedDimensionValue);
                    };
                    break;
                default:
                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);
            }
            return floodFillGetter;
        };
        this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {
            let getScalarDataPositionFromPlane;
            switch (fixedDimension) {
                case 0:
                    getScalarDataPositionFromPlane = (y, z) => {
                        return getScalarDataPosition(fixedDimensionValue, y, z);
                    };
                    break;
                case 1:
                    getScalarDataPositionFromPlane = (x, z) => {
                        return getScalarDataPosition(x, fixedDimensionValue, z);
                    };
                    break;
                case 2:
                    getScalarDataPositionFromPlane = (x, y) => {
                        return getScalarDataPosition(x, y, fixedDimensionValue);
                    };
                    break;
                default:
                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);
            }
            return getScalarDataPositionFromPlane;
        };
    }
    getFixedDimension(viewPlaneNormal, direction) {
        const xDirection = direction.slice(0, 3);
        const yDirection = direction.slice(3, 6);
        const zDirection = direction.slice(6, 9);
        const absoluteOfViewPlaneNormal = [
            Math.abs(viewPlaneNormal[0]),
            Math.abs(viewPlaneNormal[1]),
            Math.abs(viewPlaneNormal[2]),
        ];
        const absoluteOfXDirection = [
            Math.abs(xDirection[0]),
            Math.abs(xDirection[1]),
            Math.abs(xDirection[2]),
        ];
        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {
            return 0;
        }
        const absoluteOfYDirection = [
            Math.abs(yDirection[0]),
            Math.abs(yDirection[1]),
            Math.abs(yDirection[2]),
        ];
        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {
            return 1;
        }
        const absoluteOfZDirection = [
            Math.abs(zDirection[0]),
            Math.abs(zDirection[1]),
            Math.abs(zDirection[2]),
        ];
        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {
            return 2;
        }
    }
}
PaintFillTool.toolName = 'PaintFill';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PaintFillTool);
//# sourceMappingURL=PaintFillTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIStartEndThresholdTool.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIStartEndThresholdTool.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _stateManagement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stateManagement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/index.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _utilities_throttle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/throttle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js");
/* harmony import */ var _stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _annotation_RectangleROITool__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../annotation/RectangleROITool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js");












const { transformWorldToIndex } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities;
class RectangleROIStartEndThresholdTool extends _annotation_RectangleROITool__WEBPACK_IMPORTED_MODULE_11__["default"] {
    constructor(toolProps = {}, defaultToolProps = {
        configuration: {
            numSlicesToPropagate: 10,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.addNewAnnotation = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            let referencedImageId, imageVolume, volumeId;
            if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
                throw new Error('Stack Viewport Not implemented');
            }
            else {
                const targetId = this.getTargetId(viewport);
                volumeId = targetId.split('volumeId:')[1];
                imageVolume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(volumeId);
                referencedImageId = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);
            }
            if (!referencedImageId) {
                throw new Error('This tool does not work on non-acquisition planes');
            }
            const startIndex = viewport.getCurrentImageIdIndex();
            const spacingInNormal = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);
            const endIndex = this._getEndSliceIndex(imageVolume, worldPos, spacingInNormal, viewPlaneNormal);
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                highlighted: true,
                invalidated: true,
                metadata: {
                    viewPlaneNormal: [...viewPlaneNormal],
                    enabledElement,
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                    toolName: this.getToolName(),
                    volumeId,
                    spacingInNormal,
                },
                data: {
                    label: '',
                    startSlice: startIndex,
                    endSlice: endIndex,
                    cachedStats: {
                        projectionPoints: [],
                        projectionPointsImageIds: [referencedImageId],
                    },
                    handles: {
                        textBox: {
                            hasMoved: false,
                            worldPosition: null,
                            worldBoundingBox: null,
                        },
                        points: [
                            [...worldPos],
                            [...worldPos],
                            [...worldPos],
                            [...worldPos],
                        ],
                        activeHandleIndex: null,
                    },
                    labelmapUID: null,
                },
            };
            this._computeProjectionPoints(annotation, imageVolume);
            (0,_stateManagement__WEBPACK_IMPORTED_MODULE_3__.addAnnotation)(annotation, element);
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_6__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                handleIndex: 3,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_9__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_10__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport } = enabledElement;
            const annotations = (0,_stateManagement__WEBPACK_IMPORTED_MODULE_3__.getAnnotations)(this.getToolName(), viewport.element);
            if (!annotations?.length) {
                return renderStatus;
            }
            const sliceIndex = viewport.getCurrentImageIdIndex();
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const { annotationUID, data } = annotation;
                const { startSlice, endSlice } = data;
                const { points, activeHandleIndex } = data.handles;
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                styleSpecifier.annotationUID = annotationUID;
                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
                const color = this.getStyle('color', styleSpecifier, annotation);
                if (sliceIndex < Math.min(startSlice, endSlice) ||
                    sliceIndex > Math.max(startSlice, endSlice)) {
                    continue;
                }
                if (annotation.invalidated) {
                    this._throttledCalculateCachedStats(annotation, enabledElement);
                }
                let firstOrLastSlice = false;
                if (sliceIndex === startSlice || sliceIndex === endSlice) {
                    firstOrLastSlice = true;
                }
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                let activeHandleCanvasCoords;
                if (!(0,_stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_8__.isAnnotationVisible)(annotationUID)) {
                    continue;
                }
                if (!(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_4__.isAnnotationLocked)(annotation) &&
                    !this.editData &&
                    activeHandleIndex !== null &&
                    firstOrLastSlice) {
                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
                }
                if (activeHandleCanvasCoords) {
                    const handleGroupUID = '0';
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_5__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
                        color,
                    });
                }
                let lineDashToUse = lineDash;
                if (!firstOrLastSlice) {
                    lineDashToUse = 2;
                }
                const rectangleUID = '0';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_5__.drawRect)(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {
                    color,
                    lineDash: lineDashToUse,
                    lineWidth,
                });
                renderStatus = true;
            }
            return renderStatus;
        };
        this._throttledCalculateCachedStats = (0,_utilities_throttle__WEBPACK_IMPORTED_MODULE_7__["default"])(this._calculateCachedStatsTool, 100, { trailing: true });
    }
    _computeProjectionPoints(annotation, imageVolume) {
        const { data, metadata } = annotation;
        const { viewPlaneNormal, spacingInNormal } = metadata;
        const { imageData } = imageVolume;
        const { startSlice, endSlice } = data;
        const { points } = data.handles;
        const startIJK = transformWorldToIndex(imageData, points[0]);
        if (startIJK[2] !== startSlice) {
            throw new Error('Start slice does not match');
        }
        const endIJK = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.fromValues(startIJK[0], startIJK[1], endSlice);
        const startWorld = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create();
        imageData.indexToWorldVec3(startIJK, startWorld);
        const endWorld = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create();
        imageData.indexToWorldVec3(endIJK, endWorld);
        const distance = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.distance(startWorld, endWorld);
        const newProjectionPoints = [];
        for (let dist = 0; dist < distance; dist += spacingInNormal) {
            newProjectionPoints.push(points.map((point) => {
                const newPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create();
                gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);
                return Array.from(newPoint);
            }));
        }
        data.cachedStats.projectionPoints = newProjectionPoints;
        const projectionPointsImageIds = [];
        for (const RectanglePoints of newProjectionPoints) {
            const imageId = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getClosestImageId(imageVolume, RectanglePoints[0], viewPlaneNormal);
            projectionPointsImageIds.push(imageId);
        }
        data.cachedStats.projectionPointsImageIds = projectionPointsImageIds;
    }
    _calculateCachedStatsTool(annotation, enabledElement) {
        const data = annotation.data;
        const { viewportId, renderingEngineId, viewport } = enabledElement;
        const { cachedStats } = data;
        const volumeId = this.getTargetId(viewport);
        const imageVolume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(volumeId.split('volumeId:')[1]);
        this._computeProjectionPoints(annotation, imageVolume);
        annotation.invalidated = false;
        const eventType = _enums__WEBPACK_IMPORTED_MODULE_2__.Events.ANNOTATION_MODIFIED;
        const eventDetail = {
            annotation,
            viewportId,
            renderingEngineId,
        };
        (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, eventType, eventDetail);
        return cachedStats;
    }
    _getEndSliceIndex(imageVolume, worldPos, spacingInNormal, viewPlaneNormal) {
        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;
        const endPos = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create();
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagate * spacingInNormal);
        const halfSpacingInNormalDirection = spacingInNormal / 2;
        const { imageIds } = imageVolume;
        let imageIdIndex;
        for (let i = 0; i < imageIds.length; i++) {
            const imageId = imageIds[i];
            const { imagePositionPatient } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.metaData.get('imagePlaneModule', imageId);
            const dir = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create();
            gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.sub(dir, endPos, imagePositionPatient);
            const dot = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(dir, viewPlaneNormal);
            if (Math.abs(dot) < halfSpacingInNormalDirection) {
                imageIdIndex = i;
            }
        }
        return imageIdIndex;
    }
}
RectangleROIStartEndThresholdTool.toolName = 'RectangleROIStartEndThreshold';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RectangleROIStartEndThresholdTool);
//# sourceMappingURL=RectangleROIStartEndThresholdTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIThresholdTool.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIThresholdTool.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _stateManagement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../stateManagement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/index.js");
/* harmony import */ var _stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationLocking */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationLocking.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../stateManagement/annotation/annotationVisibility */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationVisibility.js");
/* harmony import */ var _annotation_RectangleROITool__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../annotation/RectangleROITool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js");










class RectangleROIThresholdTool extends _annotation_RectangleROITool__WEBPACK_IMPORTED_MODULE_9__["default"] {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            shadow: true,
            preventHandleOutsideImage: false,
        },
    }) {
        super(toolProps, defaultToolProps);
        this.addNewAnnotation = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const targetId = this.getTargetId(viewport);
            let referencedImageId, volumeId;
            if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
                referencedImageId = targetId.split('imageId:')[1];
            }
            else {
                volumeId = targetId.split('volumeId:')[1];
                const imageVolume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(volumeId);
                referencedImageId = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);
            }
            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();
            const annotation = {
                highlighted: true,
                invalidated: true,
                metadata: {
                    viewPlaneNormal: [...viewPlaneNormal],
                    enabledElement,
                    viewUp: [...viewUp],
                    FrameOfReferenceUID,
                    referencedImageId,
                    toolName: this.getToolName(),
                    volumeId,
                },
                data: {
                    label: '',
                    handles: {
                        textBox: {
                            hasMoved: false,
                            worldPosition: null,
                            worldBoundingBox: null,
                        },
                        points: [
                            [...worldPos],
                            [...worldPos],
                            [...worldPos],
                            [...worldPos],
                        ],
                        activeHandleIndex: null,
                    },
                    segmentationId: null,
                },
            };
            (0,_stateManagement__WEBPACK_IMPORTED_MODULE_1__.addAnnotation)(annotation, element);
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_5__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                viewportIdsToRender,
                handleIndex: 3,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_6__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_7__["default"])(renderingEngine, viewportIdsToRender);
            return annotation;
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            const { viewport, renderingEngineId } = enabledElement;
            const { element } = viewport;
            let annotations = (0,_stateManagement__WEBPACK_IMPORTED_MODULE_1__.getAnnotations)(this.getToolName(), element);
            if (!annotations?.length) {
                return renderStatus;
            }
            annotations = this.filterInteractableAnnotationsForElement(element, annotations);
            if (!annotations?.length) {
                return renderStatus;
            }
            const styleSpecifier = {
                toolGroupId: this.toolGroupId,
                toolName: this.getToolName(),
                viewportId: enabledElement.viewport.id,
            };
            for (let i = 0; i < annotations.length; i++) {
                const annotation = annotations[i];
                const { annotationUID, data } = annotation;
                const { points, activeHandleIndex } = data.handles;
                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
                styleSpecifier.annotationUID = annotationUID;
                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);
                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);
                const color = this.getStyle('color', styleSpecifier, annotation);
                if (!viewport.getRenderingEngine()) {
                    console.warn('Rendering Engine has been destroyed');
                    return renderStatus;
                }
                const eventType = _enums__WEBPACK_IMPORTED_MODULE_3__.Events.ANNOTATION_MODIFIED;
                const eventDetail = {
                    annotation,
                    viewportId: viewport.id,
                    renderingEngineId,
                };
                (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, eventType, eventDetail);
                let activeHandleCanvasCoords;
                if (!(0,_stateManagement_annotation_annotationVisibility__WEBPACK_IMPORTED_MODULE_8__.isAnnotationVisible)(annotationUID)) {
                    continue;
                }
                if (!(0,_stateManagement_annotation_annotationLocking__WEBPACK_IMPORTED_MODULE_2__.isAnnotationLocked)(annotation) &&
                    !this.editData &&
                    activeHandleIndex !== null) {
                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];
                }
                if (activeHandleCanvasCoords) {
                    const handleGroupUID = '0';
                    (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_4__.drawHandles)(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {
                        color,
                    });
                }
                const rectangleUID = '0';
                (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_4__.drawRect)(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {
                    color,
                    lineDash,
                    lineWidth,
                });
                renderStatus = true;
            }
            return renderStatus;
        };
    }
}
RectangleROIThresholdTool.toolName = 'RectangleROIThreshold';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RectangleROIThresholdTool);
//# sourceMappingURL=RectangleROIThresholdTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js":
/*!*******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _strategies_fillRectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strategies/fillRectangle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js");
/* harmony import */ var _strategies_eraseRectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./strategies/eraseRectangle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseRectangle.js");
/* harmony import */ var _utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utilities/viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../stateManagement/segmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");











class RectangleScissorsTool extends _base__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            strategies: {
                FILL_INSIDE: _strategies_fillRectangle__WEBPACK_IMPORTED_MODULE_2__.fillInsideRectangle,
                ERASE_INSIDE: _strategies_eraseRectangle__WEBPACK_IMPORTED_MODULE_3__.eraseInsideRectangle,
            },
            defaultStrategy: 'FILL_INSIDE',
            activeStrategy: 'FILL_INSIDE',
        },
    }) {
        super(toolProps, defaultToolProps);
        this.preMouseDownCallback = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const toolGroupId = this.toolGroupId;
            const activeSegmentationRepresentation = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_9__.activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);
            if (!activeSegmentationRepresentation) {
                throw new Error('No active segmentation detected, create one before using scissors tool');
            }
            const { segmentationRepresentationUID, segmentationId, type } = activeSegmentationRepresentation;
            const segmentIndex = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_9__.segmentIndex.getActiveSegmentIndex(segmentationId);
            const segmentsLocked = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_9__.segmentLocking.getLockedSegments(segmentationId);
            const segmentColor = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_9__.config.color.getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex);
            const { representationData } = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_10__.getSegmentation)(segmentationId);
            const { volumeId } = representationData[type];
            const segmentation = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(volumeId);
            const annotation = {
                highlighted: true,
                invalidated: true,
                metadata: {
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),
                    referencedImageId: '',
                    toolName: this.getToolName(),
                    segmentColor,
                },
                data: {
                    handles: {
                        points: [
                            [...worldPos],
                            [...worldPos],
                            [...worldPos],
                            [...worldPos],
                        ],
                        activeHandleIndex: null,
                    },
                },
            };
            const viewportIdsToRender = (0,_utilities_viewportFilters__WEBPACK_IMPORTED_MODULE_4__.getViewportIdsWithToolToRender)(element, this.getToolName());
            this.editData = {
                annotation,
                segmentation,
                segmentIndex,
                segmentsLocked,
                segmentColor,
                segmentationId,
                viewportIdsToRender,
                handleIndex: 3,
                movingTextBox: false,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_7__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_8__["default"])(renderingEngine, viewportIdsToRender);
            return true;
        };
        this._dragCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, viewportIdsToRender, handleIndex } = this.editData;
            const { data } = annotation;
            const { currentPoints } = eventDetail;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;
            const worldPos = currentPoints.world;
            const { points } = data.handles;
            points[handleIndex] = [...worldPos];
            let bottomLeftCanvas;
            let bottomRightCanvas;
            let topLeftCanvas;
            let topRightCanvas;
            let bottomLeftWorld;
            let bottomRightWorld;
            let topLeftWorld;
            let topRightWorld;
            switch (handleIndex) {
                case 0:
                case 3:
                    bottomLeftCanvas = worldToCanvas(points[0]);
                    topRightCanvas = worldToCanvas(points[3]);
                    bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];
                    topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];
                    bottomRightWorld = canvasToWorld(bottomRightCanvas);
                    topLeftWorld = canvasToWorld(topLeftCanvas);
                    points[1] = bottomRightWorld;
                    points[2] = topLeftWorld;
                    break;
                case 1:
                case 2:
                    bottomRightCanvas = worldToCanvas(points[1]);
                    topLeftCanvas = worldToCanvas(points[2]);
                    bottomLeftCanvas = [
                        topLeftCanvas[0],
                        bottomRightCanvas[1],
                    ];
                    topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];
                    bottomLeftWorld = canvasToWorld(bottomLeftCanvas);
                    topRightWorld = canvasToWorld(topRightCanvas);
                    points[0] = bottomLeftWorld;
                    points[3] = topRightWorld;
                    break;
            }
            annotation.invalidated = true;
            this.editData.hasMoved = true;
            const { renderingEngine } = enabledElement;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_8__["default"])(renderingEngine, viewportIdsToRender);
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, newAnnotation, hasMoved, segmentation, segmentationId, segmentIndex, segmentsLocked, } = this.editData;
            const { data } = annotation;
            if (newAnnotation && !hasMoved) {
                return;
            }
            data.handles.activeHandleIndex = null;
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_7__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            this.editData = null;
            this.isDrawing = false;
            if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
                throw new Error('Not implemented yet');
            }
            const operationData = {
                points: data.handles.points,
                volume: segmentation,
                segmentationId,
                segmentIndex,
                segmentsLocked,
            };
            this.applyActiveStrategy(enabledElement, operationData);
        };
        this._activateDraw = (element) => {
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.TOUCH_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.TOUCH_TAP, this._endCallback);
        };
        this._deactivateDraw = (element) => {
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.TOUCH_TAP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_5__.Events.TOUCH_DRAG, this._dragCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            if (!this.editData) {
                return renderStatus;
            }
            const { viewport } = enabledElement;
            const { annotation } = this.editData;
            const toolMetadata = annotation.metadata;
            const annotationUID = annotation.annotationUID;
            const data = annotation.data;
            const { points } = data.handles;
            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;
            if (!viewport.getRenderingEngine()) {
                console.warn('Rendering Engine has been destroyed');
                return renderStatus;
            }
            const rectangleUID = '0';
            (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_6__.drawRect)(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {
                color,
            });
            renderStatus = true;
            return renderStatus;
        };
    }
}
RectangleScissorsTool.toolName = 'RectangleScissor';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RectangleScissorsTool);
//# sourceMappingURL=RectangleScissorsTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js":
/*!****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/base/index.js");
/* harmony import */ var _strategies_fillSphere__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strategies/fillSphere */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillSphere.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _cursors_elementCursor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../cursors/elementCursor */ "../../../node_modules/@cornerstonejs/tools/dist/esm/cursors/elementCursor.js");
/* harmony import */ var _utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utilities/triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../stateManagement/segmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js");
/* harmony import */ var _stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../stateManagement/segmentation/segmentationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js");









class SphereScissorsTool extends _base__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor(toolProps = {}, defaultToolProps = {
        supportedInteractionTypes: ['Mouse', 'Touch'],
        configuration: {
            strategies: {
                FILL_INSIDE: _strategies_fillSphere__WEBPACK_IMPORTED_MODULE_2__.fillInsideSphere,
            },
            defaultStrategy: 'FILL_INSIDE',
            activeStrategy: 'FILL_INSIDE',
        },
    }) {
        super(toolProps, defaultToolProps);
        this.preMouseDownCallback = (evt) => {
            const eventDetail = evt.detail;
            const { currentPoints, element } = eventDetail;
            const worldPos = currentPoints.world;
            const canvasPos = currentPoints.canvas;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport, renderingEngine } = enabledElement;
            this.isDrawing = true;
            const camera = viewport.getCamera();
            const { viewPlaneNormal, viewUp } = camera;
            const toolGroupId = this.toolGroupId;
            const activeSegmentationRepresentation = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_7__.activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);
            if (!activeSegmentationRepresentation) {
                throw new Error('No active segmentation detected, create one before using scissors tool');
            }
            const { segmentationRepresentationUID, segmentationId, type } = activeSegmentationRepresentation;
            const segmentIndex = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_7__.segmentIndex.getActiveSegmentIndex(segmentationId);
            const segmentsLocked = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_7__.segmentLocking.getLockedSegments(segmentationId);
            const segmentColor = _stateManagement_segmentation__WEBPACK_IMPORTED_MODULE_7__.config.color.getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex);
            const { representationData } = (0,_stateManagement_segmentation_segmentationState__WEBPACK_IMPORTED_MODULE_8__.getSegmentation)(segmentationId);
            const { volumeId } = representationData[type];
            const segmentation = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(volumeId);
            this.isDrawing = true;
            const annotation = {
                metadata: {
                    viewPlaneNormal: [...viewPlaneNormal],
                    viewUp: [...viewUp],
                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),
                    referencedImageId: '',
                    toolName: this.getToolName(),
                    segmentColor,
                },
                data: {
                    invalidated: true,
                    handles: {
                        points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],
                        activeHandleIndex: null,
                    },
                    cachedStats: {},
                    highlighted: true,
                },
            };
            const viewportIdsToRender = [viewport.id];
            this.editData = {
                annotation,
                segmentation,
                centerCanvas: canvasPos,
                segmentIndex,
                segmentsLocked,
                segmentColor,
                segmentationId,
                toolGroupId,
                viewportIdsToRender,
                handleIndex: 3,
                movingTextBox: false,
                newAnnotation: true,
                hasMoved: false,
            };
            this._activateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_5__.hideElementCursor)(element);
            evt.preventDefault();
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__["default"])(renderingEngine, viewportIdsToRender);
            return true;
        };
        this._dragCallback = (evt) => {
            this.isDrawing = true;
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { currentPoints } = eventDetail;
            const currentCanvasPoints = currentPoints.canvas;
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { renderingEngine, viewport } = enabledElement;
            const { canvasToWorld } = viewport;
            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;
            const { data } = annotation;
            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);
            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);
            const radius = Math.sqrt(dX * dX + dY * dY);
            const bottomCanvas = [
                centerCanvas[0],
                centerCanvas[1] + radius,
            ];
            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];
            const leftCanvas = [
                centerCanvas[0] - radius,
                centerCanvas[1],
            ];
            const rightCanvas = [
                centerCanvas[0] + radius,
                centerCanvas[1],
            ];
            data.handles.points = [
                canvasToWorld(bottomCanvas),
                canvasToWorld(topCanvas),
                canvasToWorld(leftCanvas),
                canvasToWorld(rightCanvas),
            ];
            annotation.invalidated = true;
            this.editData.hasMoved = true;
            (0,_utilities_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__["default"])(renderingEngine, viewportIdsToRender);
        };
        this._endCallback = (evt) => {
            const eventDetail = evt.detail;
            const { element } = eventDetail;
            const { annotation, newAnnotation, hasMoved, segmentation, segmentIndex, segmentsLocked, segmentationId, } = this.editData;
            const { data } = annotation;
            const { viewPlaneNormal, viewUp } = annotation.metadata;
            if (newAnnotation && !hasMoved) {
                return;
            }
            annotation.highlighted = false;
            data.handles.activeHandleIndex = null;
            this._deactivateDraw(element);
            (0,_cursors_elementCursor__WEBPACK_IMPORTED_MODULE_5__.resetElementCursor)(element);
            const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
            const { viewport } = enabledElement;
            this.editData = null;
            this.isDrawing = false;
            if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
                throw new Error('Not implemented yet');
            }
            const operationData = {
                points: data.handles.points,
                volume: segmentation,
                segmentIndex,
                segmentsLocked,
                segmentationId,
                viewPlaneNormal,
                viewUp,
            };
            this.applyActiveStrategy(enabledElement, operationData);
        };
        this._activateDraw = (element) => {
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_UP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_DRAG, this._dragCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_CLICK, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_END, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_TAP, this._endCallback);
            element.addEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_DRAG, this._dragCallback);
        };
        this._deactivateDraw = (element) => {
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_UP, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.MOUSE_CLICK, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_END, this._endCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_DRAG, this._dragCallback);
            element.removeEventListener(_enums__WEBPACK_IMPORTED_MODULE_3__.Events.TOUCH_TAP, this._endCallback);
        };
        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {
            let renderStatus = false;
            if (!this.editData) {
                return renderStatus;
            }
            const { viewport } = enabledElement;
            const { viewportIdsToRender } = this.editData;
            if (!viewportIdsToRender.includes(viewport.id)) {
                return renderStatus;
            }
            const { annotation } = this.editData;
            const toolMetadata = annotation.metadata;
            const annotationUID = annotation.annotationUID;
            const data = annotation.data;
            const { points } = data.handles;
            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
            const bottom = canvasCoordinates[0];
            const top = canvasCoordinates[1];
            const center = [
                Math.floor((bottom[0] + top[0]) / 2),
                Math.floor((bottom[1] + top[1]) / 2),
            ];
            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));
            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;
            if (!viewport.getRenderingEngine()) {
                console.warn('Rendering Engine has been destroyed');
                return renderStatus;
            }
            const circleUID = '0';
            (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_4__.drawCircle)(svgDrawingHelper, annotationUID, circleUID, center, radius, {
                color,
            });
            renderStatus = true;
            return renderStatus;
        };
    }
}
SphereScissorsTool.toolName = 'SphereScissor';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SphereScissorsTool);
//# sourceMappingURL=SphereScissorsTool.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseCircle.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseCircle.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   eraseInsideCircle: () => (/* binding */ eraseInsideCircle)
/* harmony export */ });
/* harmony import */ var _fillCircle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fillCircle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js");

function eraseInsideCircle(enabledElement, operationData) {
    const eraseOperationData = {
        ...operationData,
        segmentIndex: 0,
    };
    (0,_fillCircle__WEBPACK_IMPORTED_MODULE_0__.fillInsideCircle)(enabledElement, eraseOperationData);
}
//# sourceMappingURL=eraseCircle.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseRectangle.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseRectangle.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   eraseInsideRectangle: () => (/* binding */ eraseInsideRectangle),
/* harmony export */   eraseOutsideRectangle: () => (/* binding */ eraseOutsideRectangle)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities_boundingBox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/boundingBox */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/index.js");
/* harmony import */ var _stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../stateManagement/segmentation/triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");




const { transformWorldToIndex } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities;
function eraseRectangle(enabledElement, operationData, inside = true) {
    const { volume: segmentation, points, segmentsLocked, segmentationId, } = operationData;
    const { imageData, dimensions } = segmentation;
    const scalarData = segmentation.getScalarData();
    const rectangleCornersIJK = points.map((world) => {
        return transformWorldToIndex(imageData, world);
    });
    const boundsIJK = (0,_utilities_boundingBox__WEBPACK_IMPORTED_MODULE_1__.getBoundingBoxAroundShape)(rectangleCornersIJK, dimensions);
    if (boundsIJK.every(([min, max]) => min !== max)) {
        throw new Error('Oblique segmentation tools are not supported yet');
    }
    const pointInShape = () => true;
    const callback = ({ value, index }) => {
        if (segmentsLocked.includes(value)) {
            return;
        }
        scalarData[index] = 0;
    };
    (0,_utilities__WEBPACK_IMPORTED_MODULE_3__.pointInShapeCallback)(imageData, pointInShape, callback, boundsIJK);
    (0,_stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_2__.triggerSegmentationDataModified)(segmentationId);
}
function eraseInsideRectangle(enabledElement, operationData) {
    eraseRectangle(enabledElement, operationData, true);
}
function eraseOutsideRectangle(enabledElement, operationData) {
    eraseRectangle(enabledElement, operationData, false);
}
//# sourceMappingURL=eraseRectangle.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseSphere.js":
/*!********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseSphere.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   eraseInsideSphere: () => (/* binding */ eraseInsideSphere)
/* harmony export */ });
/* harmony import */ var _fillSphere__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fillSphere */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillSphere.js");

function eraseInsideSphere(enabledElement, operationData) {
    const eraseOperationData = Object.assign({}, operationData, {
        segmentIndex: 0,
    });
    (0,_fillSphere__WEBPACK_IMPORTED_MODULE_0__.fillInsideSphere)(enabledElement, eraseOperationData);
}
//# sourceMappingURL=eraseSphere.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js":
/*!*******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fillInsideCircle: () => (/* binding */ fillInsideCircle),
/* harmony export */   fillOutsideCircle: () => (/* binding */ fillOutsideCircle),
/* harmony export */   thresholdInsideCircle: () => (/* binding */ thresholdInsideCircle)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utilities/math/ellipse */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/index.js");
/* harmony import */ var _utilities_boundingBox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utilities/boundingBox */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/index.js");
/* harmony import */ var _stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../stateManagement/segmentation/triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");






const { transformWorldToIndex } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities;
function fillCircle(enabledElement, operationData, threshold = false) {
    const { volume: segmentationVolume, imageVolume, points, segmentsLocked, segmentIndex, segmentationId, strategySpecificConfiguration, } = operationData;
    const { imageData, dimensions } = segmentationVolume;
    const scalarData = segmentationVolume.getScalarData();
    const { viewport } = enabledElement;
    const center = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(0, 0, 0);
    points.forEach((point) => {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.add(center, center, point);
    });
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.scale(center, center, 1 / points.length);
    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));
    const [topLeftCanvas, bottomRightCanvas] = (0,_utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_2__.getCanvasEllipseCorners)(canvasCoordinates);
    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);
    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);
    const ellipsoidCornersIJK = [
        transformWorldToIndex(imageData, topLeftWorld),
        transformWorldToIndex(imageData, bottomRightWorld),
    ];
    const boundsIJK = (0,_utilities_boundingBox__WEBPACK_IMPORTED_MODULE_3__.getBoundingBoxAroundShape)(ellipsoidCornersIJK, dimensions);
    if (boundsIJK.every(([min, max]) => min !== max)) {
        throw new Error('Oblique segmentation tools are not supported yet');
    }
    const ellipseObj = {
        center: center,
        xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,
        yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,
        zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,
    };
    const modifiedSlicesToUse = new Set();
    let callback;
    if (threshold) {
        callback = ({ value, index, pointIJK }) => {
            if (segmentsLocked.includes(value)) {
                return;
            }
            if (isWithinThreshold(index, imageVolume, strategySpecificConfiguration)) {
                scalarData[index] = segmentIndex;
                modifiedSlicesToUse.add(pointIJK[2]);
            }
        };
    }
    else {
        callback = ({ value, index, pointIJK }) => {
            if (segmentsLocked.includes(value)) {
                return;
            }
            scalarData[index] = segmentIndex;
            modifiedSlicesToUse.add(pointIJK[2]);
        };
    }
    (0,_utilities__WEBPACK_IMPORTED_MODULE_5__.pointInShapeCallback)(imageData, (pointLPS, pointIJK) => (0,_utilities_math_ellipse__WEBPACK_IMPORTED_MODULE_2__.pointInEllipse)(ellipseObj, pointLPS), callback, boundsIJK);
    const arrayOfSlices = Array.from(modifiedSlicesToUse);
    (0,_stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_4__.triggerSegmentationDataModified)(segmentationId, arrayOfSlices);
}
function isWithinThreshold(index, imageVolume, strategySpecificConfiguration) {
    const { THRESHOLD_INSIDE_CIRCLE } = strategySpecificConfiguration;
    const voxelValue = imageVolume.getScalarData()[index];
    const { threshold } = THRESHOLD_INSIDE_CIRCLE;
    return threshold[0] <= voxelValue && voxelValue <= threshold[1];
}
function fillInsideCircle(enabledElement, operationData) {
    fillCircle(enabledElement, operationData, false);
}
function thresholdInsideCircle(enabledElement, operationData) {
    const { volume, imageVolume } = operationData;
    if (!_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.isEqual(volume.dimensions, imageVolume.dimensions) ||
        !_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.isEqual(volume.direction, imageVolume.direction)) {
        throw new Error('Only source data the same dimensions/size/orientation as the segmentation currently supported.');
    }
    fillCircle(enabledElement, operationData, true);
}
function fillOutsideCircle(enabledElement, operationData) {
    throw new Error('Not yet implemented');
}
//# sourceMappingURL=fillCircle.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js":
/*!**********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fillInsideRectangle: () => (/* binding */ fillInsideRectangle),
/* harmony export */   fillOutsideRectangle: () => (/* binding */ fillOutsideRectangle)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities_boundingBox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities/boundingBox */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/index.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");
/* harmony import */ var _stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../stateManagement/segmentation/triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");




const { transformWorldToIndex } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities;
function fillRectangle(enabledElement, operationData, inside = true) {
    const { volume: segmentation, points, segmentsLocked, segmentIndex, segmentationId, constraintFn, } = operationData;
    const { imageData, dimensions } = segmentation;
    const scalarData = segmentation.getScalarData();
    let rectangleCornersIJK = points.map((world) => {
        return transformWorldToIndex(imageData, world);
    });
    rectangleCornersIJK = rectangleCornersIJK.map((point) => {
        return point.map((coord) => {
            return Math.round(coord);
        });
    });
    const boundsIJK = (0,_utilities_boundingBox__WEBPACK_IMPORTED_MODULE_1__.getBoundingBoxAroundShape)(rectangleCornersIJK, dimensions);
    if (boundsIJK.every(([min, max]) => min !== max)) {
        throw new Error('Oblique segmentation tools are not supported yet');
    }
    const pointInRectangle = () => true;
    const callback = ({ value, index, pointIJK }) => {
        if (segmentsLocked.includes(value)) {
            return;
        }
        if (!constraintFn) {
            scalarData[index] = segmentIndex;
            return;
        }
        if (constraintFn(pointIJK)) {
            scalarData[index] = segmentIndex;
        }
    };
    (0,_utilities__WEBPACK_IMPORTED_MODULE_2__.pointInShapeCallback)(imageData, pointInRectangle, callback, boundsIJK);
    (0,_stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_3__.triggerSegmentationDataModified)(segmentationId);
}
function fillInsideRectangle(enabledElement, operationData) {
    fillRectangle(enabledElement, operationData, true);
}
function fillOutsideRectangle(enabledElement, operationData) {
    fillRectangle(enabledElement, operationData, false);
}
//# sourceMappingURL=fillRectangle.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillSphere.js":
/*!*******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillSphere.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fillInsideSphere: () => (/* binding */ fillInsideSphere),
/* harmony export */   fillOutsideSphere: () => (/* binding */ fillOutsideSphere)
/* harmony export */ });
/* harmony import */ var _stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../stateManagement/segmentation/triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");


function fillSphere(enabledElement, operationData, _inside = true) {
    const { viewport } = enabledElement;
    const { volume: segmentation, segmentsLocked, segmentIndex, segmentationId, points, } = operationData;
    const { imageData, dimensions } = segmentation;
    const scalarData = segmentation.getScalarData();
    const scalarIndex = [];
    const callback = ({ index, value }) => {
        if (segmentsLocked.includes(value)) {
            return;
        }
        scalarData[index] = segmentIndex;
        scalarIndex.push(index);
    };
    (0,_utilities__WEBPACK_IMPORTED_MODULE_1__.pointInSurroundingSphereCallback)(imageData, [points[0], points[1]], callback, viewport);
    const zMultiple = dimensions[0] * dimensions[1];
    const minSlice = Math.floor(scalarIndex[0] / zMultiple);
    const maxSlice = Math.floor(scalarIndex[scalarIndex.length - 1] / zMultiple);
    const sliceArray = Array.from({ length: maxSlice - minSlice + 1 }, (v, k) => k + minSlice);
    (0,_stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_0__.triggerSegmentationDataModified)(segmentationId, sliceArray);
}
function fillInsideSphere(enabledElement, operationData) {
    fillSphere(enabledElement, operationData, true);
}
function fillOutsideSphere(enabledElement, operationData) {
    fillSphere(enabledElement, operationData, false);
}
//# sourceMappingURL=fillSphere.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/types/index.js":
/*!**************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/types/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js":
/*!******************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function extend2DBoundingBoxInViewAxis(boundsIJK, numSlicesToProject) {
    const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);
    if (sliceNormalIndex === -1) {
        throw new Error('3D bounding boxes not supported in an oblique plane');
    }
    boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;
    boundsIJK[sliceNormalIndex][1] += numSlicesToProject;
    return boundsIJK;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (extend2DBoundingBoxInViewAxis);
//# sourceMappingURL=extend2DBoundingBoxInViewAxis.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js":
/*!**************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function getBoundingBoxAroundShape(points, dimensions) {
    let xMin = Infinity;
    let xMax = 0;
    let yMin = Infinity;
    let yMax = 0;
    let zMin = Infinity;
    let zMax = 0;
    points.forEach((p) => {
        xMin = Math.min(p[0], xMin);
        xMax = Math.max(p[0], xMax);
        yMin = Math.min(p[1], yMin);
        yMax = Math.max(p[1], yMax);
        zMin = Math.min(p[2], zMin);
        zMax = Math.max(p[2], zMax);
    });
    xMin = Math.floor(xMin);
    xMax = Math.floor(xMax);
    yMin = Math.floor(yMin);
    yMax = Math.floor(yMax);
    zMin = Math.floor(zMin);
    zMax = Math.floor(zMax);
    if (dimensions) {
        const [width, height, depth] = dimensions;
        xMin = Math.max(0, xMin);
        xMax = Math.min(width - 1, xMax);
        yMin = Math.max(0, yMin);
        yMax = Math.min(height - 1, yMax);
        zMin = Math.max(0, zMin);
        zMax = Math.min(depth - 1, zMax);
    }
    return [
        [xMin, xMax],
        [yMin, yMax],
        [zMin, zMax],
    ];
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getBoundingBoxAroundShape);
//# sourceMappingURL=getBoundingBoxAroundShape.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/index.js":
/*!******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   extend2DBoundingBoxInViewAxis: () => (/* reexport safe */ _extend2DBoundingBoxInViewAxis__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   getBoundingBoxAroundShape: () => (/* reexport safe */ _getBoundingBoxAroundShape__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var _extend2DBoundingBoxInViewAxis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extend2DBoundingBoxInViewAxis */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js");
/* harmony import */ var _getBoundingBoxAroundShape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getBoundingBoxAroundShape */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js");



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js":
/*!**********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ calibrateImageSpacing)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

const { calibratedPixelSpacingMetadataProvider } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities;
function calibrateImageSpacing(imageId, renderingEngine, rowPixelSpacing, columnPixelSpacing) {
    if (!columnPixelSpacing) {
        columnPixelSpacing = rowPixelSpacing;
    }
    calibratedPixelSpacingMetadataProvider.add(imageId, {
        rowPixelSpacing,
        columnPixelSpacing,
    });
    const viewports = renderingEngine.getStackViewports();
    viewports.forEach((viewport) => {
        const imageIds = viewport.getImageIds();
        if (imageIds.includes(imageId)) {
            viewport.calibrateSpacing(imageId);
        }
    });
}
//# sourceMappingURL=calibrateImageSpacing.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js":
/*!************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var Events;
(function (Events) {
    Events["CLIP_STOPPED"] = "CORNERSTONE_CINE_TOOL_STOPPED";
    Events["CLIP_STARTED"] = "CORNERSTONE_CINE_TOOL_STARTED";
})(Events || (Events = {}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Events);
//# sourceMappingURL=events.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/index.js":
/*!***********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Events: () => (/* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   addToolState: () => (/* reexport safe */ _state__WEBPACK_IMPORTED_MODULE_2__.addToolState),
/* harmony export */   getToolState: () => (/* reexport safe */ _state__WEBPACK_IMPORTED_MODULE_2__.getToolState),
/* harmony export */   playClip: () => (/* reexport safe */ _playClip__WEBPACK_IMPORTED_MODULE_0__.playClip),
/* harmony export */   stopClip: () => (/* reexport safe */ _playClip__WEBPACK_IMPORTED_MODULE_0__.stopClip)
/* harmony export */ });
/* harmony import */ var _playClip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playClip */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/state.js");




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js":
/*!**************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   playClip: () => (/* binding */ playClip),
/* harmony export */   stopClip: () => (/* binding */ stopClip)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./events */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./state */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/state.js");
/* harmony import */ var _scroll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scroll */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/scroll.js");





const { triggerEvent } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities;
const debounced = true;
const loop = true;
const dynamicVolumesPlayingMap = new Map();
function playClip(element, playClipOptions) {
    let playClipTimeouts;
    let playClipIsTimeVarying;
    if (element === undefined) {
        throw new Error('playClip: element must not be undefined');
    }
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
    if (!enabledElement) {
        throw new Error('playClip: element must be a valid Cornerstone enabled element');
    }
    playClipOptions.dynamicCineEnabled =
        playClipOptions.dynamicCineEnabled ?? true;
    const { viewport } = enabledElement;
    const volume = _getVolumeFromViewport(viewport);
    const playClipContext = _createCinePlayContext(viewport, playClipOptions);
    let playClipData = (0,_state__WEBPACK_IMPORTED_MODULE_3__.getToolState)(element);
    const isDynamicCinePlaying = playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume();
    if (isDynamicCinePlaying) {
        _stopDynamicVolumeCine(element);
    }
    if (!playClipData) {
        playClipData = {
            intervalId: undefined,
            framesPerSecond: 30,
            lastFrameTimeStamp: undefined,
            ignoreFrameTimeVector: false,
            usingFrameTimeVector: false,
            frameTimeVector: playClipOptions.frameTimeVector ?? undefined,
            speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,
            reverse: playClipOptions.reverse ?? false,
            loop: playClipOptions.loop ?? true,
        };
        (0,_state__WEBPACK_IMPORTED_MODULE_3__.addToolState)(element, playClipData);
    }
    else {
        _stopClip(element, isDynamicCinePlaying);
    }
    playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;
    if (playClipOptions.framesPerSecond < 0 ||
        playClipOptions.framesPerSecond > 0) {
        playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);
        playClipData.reverse = playClipData.framesPerSecond < 0;
        playClipData.ignoreFrameTimeVector = true;
    }
    if (playClipData.ignoreFrameTimeVector !== true &&
        playClipData.frameTimeVector &&
        playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&
        playClipContext.frameTimeVectorEnabled) {
        const { timeouts, isTimeVarying } = _getPlayClipTimeouts(playClipData.frameTimeVector, playClipData.speed);
        playClipTimeouts = timeouts;
        playClipIsTimeVarying = isTimeVarying;
    }
    const playClipAction = () => {
        const { numScrollSteps, currentStepIndex } = playClipContext;
        let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);
        const newStepIndexOutOfRange = newStepIndex < 0 || newStepIndex >= numScrollSteps;
        if (!loop && newStepIndexOutOfRange) {
            _stopClip(element, isDynamicCinePlaying);
            const eventDetail = { element };
            triggerEvent(element, _events__WEBPACK_IMPORTED_MODULE_2__["default"].CLIP_STOPPED, eventDetail);
            return;
        }
        if (newStepIndex >= numScrollSteps) {
            newStepIndex = 0;
        }
        else if (newStepIndex < 0) {
            newStepIndex = numScrollSteps - 1;
        }
        const delta = newStepIndex - currentStepIndex;
        if (delta) {
            playClipContext.scroll(delta);
        }
    };
    if (isDynamicCinePlaying) {
        dynamicVolumesPlayingMap.set(volume.volumeId, element);
    }
    if (playClipTimeouts &&
        playClipTimeouts.length > 0 &&
        playClipIsTimeVarying) {
        playClipData.usingFrameTimeVector = true;
        playClipData.intervalId = window.setTimeout(function playClipTimeoutHandler() {
            playClipData.intervalId = window.setTimeout(playClipTimeoutHandler, playClipTimeouts[playClipContext.currentStepIndex]);
            playClipAction();
        }, 0);
    }
    else {
        playClipData.usingFrameTimeVector = false;
        playClipData.intervalId = window.setInterval(playClipAction, 1000 / Math.abs(playClipData.framesPerSecond));
    }
    const eventDetail = {
        element,
    };
    triggerEvent(element, _events__WEBPACK_IMPORTED_MODULE_2__["default"].CLIP_STARTED, eventDetail);
}
function stopClip(element) {
    _stopClip(element, true);
}
function _stopClip(element, stopDynamicCine) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
    if (!enabledElement)
        return;
    const { viewport } = enabledElement;
    const cineToolData = (0,_state__WEBPACK_IMPORTED_MODULE_3__.getToolState)(viewport.element);
    if (cineToolData) {
        _stopClipWithData(cineToolData);
    }
    if (stopDynamicCine && viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.BaseVolumeViewport) {
        _stopDynamicVolumeCine(element);
    }
}
function _stopDynamicVolumeCine(element) {
    const { viewport } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
    const volume = _getVolumeFromViewport(viewport);
    if (volume?.isDynamicVolume()) {
        const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);
        dynamicVolumesPlayingMap.delete(volume.volumeId);
        if (dynamicCineElement && dynamicCineElement !== element) {
            stopClip(dynamicCineElement);
        }
    }
}
function _getPlayClipTimeouts(vector, speed) {
    let i;
    let sample;
    let delay;
    let sum = 0;
    const limit = vector.length;
    const timeouts = [];
    let isTimeVarying = false;
    if (typeof speed !== 'number' || speed <= 0) {
        speed = 1;
    }
    for (i = 1; i < limit; i++) {
        delay = (Number(vector[i]) / speed) | 0;
        timeouts.push(delay);
        if (i === 1) {
            sample = delay;
        }
        else if (delay !== sample) {
            isTimeVarying = true;
        }
        sum += delay;
    }
    if (timeouts.length > 0) {
        if (isTimeVarying) {
            delay = (sum / timeouts.length) | 0;
        }
        else {
            delay = timeouts[0];
        }
        timeouts.push(delay);
    }
    return { timeouts, isTimeVarying };
}
function _stopClipWithData(playClipData) {
    const id = playClipData.intervalId;
    if (typeof id !== 'undefined') {
        playClipData.intervalId = undefined;
        if (playClipData.usingFrameTimeVector) {
            clearTimeout(id);
        }
        else {
            clearInterval(id);
        }
    }
}
function _getVolumesFromViewport(viewport) {
    return viewport
        .getActors()
        .map((actor) => _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.cache.getVolume(actor.uid))
        .filter((volume) => !!volume);
}
function _getVolumeFromViewport(viewport) {
    const volumes = _getVolumesFromViewport(viewport);
    const dynamicVolume = volumes.find((volume) => volume.isDynamicVolume());
    return dynamicVolume ?? volumes[0];
}
function _createStackViewportCinePlayContext(viewport) {
    const imageIds = viewport.getImageIds();
    return {
        get numScrollSteps() {
            return imageIds.length;
        },
        get currentStepIndex() {
            return viewport.getTargetImageIdIndex();
        },
        get frameTimeVectorEnabled() {
            return true;
        },
        scroll(delta) {
            (0,_scroll__WEBPACK_IMPORTED_MODULE_4__["default"])(viewport, { delta, debounceLoading: debounced });
        },
    };
}
function _createVolumeViewportCinePlayContext(viewport, volume) {
    const { volumeId } = volume;
    const cachedScrollInfo = {
        viewPlaneNormal: gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(),
        scrollInfo: null,
    };
    const getScrollInfo = () => {
        const camera = viewport.getCamera();
        const updateCache = !cachedScrollInfo.scrollInfo ||
            !gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);
        if (updateCache) {
            const scrollInfo = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.getVolumeViewportScrollInfo(viewport, volumeId);
            cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;
            cachedScrollInfo.scrollInfo = scrollInfo;
        }
        return cachedScrollInfo.scrollInfo;
    };
    return {
        get numScrollSteps() {
            return getScrollInfo().numScrollSteps;
        },
        get currentStepIndex() {
            return getScrollInfo().currentStepIndex;
        },
        get frameTimeVectorEnabled() {
            const camera = viewport.getCamera();
            const volumeViewPlaneNormal = volume.direction
                .slice(6, 9)
                .map((x) => -x);
            const dot = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);
            return gl_matrix__WEBPACK_IMPORTED_MODULE_0__.glMatrix.equals(dot, 1);
        },
        scroll(delta) {
            getScrollInfo().currentStepIndex += delta;
            (0,_scroll__WEBPACK_IMPORTED_MODULE_4__["default"])(viewport, { delta });
        },
    };
}
function _createDynamicVolumeViewportCinePlayContext(volume) {
    return {
        get numScrollSteps() {
            return volume.numTimePoints;
        },
        get currentStepIndex() {
            return volume.timePointIndex;
        },
        get frameTimeVectorEnabled() {
            return false;
        },
        scroll(delta) {
            volume.timePointIndex += delta;
        },
    };
}
function _createCinePlayContext(viewport, playClipOptions) {
    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.StackViewport) {
        return _createStackViewportCinePlayContext(viewport);
    }
    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.VolumeViewport) {
        const volume = _getVolumeFromViewport(viewport);
        if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {
            return _createDynamicVolumeViewportCinePlayContext(volume);
        }
        return _createVolumeViewportCinePlayContext(viewport, volume);
    }
    throw new Error('Unknown viewport type');
}

//# sourceMappingURL=playClip.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/state.js":
/*!***********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/state.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addToolState: () => (/* binding */ addToolState),
/* harmony export */   getToolState: () => (/* binding */ getToolState)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

const state = {};
function addToolState(element, data) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewportId } = enabledElement;
    state[viewportId] = data;
}
function getToolState(element) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewportId } = enabledElement;
    return state[viewportId];
}

//# sourceMappingURL=state.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/clip.js":
/*!*****************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/clip.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clip: () => (/* binding */ clip),
/* harmony export */   clipToBox: () => (/* binding */ clipToBox),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function clip(val, low, high) {
    return Math.min(Math.max(low, val), high);
}
function clipToBox(point, box) {
    point.x = clip(point.x, 0, box.width);
    point.y = clip(point.y, 0, box.height);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clip);
//# sourceMappingURL=clip.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/debounce.js":
/*!*********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/debounce.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/isObject.js");

function debounce(func, wait, options) {
    let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;
    let lastInvokeTime = 0;
    let leading = false;
    let maxing = false;
    let trailing = true;
    const useRAF = !wait && wait !== 0 && typeof window.requestAnimationFrame === 'function';
    if (typeof func !== 'function') {
        throw new TypeError('Expected a function');
    }
    wait = Number(wait) || 0;
    if ((0,_isObject__WEBPACK_IMPORTED_MODULE_0__["default"])(options)) {
        leading = Boolean(options.leading);
        maxing = 'maxWait' in options;
        maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;
    }
    function invokeFunc(time) {
        const args = lastArgs;
        const thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }
    function startTimer(pendingFunc, wait) {
        if (useRAF) {
            return window.requestAnimationFrame(pendingFunc);
        }
        return setTimeout(pendingFunc, wait);
    }
    function cancelTimer(id) {
        if (useRAF) {
            return window.cancelAnimationFrame(id);
        }
        clearTimeout(id);
    }
    function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = startTimer(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
        const timeSinceLastCall = time - lastCallTime;
        const timeSinceLastInvoke = time - lastInvokeTime;
        const timeWaiting = wait - timeSinceLastCall;
        return maxing
            ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)
            : timeWaiting;
    }
    function shouldInvoke(time) {
        const timeSinceLastCall = time - lastCallTime;
        const timeSinceLastInvoke = time - lastInvokeTime;
        return (lastCallTime === undefined ||
            timeSinceLastCall >= wait ||
            timeSinceLastCall < 0 ||
            (maxing && timeSinceLastInvoke >= maxWait));
    }
    function timerExpired() {
        const time = Date.now();
        if (shouldInvoke(time)) {
            return trailingEdge(time);
        }
        timerId = startTimer(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
        timerId = undefined;
        if (trailing && lastArgs) {
            return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
    }
    function cancel() {
        if (timerId !== undefined) {
            cancelTimer(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
        return timerId === undefined ? result : trailingEdge(Date.now());
    }
    function pending() {
        return timerId !== undefined;
    }
    function debounced(...args) {
        const time = Date.now();
        const isInvoking = shouldInvoke(time);
        lastArgs = args;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
            if (timerId === undefined) {
                return leadingEdge(lastCallTime);
            }
            if (maxing) {
                timerId = startTimer(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) {
            timerId = startTimer(timerExpired, wait);
        }
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    debounced.pending = pending;
    return debounced;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (debounce);
//# sourceMappingURL=debounce.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/getTextBoxCoordsCanvas.js":
/*!*******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/getTextBoxCoordsCanvas.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getTextBoxCoordsCanvas)
/* harmony export */ });
function getTextBoxCoordsCanvas(annotationCanvasPoints) {
    const corners = _determineCorners(annotationCanvasPoints);
    const centerY = (corners.top[1] + corners.bottom[1]) / 2;
    const textBoxCanvas = [corners.right[0], centerY];
    return textBoxCanvas;
}
function _determineCorners(canvasPoints) {
    const handlesLeftToRight = [canvasPoints[0], canvasPoints[1]].sort(_compareX);
    const handlesTopToBottom = [canvasPoints[0], canvasPoints[1]].sort(_compareY);
    const right = handlesLeftToRight[handlesLeftToRight.length - 1];
    const top = handlesTopToBottom[0];
    const bottom = handlesTopToBottom[handlesTopToBottom.length - 1];
    return {
        top,
        bottom,
        right,
    };
    function _compareX(a, b) {
        return a[0] < b[0] ? -1 : 1;
    }
    function _compareY(a, b) {
        return a[1] < b[1] ? -1 : 1;
    }
}
//# sourceMappingURL=getTextBoxCoordsCanvas.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js":
/*!**************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getTextBoxCoordsCanvas: () => (/* reexport safe */ _getTextBoxCoordsCanvas__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _getTextBoxCoordsCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getTextBoxCoordsCanvas */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/getTextBoxCoordsCanvas.js");


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js":
/*!****************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function generateImageFromTimeData(dynamicVolume, operation, frameNumbers) {
    const frames = frameNumbers || [...Array(dynamicVolume.numTimePoints).keys()];
    const numFrames = frames.length;
    if (frames.length <= 1) {
        throw new Error('Please provide two or more time points');
    }
    const typedArrays = dynamicVolume.getScalarDataArrays();
    const arrayLength = typedArrays[0].length;
    const finalArray = new Float32Array(arrayLength);
    if (operation === _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.DynamicOperatorType.SUM) {
        for (let i = 0; i < numFrames; i++) {
            const currentArray = typedArrays[frames[i]];
            for (let j = 0; j < arrayLength; j++) {
                finalArray[j] += currentArray[j];
            }
        }
        return finalArray;
    }
    if (operation === _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.DynamicOperatorType.SUBTRACT) {
        if (frames.length > 2) {
            throw new Error('Please provide only 2 time points for subtraction.');
        }
        for (let j = 0; j < arrayLength; j++) {
            finalArray[j] += typedArrays[frames[0]][j] - typedArrays[frames[1]][j];
        }
        return finalArray;
    }
    if (operation === _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.DynamicOperatorType.AVERAGE) {
        for (let i = 0; i < numFrames; i++) {
            const currentArray = typedArrays[frames[i]];
            for (let j = 0; j < arrayLength; j++) {
                finalArray[j] += currentArray[j];
            }
        }
        for (let k = 0; k < arrayLength; k++) {
            finalArray[k] = finalArray[k] / numFrames;
        }
        return finalArray;
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (generateImageFromTimeData);
//# sourceMappingURL=generateImageFromTimeData.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/getDataInTime.js":
/*!****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/getDataInTime.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function getDataInTime(dynamicVolume, options) {
    let dataInTime;
    const frames = options.frameNumbers || [
        ...Array(dynamicVolume.numTimePoints).keys(),
    ];
    if (!options.maskVolumeId && !options.imageCoordinate) {
        throw new Error('No ROI provided');
    }
    if (options.maskVolumeId && options.imageCoordinate) {
        throw new Error('Please provide only one ROI');
    }
    if (options.maskVolumeId) {
        const segmentationVolume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(options.maskVolumeId);
        const indexArray = segmentationVolume
            .getScalarData()
            .map((_, i) => i)
            .filter((i) => segmentationVolume.getScalarData()[i] !== 0);
        const dataInTime = _getTimePointDataMask(frames, indexArray, dynamicVolume);
        return dataInTime;
    }
    if (options.imageCoordinate) {
        const dataInTime = _getTimePointDataCoordinate(frames, options.imageCoordinate, dynamicVolume);
        return dataInTime;
    }
    return dataInTime;
}
function _getTimePointDataCoordinate(frames, coordinate, volume) {
    const { dimensions, imageData } = volume;
    const index = imageData.worldToIndex(coordinate);
    index[0] = Math.floor(index[0]);
    index[1] = Math.floor(index[1]);
    index[2] = Math.floor(index[2]);
    if (!_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.indexWithinDimensions(index, dimensions)) {
        throw new Error('outside bounds');
    }
    const yMultiple = dimensions[0];
    const zMultiple = dimensions[0] * dimensions[1];
    const allScalarData = volume.getScalarDataArrays();
    const value = [];
    frames.forEach((frame) => {
        const activeScalarData = allScalarData[frame];
        const scalarIndex = index[2] * zMultiple + index[1] * yMultiple + index[0];
        value.push(activeScalarData[scalarIndex]);
    });
    return value;
}
function _getTimePointDataMask(frames, indexArray, volume) {
    const allScalarData = volume.getScalarDataArrays();
    const value = [];
    for (let i = 0; i < indexArray.length; i++) {
        const indexValues = [];
        frames.forEach((frame) => {
            const activeScalarData = allScalarData[frame];
            indexValues.push(activeScalarData[indexArray[i]]);
        });
        value.push(indexValues);
    }
    return value;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getDataInTime);
//# sourceMappingURL=getDataInTime.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/index.js":
/*!********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   generateImageFromTimeData: () => (/* reexport safe */ _generateImageFromTimeData__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   getDataInTime: () => (/* reexport safe */ _getDataInTime__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _getDataInTime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getDataInTime */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/getDataInTime.js");
/* harmony import */ var _generateImageFromTimeData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generateImageFromTimeData */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js");




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getAnnotationNearPoint.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getAnnotationNearPoint.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAnnotationNearPoint: () => (/* binding */ getAnnotationNearPoint),
/* harmony export */   getAnnotationNearPointOnEnabledElement: () => (/* binding */ getAnnotationNearPointOnEnabledElement)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../stateManagement/annotation/annotationState */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/annotationState.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");



function getAnnotationNearPoint(element, canvasPoint, proximity = 5) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    if (!enabledElement) {
        throw new Error('getAnnotationNearPoint: enabledElement not found');
    }
    return getAnnotationNearPointOnEnabledElement(enabledElement, canvasPoint, proximity);
}
function getAnnotationNearPointOnEnabledElement(enabledElement, point, proximity) {
    const { renderingEngineId, viewportId } = enabledElement;
    const toolGroup = _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_2__.getToolGroupForViewport(viewportId, renderingEngineId);
    if (!toolGroup) {
        return null;
    }
    const { _toolInstances: tools } = toolGroup;
    for (const name in tools) {
        const found = findAnnotationNearPointByTool(tools[name], enabledElement, point, proximity);
        if (found) {
            return found;
        }
    }
    return null;
}
function findAnnotationNearPointByTool(tool, enabledElement, point, proximity) {
    const { viewport } = enabledElement;
    const annotations = (0,_stateManagement_annotation_annotationState__WEBPACK_IMPORTED_MODULE_1__.getAnnotations)(tool.constructor.toolName, viewport?.element);
    const currentId = viewport?.getCurrentImageId?.();
    if (annotations?.length) {
        const { element } = enabledElement.viewport;
        for (const annotation of annotations) {
            const referencedImageId = annotation.metadata?.referencedImageId;
            if ((currentId && referencedImageId && currentId !== referencedImageId) ||
                !tool.isPointNearTool) {
                continue;
            }
            if (tool.isPointNearTool(element, annotation, point, proximity, '') ||
                tool.getHandleNearImagePoint(element, annotation, point, proximity)) {
                return annotation;
            }
        }
    }
    return null;
}

//# sourceMappingURL=getAnnotationNearPoint.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getModalityUnit.js":
/*!****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getModalityUnit.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getModalityUnit: () => (/* binding */ getModalityUnit)
/* harmony export */ });
function getModalityUnit(modality, isPreScaled, isSuvScaled) {
    if (modality === 'CT') {
        return 'HU';
    }
    else if (modality === 'PT' &&
        isPreScaled === true &&
        isSuvScaled === true) {
        return 'SUV';
    }
    else {
        return '';
    }
}

//# sourceMappingURL=getModalityUnit.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getToolsWithModesForElement.js":
/*!****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getToolsWithModesForElement.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getToolsWithModesForElement)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");


function getToolsWithModesForElement(element, modesFilter) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElement)(element);
    const { renderingEngineId, viewportId } = enabledElement;
    const toolGroup = _store__WEBPACK_IMPORTED_MODULE_0__.ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);
    if (!toolGroup) {
        return [];
    }
    const enabledTools = [];
    const toolGroupToolNames = Object.keys(toolGroup.toolOptions);
    for (let j = 0; j < toolGroupToolNames.length; j++) {
        const toolName = toolGroupToolNames[j];
        const toolOptions = toolGroup.toolOptions[toolName];
        if (!toolOptions) {
            continue;
        }
        if (modesFilter.includes(toolOptions.mode)) {
            const toolInstance = toolGroup.getToolInstance(toolName);
            enabledTools.push(toolInstance);
        }
    }
    return enabledTools;
}
//# sourceMappingURL=getToolsWithModesForElement.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js":
/*!******************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   boundingBox: () => (/* reexport module object */ _boundingBox__WEBPACK_IMPORTED_MODULE_19__),
/* harmony export */   calibrateImageSpacing: () => (/* reexport safe */ _calibrateImageSpacing__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   cine: () => (/* reexport module object */ _cine__WEBPACK_IMPORTED_MODULE_18__),
/* harmony export */   clip: () => (/* reexport safe */ _clip__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   debounce: () => (/* reexport safe */ _debounce__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   drawing: () => (/* reexport module object */ _drawing__WEBPACK_IMPORTED_MODULE_13__),
/* harmony export */   dynamicVolume: () => (/* reexport module object */ _dynamicVolume__WEBPACK_IMPORTED_MODULE_25__),
/* harmony export */   getAnnotationNearPoint: () => (/* reexport safe */ _getAnnotationNearPoint__WEBPACK_IMPORTED_MODULE_0__.getAnnotationNearPoint),
/* harmony export */   getAnnotationNearPointOnEnabledElement: () => (/* reexport safe */ _getAnnotationNearPoint__WEBPACK_IMPORTED_MODULE_0__.getAnnotationNearPointOnEnabledElement),
/* harmony export */   isObject: () => (/* reexport safe */ _isObject__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   jumpToSlice: () => (/* reexport safe */ _viewport_jumpToSlice__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   math: () => (/* reexport module object */ _math__WEBPACK_IMPORTED_MODULE_14__),
/* harmony export */   orientation: () => (/* reexport module object */ _orientation__WEBPACK_IMPORTED_MODULE_17__),
/* harmony export */   planar: () => (/* reexport module object */ _planar__WEBPACK_IMPORTED_MODULE_15__),
/* harmony export */   planarFreehandROITool: () => (/* reexport module object */ _planarFreehandROITool__WEBPACK_IMPORTED_MODULE_20__),
/* harmony export */   pointInShapeCallback: () => (/* reexport safe */ _pointInShapeCallback__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   pointInSurroundingSphereCallback: () => (/* reexport safe */ _pointInSurroundingSphereCallback__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   rectangleROITool: () => (/* reexport module object */ _rectangleROITool__WEBPACK_IMPORTED_MODULE_21__),
/* harmony export */   scroll: () => (/* reexport safe */ _scroll__WEBPACK_IMPORTED_MODULE_11__["default"]),
/* harmony export */   segmentation: () => (/* reexport module object */ _segmentation__WEBPACK_IMPORTED_MODULE_12__),
/* harmony export */   stackPrefetch: () => (/* reexport module object */ _stackPrefetch__WEBPACK_IMPORTED_MODULE_22__),
/* harmony export */   throttle: () => (/* reexport safe */ _throttle__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   touch: () => (/* reexport module object */ _touch__WEBPACK_IMPORTED_MODULE_24__),
/* harmony export */   triggerAnnotationRender: () => (/* reexport safe */ _triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   triggerAnnotationRenderForViewportIds: () => (/* reexport safe */ _triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   triggerEvent: () => (/* reexport safe */ _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_26__.triggerEvent),
/* harmony export */   viewport: () => (/* reexport module object */ _viewport__WEBPACK_IMPORTED_MODULE_23__),
/* harmony export */   viewportFilters: () => (/* reexport module object */ _viewportFilters__WEBPACK_IMPORTED_MODULE_16__)
/* harmony export */ });
/* harmony import */ var _getAnnotationNearPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getAnnotationNearPoint */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getAnnotationNearPoint.js");
/* harmony import */ var _debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debounce */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/debounce.js");
/* harmony import */ var _throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./throttle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js");
/* harmony import */ var _isObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isObject */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/isObject.js");
/* harmony import */ var _clip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./clip */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/clip.js");
/* harmony import */ var _calibrateImageSpacing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./calibrateImageSpacing */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js");
/* harmony import */ var _triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./triggerAnnotationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js");
/* harmony import */ var _viewport_jumpToSlice__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./viewport/jumpToSlice */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/jumpToSlice.js");
/* harmony import */ var _pointInShapeCallback__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pointInShapeCallback */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInShapeCallback.js");
/* harmony import */ var _pointInSurroundingSphereCallback__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./pointInSurroundingSphereCallback */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js");
/* harmony import */ var _scroll__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./scroll */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/scroll.js");
/* harmony import */ var _segmentation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./segmentation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/index.js");
/* harmony import */ var _drawing__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./drawing */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/index.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./math */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js");
/* harmony import */ var _planar__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./planar */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/index.js");
/* harmony import */ var _viewportFilters__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./viewportFilters */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js");
/* harmony import */ var _orientation__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./orientation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/index.js");
/* harmony import */ var _cine__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./cine */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/index.js");
/* harmony import */ var _boundingBox__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./boundingBox */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/index.js");
/* harmony import */ var _planarFreehandROITool__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./planarFreehandROITool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js");
/* harmony import */ var _rectangleROITool__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./rectangleROITool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/index.js");
/* harmony import */ var _stackPrefetch__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./stackPrefetch */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/index.js");
/* harmony import */ var _viewport__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./viewport */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/index.js");
/* harmony import */ var _touch__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./touch */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js");
/* harmony import */ var _dynamicVolume__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./dynamicVolume */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");




























//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/isObject.js":
/*!*********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/isObject.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function isObject(value) {
    const type = typeof value;
    return value !== null && (type === 'object' || type === 'function');
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isObject);
//# sourceMappingURL=isObject.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/angle/angleBetweenLines.js":
/*!*****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/angle/angleBetweenLines.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ angleBetweenLines)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");

function angleBetweenLines(line1, line2) {
    const [p1, p2] = line1;
    const [p3, p4] = line2;
    const v1 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.sub(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), p2, p1);
    const v2 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.sub(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create(), p3, p4);
    const dot = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.dot(v1, v2);
    const v1Length = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.length(v1);
    const v2Length = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.length(v2);
    const cos = dot / (v1Length * v2Length);
    const radian = Math.acos(cos);
    return (radian * 180) / Math.PI;
}
//# sourceMappingURL=angleBetweenLines.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/getCanvasCircleCorners.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/getCanvasCircleCorners.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCanvasCircleCorners)
/* harmony export */ });
/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../point */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/index.js");

function getCanvasCircleCorners(circleCanvasPoints) {
    const [center, end] = circleCanvasPoints;
    const radius = (0,_point__WEBPACK_IMPORTED_MODULE_0__.distanceToPoint)(center, end);
    const topLeft = [center[0] - radius, center[1] - radius];
    const bottomRight = [center[0] + radius, center[1] + radius];
    return [topLeft, bottomRight];
}
//# sourceMappingURL=getCanvasCircleCorners.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/getCanvasCircleRadius.js":
/*!**********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/getCanvasCircleRadius.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCanvasCircleRadius)
/* harmony export */ });
/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../point */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/index.js");

function getCanvasCircleRadius(circleCanvasPoints) {
    const [center, end] = circleCanvasPoints;
    return (0,_point__WEBPACK_IMPORTED_MODULE_0__.distanceToPoint)(center, end);
}
//# sourceMappingURL=getCanvasCircleRadius.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/index.js":
/*!******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getCanvasCircleCorners: () => (/* reexport safe */ _getCanvasCircleCorners__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   getCanvasCircleRadius: () => (/* reexport safe */ _getCanvasCircleRadius__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _getCanvasCircleRadius__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getCanvasCircleRadius */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/getCanvasCircleRadius.js");
/* harmony import */ var _getCanvasCircleCorners__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getCanvasCircleCorners */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/circle/getCanvasCircleCorners.js");



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/getCanvasEllipseCorners.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/getCanvasEllipseCorners.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCanvasEllipseCorners)
/* harmony export */ });
function getCanvasEllipseCorners(ellipseCanvasPoints) {
    const [bottom, top, left, right] = ellipseCanvasPoints;
    const topLeft = [left[0], top[1]];
    const bottomRight = [right[0], bottom[1]];
    return [topLeft, bottomRight];
}
//# sourceMappingURL=getCanvasEllipseCorners.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/index.js":
/*!*******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getCanvasEllipseCorners: () => (/* reexport safe */ _getCanvasEllipseCorners__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   pointInEllipse: () => (/* reexport safe */ _pointInEllipse__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _pointInEllipse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pointInEllipse */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/pointInEllipse.js");
/* harmony import */ var _getCanvasEllipseCorners__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getCanvasEllipseCorners */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/getCanvasEllipseCorners.js");



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/pointInEllipse.js":
/*!****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/pointInEllipse.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ pointInEllipse)
/* harmony export */ });
function pointInEllipse(ellipse, pointLPS) {
    const { center: circleCenterWorld, xRadius, yRadius, zRadius } = ellipse;
    const [x, y, z] = pointLPS;
    const [x0, y0, z0] = circleCenterWorld;
    let inside = 0;
    if (xRadius !== 0) {
        inside += ((x - x0) * (x - x0)) / (xRadius * xRadius);
    }
    if (yRadius !== 0) {
        inside += ((y - y0) * (y - y0)) / (yRadius * yRadius);
    }
    if (zRadius !== 0) {
        inside += ((z - z0) * (z - z0)) / (zRadius * zRadius);
    }
    return inside <= 1;
}
//# sourceMappingURL=pointInEllipse.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js":
/*!***********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ellipse: () => (/* reexport module object */ _ellipse__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   lineSegment: () => (/* reexport module object */ _line__WEBPACK_IMPORTED_MODULE_2__),
/* harmony export */   point: () => (/* reexport module object */ _point__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   polyline: () => (/* reexport module object */ _polyline__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   rectangle: () => (/* reexport module object */ _rectangle__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   vec2: () => (/* reexport module object */ _vec2__WEBPACK_IMPORTED_MODULE_0__)
/* harmony export */ });
/* harmony import */ var _vec2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vec2 */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/index.js");
/* harmony import */ var _ellipse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ellipse */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/ellipse/index.js");
/* harmony import */ var _line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/index.js");
/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rectangle */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/rectangle/index.js");
/* harmony import */ var _polyline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./polyline */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/index.js");
/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./point */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/index.js");







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPoint.js":
/*!**************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPoint.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ distanceToPoint)
/* harmony export */ });
/* harmony import */ var _distanceToPointSquared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceToPointSquared */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPointSquared.js");

function distanceToPoint(lineStart, lineEnd, point) {
    if (lineStart.length !== 2 || lineEnd.length !== 2 || point.length !== 2) {
        throw Error('lineStart, lineEnd, and point should have 2 elements of [x, y]');
    }
    return Math.sqrt((0,_distanceToPointSquared__WEBPACK_IMPORTED_MODULE_0__["default"])(lineStart, lineEnd, point));
}
//# sourceMappingURL=distanceToPoint.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPointSquared.js":
/*!*********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPointSquared.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ distanceToPointSquared)
/* harmony export */ });
function dist2(p1, p2) {
    return (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);
}
function distanceToPointSquared(lineStart, lineEnd, point) {
    const d2 = dist2(lineStart, lineEnd);
    if (d2 === 0) {
        return dist2(point, lineStart);
    }
    const t = ((point[0] - lineStart[0]) * (lineEnd[0] - lineStart[0]) +
        (point[1] - lineStart[1]) * (lineEnd[1] - lineStart[1])) /
        d2;
    if (t < 0) {
        return dist2(point, lineStart);
    }
    if (t > 1) {
        return dist2(point, lineEnd);
    }
    const pt = [
        lineStart[0] + t * (lineEnd[0] - lineStart[0]),
        lineStart[1] + t * (lineEnd[1] - lineStart[1]),
    ];
    return dist2(point, pt);
}
//# sourceMappingURL=distanceToPointSquared.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/index.js":
/*!****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   distanceToPoint: () => (/* reexport safe */ _distanceToPoint__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   distanceToPointSquared: () => (/* reexport safe */ _distanceToPointSquared__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   intersectLine: () => (/* reexport safe */ _intersectLine__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _distanceToPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceToPoint */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPoint.js");
/* harmony import */ var _distanceToPointSquared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./distanceToPointSquared */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/distanceToPointSquared.js");
/* harmony import */ var _intersectLine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./intersectLine */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/intersectLine.js");




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/intersectLine.js":
/*!************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/intersectLine.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ intersectLine)
/* harmony export */ });
function sign(x) {
    return typeof x === 'number'
        ? x
            ? x < 0
                ? -1
                : 1
            : x === x
                ? 0
                : NaN
        : NaN;
}
function intersectLine(line1Start, line1End, line2Start, line2End) {
    const [x1, y1] = line1Start;
    const [x2, y2] = line1End;
    const [x3, y3] = line2Start;
    const [x4, y4] = line2End;
    const a1 = y2 - y1;
    const b1 = x1 - x2;
    const c1 = x2 * y1 - x1 * y2;
    const r3 = a1 * x3 + b1 * y3 + c1;
    const r4 = a1 * x4 + b1 * y4 + c1;
    if (r3 !== 0 && r4 !== 0 && sign(r3) === sign(r4)) {
        return;
    }
    const a2 = y4 - y3;
    const b2 = x3 - x4;
    const c2 = x4 * y3 - x3 * y4;
    const r1 = a2 * x1 + b2 * y1 + c2;
    const r2 = a2 * x2 + b2 * y2 + c2;
    if (r1 !== 0 && r2 !== 0 && sign(r1) === sign(r2)) {
        return;
    }
    const denom = a1 * b2 - a2 * b1;
    let num;
    num = b1 * c2 - b2 * c1;
    const x = num / denom;
    num = a2 * c1 - a1 * c2;
    const y = num / denom;
    const intersectionPoint = [x, y];
    return intersectionPoint;
}
//# sourceMappingURL=intersectLine.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/midPoint.js":
/*!**************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/midPoint.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   midPoint2: () => (/* binding */ midPoint2)
/* harmony export */ });
const midPoint = (...args) => {
    const ret = args[0].length === 2 ? [0, 0] : [0, 0, 0];
    const len = args.length;
    for (const arg of args) {
        ret[0] += arg[0] / len;
        ret[1] += arg[1] / len;
        if (ret.length === 3)
            ret[2] += arg[2] / len;
    }
    return ret;
};
const midPoint2 = midPoint;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (midPoint);

//# sourceMappingURL=midPoint.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/distanceToPoint.js":
/*!***************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/distanceToPoint.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ distanceToPoint)
/* harmony export */ });
function distanceToPoint(p1, p2) {
    if (p1?.length !== 2 || p2?.length !== 2) {
        throw Error('points should have 2 elements of [x, y]');
    }
    const [x1, y1] = p1;
    const [x2, y2] = p2;
    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
}
//# sourceMappingURL=distanceToPoint.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/index.js":
/*!*****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   distanceToPoint: () => (/* reexport safe */ _distanceToPoint__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _distanceToPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceToPoint */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/point/distanceToPoint.js");


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/addCanvasPointsToArray.js":
/*!*************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/addCanvasPointsToArray.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");


const addCanvasPointsToArray = (element, canvasPoints, newCanvasPoint, commonData) => {
    const { xDir, yDir, spacing } = commonData;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewport } = enabledElement;
    const lastWorldPos = viewport.canvasToWorld(canvasPoints[canvasPoints.length - 1]);
    const newWorldPos = viewport.canvasToWorld(newCanvasPoint);
    const worldPosDiff = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.subtract(worldPosDiff, newWorldPos, lastWorldPos);
    const xDist = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(worldPosDiff, xDir));
    const yDist = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(worldPosDiff, yDir));
    const numPointsToAdd = Math.max(Math.floor(xDist / spacing[0]), Math.floor(yDist / spacing[0]));
    if (numPointsToAdd > 1) {
        const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];
        const canvasDist = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec2.dist(lastCanvasPoint, newCanvasPoint);
        const canvasDir = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec2.create();
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec2.subtract(canvasDir, newCanvasPoint, lastCanvasPoint);
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec2.set(canvasDir, canvasDir[0] / canvasDist, canvasDir[1] / canvasDist);
        const distPerPoint = canvasDist / numPointsToAdd;
        for (let i = 1; i <= numPointsToAdd; i++) {
            canvasPoints.push([
                lastCanvasPoint[0] + distPerPoint * canvasDir[0] * i,
                lastCanvasPoint[1] + distPerPoint * canvasDir[1] * i,
            ]);
        }
    }
    else {
        canvasPoints.push(newCanvasPoint);
    }
    return numPointsToAdd;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addCanvasPointsToArray);
//# sourceMappingURL=addCanvasPointsToArray.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/calculateAreaOfPoints.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/calculateAreaOfPoints.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ calculateAreaOfPoints)
/* harmony export */ });
function calculateAreaOfPoints(points) {
    const n = points.length;
    let area = 0.0;
    let j = n - 1;
    for (let i = 0; i < n; i++) {
        area += (points[j][0] + points[i][0]) * (points[j][1] - points[i][1]);
        j = i;
    }
    return Math.abs(area / 2.0);
}
//# sourceMappingURL=calculateAreaOfPoints.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getIntersectionWithPolyline.js":
/*!******************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getIntersectionWithPolyline.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAllIntersectionsWithPolyline: () => (/* binding */ getAllIntersectionsWithPolyline),
/* harmony export */   getClosestIntersectionWithPolyline: () => (/* binding */ getClosestIntersectionWithPolyline),
/* harmony export */   getFirstIntersectionWithPolyline: () => (/* binding */ getFirstIntersectionWithPolyline),
/* harmony export */   getIntersectionCoordinatesWithPolyline: () => (/* binding */ getIntersectionCoordinatesWithPolyline)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");

function getAllIntersectionsWithPolyline(points, p1, q1, closed = true) {
    let initialI;
    let j;
    const intersections = [];
    if (closed) {
        j = points.length - 1;
        initialI = 0;
    }
    else {
        j = 0;
        initialI = 1;
    }
    for (let i = initialI; i < points.length; i++) {
        const p2 = points[j];
        const q2 = points[i];
        if (doesIntersect(p1, q1, p2, q2)) {
            intersections.push([j, i]);
        }
        j = i;
    }
    return intersections;
}
function getIntersectionCoordinatesWithPolyline(points, p1, q1, closed = true) {
    const result = [];
    const polylineIndexes = getAllIntersectionsWithPolyline(points, p1, q1, closed);
    for (let i = 0; i < polylineIndexes.length; i++) {
        const p2 = points[polylineIndexes[i][0]];
        const q2 = points[polylineIndexes[i][1]];
        const intersection = getIntersection(p1, q1, p2, q2);
        result.push(intersection);
    }
    return result;
}
function getFirstIntersectionWithPolyline(points, p1, q1, closed = true) {
    let initialI;
    let j;
    if (closed) {
        j = points.length - 1;
        initialI = 0;
    }
    else {
        j = 0;
        initialI = 1;
    }
    for (let i = initialI; i < points.length; i++) {
        const p2 = points[j];
        const q2 = points[i];
        if (doesIntersect(p1, q1, p2, q2)) {
            return [j, i];
        }
        j = i;
    }
}
function getClosestIntersectionWithPolyline(points, p1, q1, closed = true) {
    let initialI;
    let j;
    if (closed) {
        j = points.length - 1;
        initialI = 0;
    }
    else {
        j = 0;
        initialI = 1;
    }
    const intersections = [];
    for (let i = initialI; i < points.length; i++) {
        const p2 = points[j];
        const q2 = points[i];
        if (doesIntersect(p1, q1, p2, q2)) {
            intersections.push([j, i]);
        }
        j = i;
    }
    if (intersections.length === 0) {
        return;
    }
    const distances = [];
    intersections.forEach((intersection) => {
        const intersectionPoints = [
            points[intersection[0]],
            points[intersection[1]],
        ];
        const midpoint = [
            (intersectionPoints[0][0] + intersectionPoints[1][0]) / 2,
            (intersectionPoints[0][1] + intersectionPoints[1][1]) / 2,
        ];
        distances.push(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.distance(midpoint, p1));
    });
    const minDistance = Math.min(...distances);
    const indexOfMinDistance = distances.indexOf(minDistance);
    return {
        segment: intersections[indexOfMinDistance],
        distance: minDistance,
    };
}
function doesIntersect(p1, q1, p2, q2) {
    let result = false;
    const orient = [
        orientation(p1, q1, p2),
        orientation(p1, q1, q2),
        orientation(p2, q2, p1),
        orientation(p2, q2, q1),
    ];
    if (orient[0] !== orient[1] && orient[2] !== orient[3]) {
        return true;
    }
    if (orient[0] === 0 && onSegment(p1, p2, q1)) {
        result = true;
    }
    else if (orient[1] === 0 && onSegment(p1, q2, q1)) {
        result = true;
    }
    else if (orient[2] === 0 && onSegment(p2, p1, q2)) {
        result = true;
    }
    else if (orient[3] === 0 && onSegment(p2, q1, q2)) {
        result = true;
    }
    return result;
}
function orientation(p, q, r) {
    const orientationValue = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);
    if (orientationValue === 0) {
        return 0;
    }
    return orientationValue > 0 ? 1 : 2;
}
function onSegment(p, q, r) {
    if (q[0] <= Math.max(p[0], r[0]) &&
        q[0] >= Math.min(p[0], r[0]) &&
        q[1] <= Math.max(p[1], r[1]) &&
        q[1] >= Math.min(p[1], r[1])) {
        return true;
    }
    return false;
}
function getIntersection(p1, q1, p2, q2) {
    const denominator = (q2[1] - p2[1]) * (q1[0] - p1[0]) - (q2[0] - p2[0]) * (q1[1] - p1[1]);
    if (denominator == 0) {
        return;
    }
    let a = p1[1] - p2[1];
    let b = p1[0] - p2[0];
    const numerator1 = (q2[0] - p2[0]) * a - (q2[1] - p2[1]) * b;
    const numerator2 = (q1[0] - p1[0]) * a - (q1[1] - p1[1]) * b;
    a = numerator1 / denominator;
    b = numerator2 / denominator;
    const resultX = p1[0] + a * (q1[0] - p1[0]);
    const resultY = p1[1] + a * (q1[1] - p1[1]);
    return [resultX, resultY];
}

//# sourceMappingURL=getIntersectionWithPolyline.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getSubPixelSpacingAndXYDirections.js":
/*!************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getSubPixelSpacingAndXYDirections.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");


const EPSILON = 1e-3;
const getSubPixelSpacingAndXYDirections = (viewport, subPixelResolution) => {
    let spacing;
    let xDir;
    let yDir;
    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
        const imageData = viewport.getImageData();
        xDir = imageData.direction.slice(0, 3);
        yDir = imageData.direction.slice(3, 6);
        spacing = imageData.spacing;
    }
    else {
        const imageData = viewport.getImageData();
        const { direction, spacing: volumeSpacing } = imageData;
        const { viewPlaneNormal, viewUp } = viewport.getCamera();
        const iVector = direction.slice(0, 3);
        const jVector = direction.slice(3, 6);
        const kVector = direction.slice(6, 9);
        const viewRight = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create();
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.cross(viewRight, viewUp, viewPlaneNormal);
        const absViewRightDotI = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(viewRight, iVector));
        const absViewRightDotJ = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(viewRight, jVector));
        const absViewRightDotK = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(viewRight, kVector));
        let xSpacing;
        if (Math.abs(1 - absViewRightDotI) < EPSILON) {
            xSpacing = volumeSpacing[0];
            xDir = iVector;
        }
        else if (Math.abs(1 - absViewRightDotJ) < EPSILON) {
            xSpacing = volumeSpacing[1];
            xDir = jVector;
        }
        else if (Math.abs(1 - absViewRightDotK) < EPSILON) {
            xSpacing = volumeSpacing[2];
            xDir = kVector;
        }
        else {
            throw new Error('No support yet for oblique plane planar contours');
        }
        const absViewUpDotI = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(viewUp, iVector));
        const absViewUpDotJ = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(viewUp, jVector));
        const absViewUpDotK = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(viewUp, kVector));
        let ySpacing;
        if (Math.abs(1 - absViewUpDotI) < EPSILON) {
            ySpacing = volumeSpacing[0];
            yDir = iVector;
        }
        else if (Math.abs(1 - absViewUpDotJ) < EPSILON) {
            ySpacing = volumeSpacing[1];
            yDir = jVector;
        }
        else if (Math.abs(1 - absViewUpDotK) < EPSILON) {
            ySpacing = volumeSpacing[2];
            yDir = kVector;
        }
        else {
            throw new Error('No support yet for oblique plane planar contours');
        }
        spacing = [xSpacing, ySpacing];
    }
    const subPixelSpacing = [
        spacing[0] / subPixelResolution,
        spacing[1] / subPixelResolution,
    ];
    return { spacing: subPixelSpacing, xDir, yDir };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getSubPixelSpacingAndXYDirections);
//# sourceMappingURL=getSubPixelSpacingAndXYDirections.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/index.js":
/*!********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addCanvasPointsToArray: () => (/* reexport safe */ _addCanvasPointsToArray__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   calculateAreaOfPoints: () => (/* reexport safe */ _calculateAreaOfPoints__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   getClosestIntersectionWithPolyline: () => (/* reexport safe */ _getIntersectionWithPolyline__WEBPACK_IMPORTED_MODULE_0__.getClosestIntersectionWithPolyline),
/* harmony export */   getFirstIntersectionWithPolyline: () => (/* reexport safe */ _getIntersectionWithPolyline__WEBPACK_IMPORTED_MODULE_0__.getFirstIntersectionWithPolyline),
/* harmony export */   getSubPixelSpacingAndXYDirections: () => (/* reexport safe */ _getSubPixelSpacingAndXYDirections__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   pointCanProjectOnLine: () => (/* reexport safe */ _pointCanProjectOnLine__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   pointsAreWithinCloseContourProximity: () => (/* reexport safe */ _pointsAreWithinCloseContourProximity__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _getIntersectionWithPolyline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getIntersectionWithPolyline */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getIntersectionWithPolyline.js");
/* harmony import */ var _getSubPixelSpacingAndXYDirections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getSubPixelSpacingAndXYDirections */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/getSubPixelSpacingAndXYDirections.js");
/* harmony import */ var _pointsAreWithinCloseContourProximity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pointsAreWithinCloseContourProximity */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/pointsAreWithinCloseContourProximity.js");
/* harmony import */ var _addCanvasPointsToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./addCanvasPointsToArray */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/addCanvasPointsToArray.js");
/* harmony import */ var _pointCanProjectOnLine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pointCanProjectOnLine */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/pointCanProjectOnLine.js");
/* harmony import */ var _calculateAreaOfPoints__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./calculateAreaOfPoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/calculateAreaOfPoints.js");







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/pointCanProjectOnLine.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/pointCanProjectOnLine.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");

const pointCanProjectOnLine = (p, p1, p2, proximity) => {
    const p1p = [p[0] - p1[0], p[1] - p1[1]];
    const p1p2 = [p2[0] - p1[0], p2[1] - p1[1]];
    const dot = p1p[0] * p1p2[0] + p1p[1] * p1p2[1];
    if (dot < 0) {
        return false;
    }
    const p1p2Mag = Math.sqrt(p1p2[0] * p1p2[0] + p1p2[1] * p1p2[1]);
    if (p1p2Mag === 0) {
        return false;
    }
    const projectionVectorMag = dot / p1p2Mag;
    const p1p2UnitVector = [p1p2[0] / p1p2Mag, p1p2[1] / p1p2Mag];
    const projectionVector = [
        p1p2UnitVector[0] * projectionVectorMag,
        p1p2UnitVector[1] * projectionVectorMag,
    ];
    const projectionPoint = [
        p1[0] + projectionVector[0],
        p1[1] + projectionVector[1],
    ];
    const distance = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.distance(p, projectionPoint);
    if (distance > proximity) {
        return false;
    }
    if (gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.distance(p1, projectionPoint) > gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.distance(p1, p2)) {
        return false;
    }
    return true;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (pointCanProjectOnLine);
//# sourceMappingURL=pointCanProjectOnLine.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/pointsAreWithinCloseContourProximity.js":
/*!***************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/polyline/pointsAreWithinCloseContourProximity.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");

const pointsAreWithinCloseContourProximity = (p1, p2, closeContourProximity) => {
    return gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec2.dist(p1, p2) < closeContourProximity;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (pointsAreWithinCloseContourProximity);
//# sourceMappingURL=pointsAreWithinCloseContourProximity.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/rectangle/distanceToPoint.js":
/*!*******************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/rectangle/distanceToPoint.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ distanceToPoint)
/* harmony export */ });
/* harmony import */ var _line__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../line */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/line/index.js");

function rectToLineSegments(left, top, width, height) {
    const topLineStart = [left, top];
    const topLineEnd = [left + width, top];
    const rightLineStart = [left + width, top];
    const rightLineEnd = [left + width, top + height];
    const bottomLineStart = [left + width, top + height];
    const bottomLineEnd = [left, top + height];
    const leftLineStart = [left, top + height];
    const leftLineEnd = [left, top];
    const lineSegments = {
        top: [topLineStart, topLineEnd],
        right: [rightLineStart, rightLineEnd],
        bottom: [bottomLineStart, bottomLineEnd],
        left: [leftLineStart, leftLineEnd],
    };
    return lineSegments;
}
function distanceToPoint(rect, point) {
    if (rect.length !== 4 || point.length !== 2) {
        throw Error('rectangle:[left, top, width, height] or point: [x,y] not defined correctly');
    }
    const [left, top, width, height] = rect;
    let minDistance = 655535;
    const lineSegments = rectToLineSegments(left, top, width, height);
    Object.keys(lineSegments).forEach((segment) => {
        const [lineStart, lineEnd] = lineSegments[segment];
        const distance = _line__WEBPACK_IMPORTED_MODULE_0__.distanceToPoint(lineStart, lineEnd, point);
        if (distance < minDistance) {
            minDistance = distance;
        }
    });
    return minDistance;
}
//# sourceMappingURL=distanceToPoint.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/rectangle/index.js":
/*!*********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/rectangle/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   distanceToPoint: () => (/* reexport safe */ _distanceToPoint__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _distanceToPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distanceToPoint */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/rectangle/distanceToPoint.js");


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/index.js":
/*!******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   pointInSphere: () => (/* reexport safe */ _pointInSphere__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _pointInSphere__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pointInSphere */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/pointInSphere.js");


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/pointInSphere.js":
/*!**************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/pointInSphere.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ pointInSphere)
/* harmony export */ });
function pointInSphere(sphere, pointLPS) {
    const { center, radius } = sphere;
    return ((pointLPS[0] - center[0]) ** 2 +
        (pointLPS[1] - center[1]) ** 2 +
        (pointLPS[2] - center[2]) ** 2 <=
        radius ** 2);
}
//# sourceMappingURL=pointInSphere.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/findClosestPoint.js":
/*!***************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/findClosestPoint.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ findClosestPoint)
/* harmony export */ });
function findClosestPoint(sourcePoints, targetPoint) {
    let minPoint = [0, 0];
    let minDistance = Number.MAX_SAFE_INTEGER;
    sourcePoints.forEach(function (sourcePoint) {
        const distance = _distanceBetween(targetPoint, sourcePoint);
        if (distance < minDistance) {
            minDistance = distance;
            minPoint = [...sourcePoint];
        }
    });
    return minPoint;
}
function _distanceBetween(p1, p2) {
    const [x1, y1] = p1;
    const [x2, y2] = p2;
    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
}
//# sourceMappingURL=findClosestPoint.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/index.js":
/*!****************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   findClosestPoint: () => (/* reexport safe */ _findClosestPoint__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   liangBarksyClip: () => (/* reexport safe */ _liangBarksyClip__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var _findClosestPoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./findClosestPoint */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/findClosestPoint.js");
/* harmony import */ var _liangBarksyClip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./liangBarksyClip */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/liangBarksyClip.js");



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/liangBarksyClip.js":
/*!**************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/vec2/liangBarksyClip.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ clip)
/* harmony export */ });
const EPSILON = 1e-6;
const INSIDE = 1;
const OUTSIDE = 0;
function clipT(num, denom, c) {
    const [tE, tL] = c;
    if (Math.abs(denom) < EPSILON)
        return num < 0;
    const t = num / denom;
    if (denom > 0) {
        if (t > tL)
            return 0;
        if (t > tE)
            c[0] = t;
    }
    else {
        if (t < tE)
            return 0;
        if (t < tL)
            c[1] = t;
    }
    return 1;
}
function clip(a, b, box, da, db) {
    const [x1, y1] = a;
    const [x2, y2] = b;
    const dx = x2 - x1;
    const dy = y2 - y1;
    if (da === undefined || db === undefined) {
        da = a;
        db = b;
    }
    else {
        da[0] = a[0];
        da[1] = a[1];
        db[0] = b[0];
        db[1] = b[1];
    }
    if (Math.abs(dx) < EPSILON &&
        Math.abs(dy) < EPSILON &&
        x1 >= box[0] &&
        x1 <= box[2] &&
        y1 >= box[1] &&
        y1 <= box[3]) {
        return INSIDE;
    }
    const c = [0, 1];
    if (clipT(box[0] - x1, dx, c) &&
        clipT(x1 - box[2], -dx, c) &&
        clipT(box[1] - y1, dy, c) &&
        clipT(y1 - box[3], -dy, c)) {
        const [tE, tL] = c;
        if (tL < 1) {
            db[0] = x1 + tL * dx;
            db[1] = y1 + tL * dy;
        }
        if (tE > 0) {
            da[0] += tE * dx;
            da[1] += tE * dy;
        }
        return INSIDE;
    }
    return OUTSIDE;
}
//# sourceMappingURL=liangBarksyClip.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/getOrientationStringLPS.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/getOrientationStringLPS.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOrientationStringLPS)
/* harmony export */ });
function getOrientationStringLPS(vector) {
    let orientation = '';
    const orientationX = vector[0] < 0 ? 'R' : 'L';
    const orientationY = vector[1] < 0 ? 'A' : 'P';
    const orientationZ = vector[2] < 0 ? 'F' : 'H';
    const abs = [Math.abs(vector[0]), Math.abs(vector[1]), Math.abs(vector[2])];
    const MIN = 0.0001;
    for (let i = 0; i < 3; i++) {
        if (abs[0] > MIN && abs[0] > abs[1] && abs[0] > abs[2]) {
            orientation += orientationX;
            abs[0] = 0;
        }
        else if (abs[1] > MIN && abs[1] > abs[0] && abs[1] > abs[2]) {
            orientation += orientationY;
            abs[1] = 0;
        }
        else if (abs[2] > MIN && abs[2] > abs[0] && abs[2] > abs[1]) {
            orientation += orientationZ;
            abs[2] = 0;
        }
        else if (abs[0] > MIN && abs[1] > MIN && abs[0] === abs[1]) {
            orientation += orientationX + orientationY;
            abs[0] = 0;
            abs[1] = 0;
        }
        else if (abs[0] > MIN && abs[2] > MIN && abs[0] === abs[2]) {
            orientation += orientationX + orientationZ;
            abs[0] = 0;
            abs[2] = 0;
        }
        else if (abs[1] > MIN && abs[2] > MIN && abs[1] === abs[2]) {
            orientation += orientationY + orientationZ;
            abs[1] = 0;
            abs[2] = 0;
        }
        else {
            break;
        }
    }
    return orientation;
}
//# sourceMappingURL=getOrientationStringLPS.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/index.js":
/*!******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/index.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getOrientationStringLPS: () => (/* reexport safe */ _getOrientationStringLPS__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   invertOrientationStringLPS: () => (/* reexport safe */ _invertOrientationStringLPS__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var _getOrientationStringLPS__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getOrientationStringLPS */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/getOrientationStringLPS.js");
/* harmony import */ var _invertOrientationStringLPS__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./invertOrientationStringLPS */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/invertOrientationStringLPS.js");



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/invertOrientationStringLPS.js":
/*!***************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/orientation/invertOrientationStringLPS.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ invertOrientationStringLPS)
/* harmony export */ });
function invertOrientationStringLPS(orientationString) {
    let inverted = orientationString.replace('H', 'f');
    inverted = inverted.replace('F', 'h');
    inverted = inverted.replace('R', 'l');
    inverted = inverted.replace('L', 'r');
    inverted = inverted.replace('A', 'p');
    inverted = inverted.replace('P', 'a');
    inverted = inverted.toUpperCase();
    return inverted;
}
//# sourceMappingURL=invertOrientationStringLPS.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/filterAnnotationsForDisplay.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/filterAnnotationsForDisplay.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ filterAnnotationsForDisplay)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _filterAnnotationsWithinSlice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filterAnnotationsWithinSlice */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/filterAnnotationsWithinSlice.js");


function filterAnnotationsForDisplay(viewport, annotations) {
    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
        const imageId = viewport.getCurrentImageId();
        const colonIndex = imageId.indexOf(':');
        const imageURI = imageId.substring(colonIndex + 1);
        return annotations.filter((annotation) => {
            if (!annotation.isVisible) {
                return false;
            }
            const imageId = annotation.metadata.referencedImageId;
            if (imageId === undefined) {
                return false;
            }
            const colonIndex = imageId.indexOf(':');
            const referenceImageURI = imageId.substring(colonIndex + 1);
            return referenceImageURI === imageURI;
        });
    }
    else if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.VolumeViewport) {
        const camera = viewport.getCamera();
        const { spacingInNormalDirection } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getTargetVolumeAndSpacingInNormalDir(viewport, camera);
        return (0,_filterAnnotationsWithinSlice__WEBPACK_IMPORTED_MODULE_1__["default"])(annotations, camera, spacingInNormalDirection);
    }
    else {
        throw new Error(`Viewport Type ${viewport.type} not supported`);
    }
}
//# sourceMappingURL=filterAnnotationsForDisplay.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/filterAnnotationsWithinSlice.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/filterAnnotationsWithinSlice.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ filterAnnotationsWithinSlice)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");


const { EPSILON } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.CONSTANTS;
const PARALLEL_THRESHOLD = 1 - EPSILON;
function filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection) {
    const { viewPlaneNormal } = camera;
    const annotationsWithParallelNormals = annotations.filter((td) => {
        let annotationViewPlaneNormal = td.metadata.viewPlaneNormal;
        if (!annotationViewPlaneNormal) {
            const { referencedImageId } = td.metadata;
            const { imageOrientationPatient } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.metaData.get('imagePlaneModule', referencedImageId);
            const rowCosineVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);
            const colCosineVec = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);
            annotationViewPlaneNormal = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create();
            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);
            td.metadata.viewPlaneNormal = annotationViewPlaneNormal;
        }
        const isParallel = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >
            PARALLEL_THRESHOLD;
        return annotationViewPlaneNormal && isParallel;
    });
    if (!annotationsWithParallelNormals.length) {
        return [];
    }
    const halfSpacingInNormalDirection = spacingInNormalDirection / 2;
    const { focalPoint } = camera;
    const annotationsWithinSlice = [];
    for (const annotation of annotationsWithParallelNormals) {
        const data = annotation.data;
        const point = data.handles.points[0];
        if (!annotation.isVisible) {
            continue;
        }
        const dir = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create();
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.sub(dir, focalPoint, point);
        const dot = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.dot(dir, viewPlaneNormal);
        if (Math.abs(dot) < halfSpacingInNormalDirection) {
            annotationsWithinSlice.push(annotation);
        }
    }
    return annotationsWithinSlice;
}
//# sourceMappingURL=filterAnnotationsWithinSlice.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getPointInLineOfSightWithCriteria.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getPointInLineOfSightWithCriteria.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getPointInLineOfSightWithCriteria)
/* harmony export */ });
/* harmony import */ var _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @kitware/vtk.js/Common/Core/Math */ "../../../node_modules/@kitware/vtk.js/Common/Core/Math.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");


function getPointInLineOfSightWithCriteria(viewport, worldPos, targetVolumeId, criteriaFunction, stepSize = 0.25) {
    const camera = viewport.getCamera();
    const { position: cameraPosition } = camera;
    const { spacingInNormalDirection } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.getTargetVolumeAndSpacingInNormalDir(viewport, camera, targetVolumeId);
    const step = spacingInNormalDirection * stepSize;
    const bounds = viewport.getBounds();
    const xMin = bounds[0];
    const xMax = bounds[1];
    const vector = [0, 0, 0];
    let point = [0, 0, 0];
    _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_0__["default"].subtract(worldPos, cameraPosition, vector);
    let pickedPoint;
    for (let pointT = xMin; pointT <= xMax; pointT = pointT + step) {
        point = [pointT, 0, 0];
        const t = (pointT - cameraPosition[0]) / vector[0];
        point[1] = t * vector[1] + cameraPosition[1];
        point[2] = t * vector[2] + cameraPosition[2];
        if (_inBounds(point, bounds)) {
            const intensity = viewport.getIntensityFromWorld(point);
            const pointToPick = criteriaFunction(intensity, point);
            if (pointToPick) {
                pickedPoint = pointToPick;
            }
        }
    }
    return pickedPoint;
}
const _inBounds = function (point, bounds) {
    const [xMin, xMax, yMin, yMax, zMin, zMax] = bounds;
    return (point[0] > xMin &&
        point[0] < xMax &&
        point[1] > yMin &&
        point[1] < yMax &&
        point[2] > zMin &&
        point[2] < zMax);
};
//# sourceMappingURL=getPointInLineOfSightWithCriteria.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getWorldWidthAndHeightFromCorners.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getWorldWidthAndHeightFromCorners.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWorldWidthAndHeightFromCorners)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");

function getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, topLeftWorld, bottomRightWorld) {
    const viewRight = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.cross(viewRight, viewUp, viewPlaneNormal);
    const pos1 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(...topLeftWorld);
    const pos2 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(...bottomRightWorld);
    const diagonal = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.subtract(diagonal, pos1, pos2);
    const diagonalLength = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.length(diagonal);
    if (diagonalLength < 0.0001) {
        return { worldWidth: 0, worldHeight: 0 };
    }
    const cosTheta = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.dot(diagonal, viewRight) / (diagonalLength * gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.length(viewRight));
    const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
    const worldWidth = sinTheta * diagonalLength;
    const worldHeight = cosTheta * diagonalLength;
    return { worldWidth, worldHeight };
}
//# sourceMappingURL=getWorldWidthAndHeightFromCorners.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getWorldWidthAndHeightFromTwoPoints.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getWorldWidthAndHeightFromTwoPoints.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWorldWidthAndHeightFromTwoPoints)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");

function getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2) {
    const viewRight = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.cross(viewRight, viewUp, viewPlaneNormal);
    const pos1 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(...worldPos1);
    const pos2 = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(...worldPos2);
    const diagonal = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.subtract(diagonal, pos1, pos2);
    const diagonalLength = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.length(diagonal);
    if (diagonalLength < 0.0001) {
        return { worldWidth: 0, worldHeight: 0 };
    }
    const cosTheta = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.dot(diagonal, viewRight) / (diagonalLength * gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.length(viewRight));
    const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
    const worldWidth = sinTheta * diagonalLength;
    const worldHeight = cosTheta * diagonalLength;
    return { worldWidth, worldHeight };
}
//# sourceMappingURL=getWorldWidthAndHeightFromTwoPoints.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/index.js":
/*!*************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   filterAnnotationsForDisplay: () => (/* reexport safe */ _filterAnnotationsForDisplay__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   filterAnnotationsWithinSlice: () => (/* reexport safe */ _filterAnnotationsWithinSlice__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   getPointInLineOfSightWithCriteria: () => (/* reexport safe */ _getPointInLineOfSightWithCriteria__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   getWorldWidthAndHeightFromCorners: () => (/* reexport safe */ _getWorldWidthAndHeightFromCorners__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var _filterAnnotationsWithinSlice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filterAnnotationsWithinSlice */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/filterAnnotationsWithinSlice.js");
/* harmony import */ var _getWorldWidthAndHeightFromCorners__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWorldWidthAndHeightFromCorners */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getWorldWidthAndHeightFromCorners.js");
/* harmony import */ var _filterAnnotationsForDisplay__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filterAnnotationsForDisplay */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/filterAnnotationsForDisplay.js");
/* harmony import */ var _getPointInLineOfSightWithCriteria__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getPointInLineOfSightWithCriteria */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getPointInLineOfSightWithCriteria.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    filterAnnotationsWithinSlice: _filterAnnotationsWithinSlice__WEBPACK_IMPORTED_MODULE_0__["default"],
    getWorldWidthAndHeightFromCorners: _getWorldWidthAndHeightFromCorners__WEBPACK_IMPORTED_MODULE_1__["default"],
    filterAnnotationsForDisplay: _filterAnnotationsForDisplay__WEBPACK_IMPORTED_MODULE_2__["default"],
    getPointInLineOfSightWithCriteria: _getPointInLineOfSightWithCriteria__WEBPACK_IMPORTED_MODULE_3__["default"],
});

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js":
/*!****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   interpolateAnnotation: () => (/* reexport safe */ _interpolateAnnotation__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _interpolateAnnotation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interpolateAnnotation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolateAnnotation.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    interpolateAnnotation: _interpolateAnnotation__WEBPACK_IMPORTED_MODULE_0__["default"],
});

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolateAnnotation.js":
/*!********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolateAnnotation.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ interpolateAnnotation)
/* harmony export */ });
/* harmony import */ var _tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tools */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/index.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _interpolation_interpolateSegmentPoints__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interpolation/interpolateSegmentPoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.js");



function shouldPreventInterpolation(enabledElement, annotation, knotsRatioPercentage) {
    if (!annotation?.data?.polyline || knotsRatioPercentage <= 0) {
        return true;
    }
    if (!enabledElement.viewport) {
        return true;
    }
    const { renderingEngineId, viewportId, FrameOfReferenceUID } = enabledElement;
    const toolGroup = _store__WEBPACK_IMPORTED_MODULE_1__.ToolGroupManager.getToolGroupForViewport(viewportId, renderingEngineId);
    if (annotation.metadata.FrameOfReferenceUID !== FrameOfReferenceUID) {
        return true;
    }
    if (!toolGroup) {
        return true;
    }
    const toolInstance = toolGroup.getToolInstance(annotation.metadata.toolName);
    if (!(toolInstance instanceof _tools__WEBPACK_IMPORTED_MODULE_0__.PlanarFreehandROITool)) {
        return true;
    }
    return (toolInstance.isDrawing ||
        toolInstance.isEditingOpen ||
        toolInstance.isEditingClosed);
}
function interpolateAnnotation(enabledElement, annotation, knotsRatioPercentage) {
    if (shouldPreventInterpolation(enabledElement, annotation, knotsRatioPercentage)) {
        return false;
    }
    const { viewport } = enabledElement;
    const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);
    const interpolatedCanvasPoints = ((0,_interpolation_interpolateSegmentPoints__WEBPACK_IMPORTED_MODULE_2__["default"])(canvasPoints, 0, canvasPoints.length, knotsRatioPercentage));
    if (interpolatedCanvasPoints === canvasPoints) {
        return false;
    }
    annotation.data.polyline = interpolatedCanvasPoints.map(viewport.canvasToWorld);
    return true;
}
//# sourceMappingURL=interpolateAnnotation.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolatePoints.js":
/*!****************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolatePoints.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getInterpolatedPoints: () => (/* binding */ getInterpolatedPoints),
/* harmony export */   shouldInterpolate: () => (/* binding */ shouldInterpolate)
/* harmony export */ });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/index.js");
/* harmony import */ var _interpolation_interpolateSegmentPoints__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interpolation/interpolateSegmentPoints */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.js");


function shouldInterpolate(configuration) {
    return (configuration?.interpolation?.interpolateOnAdd === true ||
        configuration?.interpolation?.interpolateOnEdit === true);
}
function isEqualByProximity(pointA, pointB) {
    return _math__WEBPACK_IMPORTED_MODULE_0__.point.distanceToPoint(pointA, pointB) < 0.001;
}
function isEqual(pointA, pointB) {
    return _math__WEBPACK_IMPORTED_MODULE_0__.point.distanceToPoint(pointA, pointB) === 0;
}
function findMatchIndexes(points, otherPoints) {
    for (let i = 0; i < points.length; i++) {
        for (let j = 0; j < otherPoints.length; j++) {
            if (isEqual(points[i], otherPoints[j])) {
                return [i, j];
            }
        }
    }
}
function followingIndex(index, size, direction) {
    return (index + size + direction) % size;
}
function circularFindNextIndexBy(listParams, otherListParams, criteria, direction) {
    const [, indexDelimiter, points] = listParams;
    const [, otherIndexDelimiter, otherPoints] = otherListParams;
    const pointsLength = points.length;
    const otherPointsLength = otherPoints.length;
    let startIndex = listParams[0];
    let otherStartIndex = otherListParams[0];
    if (!points[startIndex] ||
        !otherPoints[otherStartIndex] ||
        !points[indexDelimiter] ||
        !otherPoints[otherIndexDelimiter]) {
        return [undefined, undefined];
    }
    while (startIndex !== indexDelimiter &&
        otherStartIndex !== otherIndexDelimiter) {
        if (criteria(otherPoints[otherStartIndex], points[startIndex])) {
            return [startIndex, otherStartIndex];
        }
        startIndex = followingIndex(startIndex, pointsLength, direction);
        otherStartIndex = followingIndex(otherStartIndex, otherPointsLength, direction);
    }
    return [undefined, undefined];
}
function findChangedSegment(points, previousPoints) {
    const [firstMatchIndex, previousFirstMatchIndex] = findMatchIndexes(points, previousPoints) || [];
    const toBeNotEqualCriteria = (pointA, pointB) => isEqualByProximity(pointA, pointB) === false;
    const [lowDiffIndex, lowOtherDiffIndex] = circularFindNextIndexBy([
        followingIndex(firstMatchIndex, points.length, 1),
        firstMatchIndex,
        points,
    ], [
        followingIndex(previousFirstMatchIndex, previousPoints.length, 1),
        previousFirstMatchIndex,
        previousPoints,
    ], toBeNotEqualCriteria, 1);
    const [highIndex] = circularFindNextIndexBy([followingIndex(lowDiffIndex, points.length, -1), lowDiffIndex, points], [
        followingIndex(lowOtherDiffIndex, previousPoints.length, -1),
        lowOtherDiffIndex,
        previousPoints,
    ], toBeNotEqualCriteria, -1);
    return [lowDiffIndex, highIndex];
}
function getInterpolatedPoints(configuration, points, pointsOfReference) {
    const { interpolation } = configuration;
    const result = points;
    if (interpolation) {
        const { knotsRatioPercentageOnAdd, knotsRatioPercentageOnEdit, interpolateOnAdd = false, interpolateOnEdit = false, } = interpolation;
        const knotsRatioPercentage = pointsOfReference
            ? knotsRatioPercentageOnEdit
            : knotsRatioPercentageOnAdd;
        const isEnabled = pointsOfReference ? interpolateOnEdit : interpolateOnAdd;
        if (isEnabled) {
            const [changedIniIndex, changedEndIndex] = pointsOfReference
                ? findChangedSegment(points, pointsOfReference)
                : [0, points.length - 1];
            if (!points[changedIniIndex] || !points[changedEndIndex]) {
                return points;
            }
            return ((0,_interpolation_interpolateSegmentPoints__WEBPACK_IMPORTED_MODULE_1__["default"])(points, changedIniIndex, changedEndIndex, knotsRatioPercentage));
        }
    }
    return result;
}
//# sourceMappingURL=interpolatePoints.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/algorithms/bspline.js":
/*!*******************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/algorithms/bspline.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   interpolatePoints: () => (/* binding */ interpolatePoints)
/* harmony export */ });
/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-interpolate */ "../../../node_modules/d3-interpolate/src/index.js");
/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-array */ "../../../node_modules/d3-array/src/index.js");


function isPoints3D(points) {
    return points[0]?.length === 3;
}
function interpolatePoints(originalPoints, knotsIndexes) {
    if (!knotsIndexes ||
        knotsIndexes.length === 0 ||
        knotsIndexes.length === originalPoints.length) {
        return originalPoints;
    }
    const n = knotsIndexes[knotsIndexes.length - 1] - knotsIndexes[0] + 1;
    const xInterpolator = (0,d3_interpolate__WEBPACK_IMPORTED_MODULE_0__.interpolateBasis)(knotsIndexes.map((k) => originalPoints[k][0]));
    const yInterpolator = (0,d3_interpolate__WEBPACK_IMPORTED_MODULE_0__.interpolateBasis)(knotsIndexes.map((k) => originalPoints[k][1]));
    if (isPoints3D(originalPoints)) {
        const zInterpolator = (0,d3_interpolate__WEBPACK_IMPORTED_MODULE_0__.interpolateBasis)(knotsIndexes.map((k) => originalPoints[k][2]));
        return ((0,d3_array__WEBPACK_IMPORTED_MODULE_1__.zip)((0,d3_interpolate__WEBPACK_IMPORTED_MODULE_0__.quantize)(xInterpolator, n), (0,d3_interpolate__WEBPACK_IMPORTED_MODULE_0__.quantize)(yInterpolator, n), (0,d3_interpolate__WEBPACK_IMPORTED_MODULE_0__.quantize)(zInterpolator, n)));
    }
    else {
        return ((0,d3_array__WEBPACK_IMPORTED_MODULE_1__.zip)((0,d3_interpolate__WEBPACK_IMPORTED_MODULE_0__.quantize)(xInterpolator, n), (0,d3_interpolate__WEBPACK_IMPORTED_MODULE_0__.quantize)(yInterpolator, n)));
    }
}
//# sourceMappingURL=bspline.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.js":
/*!*************************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ interpolateSegmentPoints)
/* harmony export */ });
/* harmony import */ var _algorithms_bspline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/bspline */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/algorithms/bspline.js");

function getContinuousUniformDistributionValues(minDistributionDistance, closedInterval) {
    const result = [];
    const [intervalIni, intervalEnd] = closedInterval;
    const intervalSize = intervalEnd - intervalIni + 1;
    const intensity = Math.floor(intervalSize / minDistributionDistance);
    let x = 0;
    let continuosDistributionValue = Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;
    while (continuosDistributionValue <= intervalEnd) {
        result.push(continuosDistributionValue);
        x++;
        continuosDistributionValue =
            Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;
    }
    return result;
}
function interpolateSegmentPoints(points, iniIndex, endIndex, knotsRatioPercentage) {
    const segmentSize = endIndex - iniIndex + 1;
    const amountOfKnots = Math.floor((knotsRatioPercentage / 100) * segmentSize) ?? 1;
    const minKnotDistance = Math.floor(segmentSize / amountOfKnots) ?? 1;
    if (isNaN(segmentSize) || !segmentSize || !minKnotDistance) {
        return points;
    }
    if (segmentSize / minKnotDistance < 2) {
        return points;
    }
    const interpolationIniIndex = Math.max(0, iniIndex);
    const interpolationEndIndex = Math.min(points.length - 1, endIndex);
    const segmentPointsUnchangedBeg = points.slice(0, interpolationIniIndex);
    const segmentPointsUnchangedEnd = points.slice(interpolationEndIndex + 1, points.length);
    const knotsIndexes = getContinuousUniformDistributionValues(minKnotDistance, [
        interpolationIniIndex,
        interpolationEndIndex,
    ]);
    const interpolatedPoints = (0,_algorithms_bspline__WEBPACK_IMPORTED_MODULE_0__.interpolatePoints)(points, knotsIndexes);
    return [
        ...segmentPointsUnchangedBeg,
        ...interpolatedPoints,
        ...segmentPointsUnchangedEnd,
    ];
}
//# sourceMappingURL=interpolateSegmentPoints.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInShapeCallback.js":
/*!*********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInShapeCallback.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ pointInShapeCallback)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");

function pointInShapeCallback(imageData, pointInShapeFn, callback, boundsIJK) {
    let iMin, iMax, jMin, jMax, kMin, kMax;
    let scalarData;
    if (imageData.getScalarData) {
        scalarData = imageData.getScalarData();
    }
    else {
        scalarData = imageData
            .getPointData()
            .getScalars()
            .getData();
    }
    const dimensions = imageData.getDimensions();
    if (!boundsIJK) {
        iMin = 0;
        iMax = dimensions[0];
        jMin = 0;
        jMax = dimensions[1];
        kMin = 0;
        kMax = dimensions[2];
    }
    else {
        [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = boundsIJK;
    }
    const start = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(iMin, jMin, kMin);
    const direction = imageData.getDirection();
    const rowCosines = direction.slice(0, 3);
    const columnCosines = direction.slice(3, 6);
    const scanAxisNormal = direction.slice(6, 9);
    const spacing = imageData.getSpacing();
    const [rowSpacing, columnSpacing, scanAxisSpacing] = spacing;
    const worldPosStart = imageData.indexToWorld(start);
    const rowStep = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(rowCosines[0] * rowSpacing, rowCosines[1] * rowSpacing, rowCosines[2] * rowSpacing);
    const columnStep = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(columnCosines[0] * columnSpacing, columnCosines[1] * columnSpacing, columnCosines[2] * columnSpacing);
    const scanAxisStep = gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.fromValues(scanAxisNormal[0] * scanAxisSpacing, scanAxisNormal[1] * scanAxisSpacing, scanAxisNormal[2] * scanAxisSpacing);
    const yMultiple = dimensions[0];
    const zMultiple = dimensions[0] * dimensions[1];
    for (let k = kMin; k <= kMax; k++) {
        for (let j = jMin; j <= jMax; j++) {
            for (let i = iMin; i <= iMax; i++) {
                const pointIJK = [i, j, k];
                const dI = i - iMin;
                const dJ = j - jMin;
                const dK = k - kMin;
                const startWorld = worldPosStart;
                const pointLPS = [
                    startWorld[0] +
                        dI * rowStep[0] +
                        dJ * columnStep[0] +
                        dK * scanAxisStep[0],
                    startWorld[1] +
                        dI * rowStep[1] +
                        dJ * columnStep[1] +
                        dK * scanAxisStep[1],
                    startWorld[2] +
                        dI * rowStep[2] +
                        dJ * columnStep[2] +
                        dK * scanAxisStep[2],
                ];
                if (pointInShapeFn(pointLPS, pointIJK)) {
                    const index = k * zMultiple + j * yMultiple + i;
                    const value = scalarData[index];
                    callback({ value, index, pointIJK, pointLPS });
                }
            }
        }
    }
}
//# sourceMappingURL=pointInShapeCallback.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js":
/*!*********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ pointInSurroundingSphereCallback)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _math_sphere__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math/sphere */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/index.js");
/* harmony import */ var _pointInShapeCallback__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pointInShapeCallback */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInShapeCallback.js");
/* harmony import */ var _boundingBox__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./boundingBox */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/index.js");





const { transformWorldToIndex } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities;
function pointInSurroundingSphereCallback(imageData, circlePoints, callback, viewport) {
    const { boundsIJK, centerWorld, radiusWorld } = _getBounds(circlePoints, imageData, viewport);
    const sphereObj = {
        center: centerWorld,
        radius: radiusWorld,
    };
    (0,_pointInShapeCallback__WEBPACK_IMPORTED_MODULE_3__["default"])(imageData, (pointLPS) => (0,_math_sphere__WEBPACK_IMPORTED_MODULE_2__.pointInSphere)(sphereObj, pointLPS), callback, boundsIJK);
}
function _getBounds(circlePoints, imageData, viewport) {
    const [bottom, top] = circlePoints;
    const centerWorld = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);
    const radiusWorld = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.distance(bottom, top) / 2;
    let boundsIJK;
    if (!viewport) {
        const centerIJK = transformWorldToIndex(imageData, centerWorld);
        const spacings = imageData.getSpacing();
        const minSpacing = Math.min(...spacings);
        const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);
        boundsIJK = [
            [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],
            [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],
            [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],
        ];
        return {
            boundsIJK,
            centerWorld: centerWorld,
            radiusWorld,
        };
    }
    boundsIJK = _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld);
    return {
        boundsIJK,
        centerWorld: centerWorld,
        radiusWorld,
    };
}
function _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld) {
    const [bottom, top] = circlePoints;
    const dimensions = imageData.getDimensions();
    const camera = viewport.getCamera();
    const viewUp = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);
    const viewPlaneNormal = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);
    const viewRight = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.cross(viewRight, viewUp, viewPlaneNormal);
    const topLeftWorld = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create();
    const bottomRightWorld = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.create();
    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);
    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);
    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);
    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);
    const sphereCornersIJK = [
        transformWorldToIndex(imageData, topLeftWorld),
        (transformWorldToIndex(imageData, bottomRightWorld)),
    ];
    const boundsIJK = (0,_boundingBox__WEBPACK_IMPORTED_MODULE_4__.getBoundingBoxAroundShape)(sphereCornersIJK, dimensions);
    return boundsIJK;
}
//# sourceMappingURL=pointInSurroundingSphereCallback.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.js":
/*!******************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _boundingBox_getBoundingBoxAroundShape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../boundingBox/getBoundingBoxAroundShape */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js");
/* harmony import */ var _boundingBox_extend2DBoundingBoxInViewAxis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../boundingBox/extend2DBoundingBoxInViewAxis */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js");



function getBoundsIJKFromRectangleAnnotations(annotations, referenceVolume, options = {}) {
    const AllBoundsIJK = [];
    annotations.forEach((annotation) => {
        const { data } = annotation;
        const { points } = data.handles;
        const { imageData, dimensions } = referenceVolume;
        let pointsToUse = points;
        if (data.cachedStats?.projectionPoints) {
            const { projectionPoints } = data.cachedStats;
            pointsToUse = [].concat(...projectionPoints);
        }
        const rectangleCornersIJK = pointsToUse.map((world) => _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.transformWorldToIndex(imageData, world));
        let boundsIJK = (0,_boundingBox_getBoundingBoxAroundShape__WEBPACK_IMPORTED_MODULE_1__["default"])(rectangleCornersIJK, dimensions);
        if (options.numSlicesToProject && !data.cachedStats?.projectionPoints) {
            boundsIJK = (0,_boundingBox_extend2DBoundingBoxInViewAxis__WEBPACK_IMPORTED_MODULE_2__["default"])(boundsIJK, options.numSlicesToProject);
        }
        AllBoundsIJK.push(boundsIJK);
    });
    if (AllBoundsIJK.length === 1) {
        return AllBoundsIJK[0];
    }
    const boundsIJK = AllBoundsIJK.reduce((accumulator, currentValue) => {
        return {
            iMin: Math.min(accumulator.iMin, currentValue.iMin),
            jMin: Math.min(accumulator.jMin, currentValue.jMin),
            kMin: Math.min(accumulator.kMin, currentValue.kMin),
            iMax: Math.max(accumulator.iMax, currentValue.iMax),
            jMax: Math.max(accumulator.jMax, currentValue.jMax),
            kMax: Math.max(accumulator.kMax, currentValue.kMax),
        };
    }, {
        iMin: Infinity,
        jMin: Infinity,
        kMin: Infinity,
        iMax: -Infinity,
        jMax: -Infinity,
        kMax: -Infinity,
    });
    return boundsIJK;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getBoundsIJKFromRectangleAnnotations);
//# sourceMappingURL=getBoundsIJKFromRectangleAnnotations.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/index.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBoundsIJKFromRectangleAnnotations: () => (/* reexport safe */ _getBoundsIJKFromRectangleAnnotations__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _getBoundsIJKFromRectangleAnnotations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundsIJKFromRectangleAnnotations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.js");


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/scroll.js":
/*!*******************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/scroll.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ scroll),
/* harmony export */   scrollVolume: () => (/* binding */ scrollVolume)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function scroll(viewport, options) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(viewport.element);
    if (!enabledElement) {
        throw new Error('Scroll::Viewport is not enabled (it might be disabled)');
    }
    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport &&
        viewport.getImageIds().length === 0) {
        throw new Error('Scroll::Stack Viewport has no images');
    }
    const { type: viewportType } = viewport;
    const { volumeId, delta } = options;
    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
        viewport.scroll(delta, options.debounceLoading, options.loop);
    }
    else if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.VolumeViewport) {
        scrollVolume(viewport, volumeId, delta);
    }
    else {
        throw new Error(`Not implemented for Viewport Type: ${viewportType}`);
    }
}
function scrollVolume(viewport, volumeId, delta) {
    const { numScrollSteps, currentStepIndex, sliceRangeInfo } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getVolumeViewportScrollInfo(viewport, volumeId);
    if (!sliceRangeInfo) {
        return;
    }
    const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;
    const { focalPoint, viewPlaneNormal, position } = camera;
    const { newFocalPoint, newPosition } = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);
    viewport.setCamera({
        focalPoint: newFocalPoint,
        position: newPosition,
    });
    viewport.render();
    const desiredStepIndex = currentStepIndex + delta;
    if ((desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&
        viewport.getCurrentImageId()) {
        const VolumeScrollEventDetail = {
            volumeId,
            viewport,
            delta,
            desiredStepIndex,
            currentStepIndex,
            numScrollSteps,
            currentImageId: viewport.getCurrentImageId(),
        };
        _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.triggerEvent(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.EVENTS.VOLUME_SCROLL_OUT_OF_BOUNDS, VolumeScrollEventDetail);
    }
}
//# sourceMappingURL=scroll.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushSizeForToolGroup.js":
/*!***********************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushSizeForToolGroup.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBrushSizeForToolGroup: () => (/* binding */ getBrushSizeForToolGroup),
/* harmony export */   setBrushSizeForToolGroup: () => (/* binding */ setBrushSizeForToolGroup)
/* harmony export */ });
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");
/* harmony import */ var _triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js");




function setBrushSizeForToolGroup(toolGroupId, brushSize) {
    const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_0__.getToolGroup)(toolGroupId);
    if (toolGroup === undefined) {
        return;
    }
    const brushBasedToolInstances = (0,_utilities__WEBPACK_IMPORTED_MODULE_3__["default"])(toolGroupId);
    brushBasedToolInstances.forEach((tool) => {
        tool.configuration.brushSize = brushSize;
        tool.invalidateBrushCursor();
    });
    const viewportsInfo = toolGroup.getViewportsInfo();
    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);
    if (!viewportsInfoArray.length) {
        return;
    }
    const { renderingEngineId } = viewportsInfoArray[0];
    const viewportIds = toolGroup.getViewportIds();
    const renderingEngine = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getRenderingEngine)(renderingEngineId);
    (0,_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_1__["default"])(renderingEngine, viewportIds);
}
function getBrushSizeForToolGroup(toolGroupId) {
    const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_0__.getToolGroup)(toolGroupId);
    if (toolGroup === undefined) {
        return;
    }
    const toolInstances = toolGroup._toolInstances;
    if (!Object.keys(toolInstances).length) {
        return;
    }
    const brushBasedToolInstances = (0,_utilities__WEBPACK_IMPORTED_MODULE_3__["default"])(toolGroupId);
    const brushToolInstance = brushBasedToolInstances[0];
    if (!brushToolInstance) {
        return;
    }
    return brushToolInstance.configuration.brushSize;
}
//# sourceMappingURL=brushSizeForToolGroup.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushThresholdForToolGroup.js":
/*!****************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushThresholdForToolGroup.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBrushThresholdForToolGroup: () => (/* binding */ getBrushThresholdForToolGroup),
/* harmony export */   setBrushThresholdForToolGroup: () => (/* binding */ setBrushThresholdForToolGroup)
/* harmony export */ });
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");
/* harmony import */ var _triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../triggerAnnotationRenderForViewportIds */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js");
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js");




function setBrushThresholdForToolGroup(toolGroupId, threshold) {
    const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_0__.getToolGroup)(toolGroupId);
    if (toolGroup === undefined) {
        return;
    }
    const brushBasedToolInstances = (0,_utilities__WEBPACK_IMPORTED_MODULE_3__["default"])(toolGroupId);
    brushBasedToolInstances.forEach((tool) => {
        tool.configuration.strategySpecificConfiguration.THRESHOLD_INSIDE_CIRCLE.threshold =
            threshold;
    });
    const viewportsInfo = toolGroup.getViewportsInfo();
    if (!viewportsInfo.length) {
        return;
    }
    const { renderingEngineId } = viewportsInfo[0];
    const viewportIds = toolGroup.getViewportIds();
    const renderingEngine = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_2__.getRenderingEngine)(renderingEngineId);
    (0,_triggerAnnotationRenderForViewportIds__WEBPACK_IMPORTED_MODULE_1__["default"])(renderingEngine, viewportIds);
}
function getBrushThresholdForToolGroup(toolGroupId) {
    const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_0__.getToolGroup)(toolGroupId);
    if (toolGroup === undefined) {
        return;
    }
    const toolInstances = toolGroup._toolInstances;
    if (!Object.keys(toolInstances).length) {
        return;
    }
    const brushBasedToolInstances = (0,_utilities__WEBPACK_IMPORTED_MODULE_3__["default"])(toolGroupId);
    const brushToolInstance = brushBasedToolInstances[0];
    if (!brushToolInstance) {
        return;
    }
    return brushToolInstance.configuration.strategySpecificConfiguration
        .THRESHOLD_INSIDE_CIRCLE.threshold;
}
//# sourceMappingURL=brushThresholdForToolGroup.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapVolumeForViewport.js":
/*!*********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapVolumeForViewport.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createLabelmapVolumeForViewport)
/* harmony export */ });
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.clonedeep */ "../../../node_modules/lodash.clonedeep/index.js");
/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");


async function createLabelmapVolumeForViewport(input) {
    const { viewportId, renderingEngineId, options } = input;
    let { segmentationId } = input;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.getEnabledElementByIds)(viewportId, renderingEngineId);
    if (!enabledElement) {
        throw new Error('element disabled');
    }
    const { viewport } = enabledElement;
    if (!(viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.VolumeViewport)) {
        throw new Error('Segmentation only supports VolumeViewport');
    }
    const { uid } = viewport.getDefaultActor();
    if (segmentationId === undefined) {
        segmentationId = `${uid}-based-segmentation-${options?.volumeId ?? _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.utilities.uuidv4().slice(0, 8)}`;
    }
    if (options) {
        const properties = (0,lodash_clonedeep__WEBPACK_IMPORTED_MODULE_0__._cloneDeep)(options);
        await _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.volumeLoader.createLocalVolume(properties, segmentationId);
    }
    else {
        const { uid: volumeId } = viewport.getDefaultActor();
        await _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_1__.volumeLoader.createAndCacheDerivedVolume(volumeId, {
            volumeId: segmentationId,
        });
    }
    return segmentationId;
}
//# sourceMappingURL=createLabelmapVolumeForViewport.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createMergedLabelmapForIndex.js":
/*!******************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createMergedLabelmapForIndex.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function createMergedLabelmapForIndex(labelmaps, segmentIndex = 1, volumeId = 'mergedLabelmap') {
    labelmaps.forEach(({ direction, dimensions, origin, spacing }) => {
        if (!_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.isEqual(dimensions, labelmaps[0].dimensions) ||
            !_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.isEqual(direction, labelmaps[0].direction) ||
            !_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.isEqual(spacing, labelmaps[0].spacing) ||
            !_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.isEqual(origin, labelmaps[0].origin)) {
            throw new Error('labelmaps must have the same size and shape');
        }
    });
    const labelmap = labelmaps[0];
    const arrayType = labelmap.getScalarData().constructor;
    const outputData = new arrayType(labelmap.getScalarData().length);
    labelmaps.forEach((labelmap) => {
        const scalarData = labelmap.getScalarData();
        for (let i = 0; i < scalarData.length; i++) {
            if (scalarData[i] === segmentIndex) {
                outputData[i] = segmentIndex;
            }
        }
    });
    const options = {
        scalarData: outputData,
        metadata: labelmap.metadata,
        spacing: labelmap.spacing,
        origin: labelmap.origin,
        direction: labelmap.direction,
        dimensions: labelmap.dimensions,
    };
    const preventCache = true;
    const mergedVolume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.volumeLoader.createLocalVolume(options, volumeId, preventCache);
    return mergedVolume;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createMergedLabelmapForIndex);
//# sourceMappingURL=createMergedLabelmapForIndex.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function floodFill(getter, seed, options = {}) {
    const onFlood = options.onFlood;
    const onBoundary = options.onBoundary;
    const equals = options.equals || defaultEquals;
    const diagonals = options.diagonals || false;
    const startNode = get(seed);
    const permutations = prunedPermutations();
    const stack = [];
    const flooded = [];
    const visits = {};
    const bounds = {};
    stack.push({ currentArgs: seed });
    while (stack.length > 0) {
        flood(stack.pop());
    }
    return {
        flooded,
        boundaries: boundaries(),
    };
    function flood(job) {
        const getArgs = job.currentArgs;
        const prevArgs = job.previousArgs;
        if (visited(getArgs)) {
            return;
        }
        markAsVisited(getArgs);
        if (member(getArgs)) {
            markAsFlooded(getArgs);
            pushAdjacent(getArgs);
        }
        else {
            markAsBoundary(prevArgs);
        }
    }
    function visited(key) {
        return visits[key] === true;
    }
    function markAsVisited(key) {
        visits[key] = true;
    }
    function member(getArgs) {
        const node = safely(get, [getArgs]);
        return safely(equals, [node, startNode]);
    }
    function markAsFlooded(getArgs) {
        flooded.push(getArgs);
        if (onFlood) {
            onFlood(...getArgs);
        }
    }
    function markAsBoundary(prevArgs) {
        bounds[prevArgs] = prevArgs;
        if (onBoundary) {
            onBoundary(...prevArgs);
        }
    }
    function pushAdjacent(getArgs) {
        for (let i = 0; i < permutations.length; i += 1) {
            const perm = permutations[i];
            const nextArgs = getArgs.slice(0);
            for (let j = 0; j < getArgs.length; j += 1) {
                nextArgs[j] += perm[j];
            }
            stack.push({
                currentArgs: nextArgs,
                previousArgs: getArgs,
            });
        }
    }
    function get(getArgs) {
        return getter(...getArgs);
    }
    function safely(f, args) {
        try {
            return f(...args);
        }
        catch (error) {
            return;
        }
    }
    function prunedPermutations() {
        const permutations = permute(seed.length);
        return permutations.filter(function (perm) {
            const count = countNonZeroes(perm);
            return count !== 0 && (count === 1 || diagonals);
        });
    }
    function permute(length) {
        const perms = [];
        const permutation = function (string) {
            return string.split('').map(function (c) {
                return parseInt(c, 10) - 1;
            });
        };
        for (let i = 0; i < Math.pow(3, length); i += 1) {
            const string = lpad(i.toString(3), '0', length);
            perms.push(permutation(string));
        }
        return perms;
    }
    function boundaries() {
        const array = [];
        for (const key in bounds) {
            if (bounds[key] !== undefined) {
                array.unshift(bounds[key]);
            }
        }
        return array;
    }
}
function defaultEquals(a, b) {
    return a === b;
}
function countNonZeroes(array) {
    let count = 0;
    for (let i = 0; i < array.length; i += 1) {
        if (array[i] !== 0) {
            count += 1;
        }
    }
    return count;
}
function lpad(string, character, length) {
    const array = new Array(length + 1);
    const pad = array.join(character);
    return (pad + string).slice(-length);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (floodFill);
//# sourceMappingURL=floodFill.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getDefaultRepresentationConfig.js":
/*!********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getDefaultRepresentationConfig.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDefaultRepresentationConfig)
/* harmony export */ });
/* harmony import */ var _tools_displayTools_Labelmap_labelmapConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tools/displayTools/Labelmap/labelmapConfig */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapConfig.js");
/* harmony import */ var _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums/SegmentationRepresentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js");


function getDefaultRepresentationConfig(segmentation) {
    const { type: representationType } = segmentation;
    switch (representationType) {
        case _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_1__["default"].Labelmap:
            return (0,_tools_displayTools_Labelmap_labelmapConfig__WEBPACK_IMPORTED_MODULE_0__["default"])();
        default:
            throw new Error(`Unknown representation type: ${representationType}`);
    }
}
//# sourceMappingURL=getDefaultRepresentationConfig.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/index.js":
/*!*******************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/index.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createLabelmapVolumeForViewport: () => (/* reexport safe */ _createLabelmapVolumeForViewport__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   createMergedLabelmapForIndex: () => (/* reexport safe */ _createMergedLabelmapForIndex__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   floodFill: () => (/* reexport safe */ _floodFill__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   getBrushSizeForToolGroup: () => (/* reexport safe */ _brushSizeForToolGroup__WEBPACK_IMPORTED_MODULE_8__.getBrushSizeForToolGroup),
/* harmony export */   getBrushThresholdForToolGroup: () => (/* reexport safe */ _brushThresholdForToolGroup__WEBPACK_IMPORTED_MODULE_9__.getBrushThresholdForToolGroup),
/* harmony export */   getDefaultRepresentationConfig: () => (/* reexport safe */ _getDefaultRepresentationConfig__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   isValidRepresentationConfig: () => (/* reexport safe */ _isValidRepresentationConfig__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   rectangleROIThresholdVolumeByRange: () => (/* reexport safe */ _rectangleROIThresholdVolumeByRange__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   setBrushSizeForToolGroup: () => (/* reexport safe */ _brushSizeForToolGroup__WEBPACK_IMPORTED_MODULE_8__.setBrushSizeForToolGroup),
/* harmony export */   setBrushThresholdForToolGroup: () => (/* reexport safe */ _brushThresholdForToolGroup__WEBPACK_IMPORTED_MODULE_9__.setBrushThresholdForToolGroup),
/* harmony export */   thresholdSegmentationByRange: () => (/* reexport safe */ _thresholdSegmentationByRange__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   thresholdVolumeByRange: () => (/* reexport safe */ _thresholdVolumeByRange__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   triggerSegmentationRender: () => (/* reexport safe */ _triggerSegmentationRender__WEBPACK_IMPORTED_MODULE_6__.triggerSegmentationRender)
/* harmony export */ });
/* harmony import */ var _thresholdVolumeByRange__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./thresholdVolumeByRange */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdVolumeByRange.js");
/* harmony import */ var _rectangleROIThresholdVolumeByRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rectangleROIThresholdVolumeByRange */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/rectangleROIThresholdVolumeByRange.js");
/* harmony import */ var _createMergedLabelmapForIndex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createMergedLabelmapForIndex */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createMergedLabelmapForIndex.js");
/* harmony import */ var _isValidRepresentationConfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isValidRepresentationConfig */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/isValidRepresentationConfig.js");
/* harmony import */ var _getDefaultRepresentationConfig__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getDefaultRepresentationConfig */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getDefaultRepresentationConfig.js");
/* harmony import */ var _createLabelmapVolumeForViewport__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./createLabelmapVolumeForViewport */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createLabelmapVolumeForViewport.js");
/* harmony import */ var _triggerSegmentationRender__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./triggerSegmentationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/triggerSegmentationRender.js");
/* harmony import */ var _floodFill__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./floodFill */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js");
/* harmony import */ var _brushSizeForToolGroup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./brushSizeForToolGroup */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushSizeForToolGroup.js");
/* harmony import */ var _brushThresholdForToolGroup__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./brushThresholdForToolGroup */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/brushThresholdForToolGroup.js");
/* harmony import */ var _thresholdSegmentationByRange__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./thresholdSegmentationByRange */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdSegmentationByRange.js");












//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/isValidRepresentationConfig.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/isValidRepresentationConfig.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isValidRepresentationConfig)
/* harmony export */ });
/* harmony import */ var _tools_displayTools_Labelmap_labelmapConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../tools/displayTools/Labelmap/labelmapConfig */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapConfig.js");
/* harmony import */ var _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums/SegmentationRepresentations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js");


function isValidRepresentationConfig(representationType, config) {
    switch (representationType) {
        case _enums_SegmentationRepresentations__WEBPACK_IMPORTED_MODULE_1__["default"].Labelmap:
            return (0,_tools_displayTools_Labelmap_labelmapConfig__WEBPACK_IMPORTED_MODULE_0__.isValidLabelmapConfig)(config);
        default:
            throw new Error(`Unknown representation type: ${representationType}`);
    }
}
//# sourceMappingURL=isValidRepresentationConfig.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/rectangleROIThresholdVolumeByRange.js":
/*!************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/rectangleROIThresholdVolumeByRange.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _stateManagement_annotation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../stateManagement/annotation */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/annotation/index.js");
/* harmony import */ var _tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../tools */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/index.js");
/* harmony import */ var _thresholdVolumeByRange__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./thresholdVolumeByRange */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdVolumeByRange.js");
/* harmony import */ var _rectangleROITool_getBoundsIJKFromRectangleAnnotations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../rectangleROITool/getBoundsIJKFromRectangleAnnotations */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.js");




function rectangleROIThresholdVolumeByRange(annotationUIDs, segmentationVolume, thresholdVolumeInformation, options) {
    const annotations = annotationUIDs.map((annotationUID) => {
        return _stateManagement_annotation__WEBPACK_IMPORTED_MODULE_0__.state.getAnnotation(annotationUID);
    });
    _validateAnnotations(annotations);
    let boundsIJK;
    for (let i = 0; i < thresholdVolumeInformation.length; i++) {
        const volumeSize = thresholdVolumeInformation[i].volume.getScalarData().length;
        if (volumeSize === segmentationVolume.getScalarData().length || i === 0) {
            boundsIJK = (0,_rectangleROITool_getBoundsIJKFromRectangleAnnotations__WEBPACK_IMPORTED_MODULE_3__["default"])(annotations, thresholdVolumeInformation[i].volume, options);
        }
    }
    const outputSegmentationVolume = (0,_thresholdVolumeByRange__WEBPACK_IMPORTED_MODULE_2__["default"])(segmentationVolume, thresholdVolumeInformation, { ...options, boundsIJK });
    return outputSegmentationVolume;
}
function _validateAnnotations(annotations) {
    const validToolNames = [
        _tools__WEBPACK_IMPORTED_MODULE_1__.RectangleROIThresholdTool.toolName,
        _tools__WEBPACK_IMPORTED_MODULE_1__.RectangleROIStartEndThresholdTool.toolName,
    ];
    for (const annotation of annotations) {
        const name = annotation.metadata.toolName;
        if (!validToolNames.includes(name)) {
            throw new Error('rectangleROIThresholdVolumeByRange only supports RectangleROIThreshold and RectangleROIStartEndThreshold annotations');
        }
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rectangleROIThresholdVolumeByRange);
//# sourceMappingURL=rectangleROIThresholdVolumeByRange.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdSegmentationByRange.js":
/*!******************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdSegmentationByRange.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");
/* harmony import */ var _stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../stateManagement/segmentation/triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js");



function thresholdSegmentationByRange(segmentationVolume, segmentationIndex, thresholdVolumeInformation, overlapType) {
    const scalarData = segmentationVolume.getScalarData();
    const { baseVolumeIdx, volumeInfoList } = (0,_utilities__WEBPACK_IMPORTED_MODULE_2__.processVolumes)(segmentationVolume, thresholdVolumeInformation);
    volumeInfoList.forEach((volumeInfo) => {
        const { volumeSize } = volumeInfo;
        if (volumeSize === scalarData.length) {
            _handleSameSizeVolume(scalarData, segmentationIndex, volumeInfo);
        }
        else {
            _handleDifferentSizeVolume(scalarData, segmentationIndex, volumeInfo, volumeInfoList, baseVolumeIdx, overlapType);
        }
    });
    (0,_stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationDataModified)(segmentationVolume.volumeId);
    return segmentationVolume;
}
function _handleDifferentSizeVolume(scalarData, segmentationIndex, volumeInfo, volumeInfoList, baseVolumeIdx, overlapType) {
    const { imageData, lower, upper, dimensions } = volumeInfo;
    let total, overlaps, range;
    for (let i = 0; i < scalarData.length; i++) {
        if (scalarData[i] === segmentationIndex) {
            const overlapBounds = (0,_utilities__WEBPACK_IMPORTED_MODULE_2__.getVoxelOverlap)(imageData, dimensions, volumeInfoList[baseVolumeIdx].spacing, volumeInfoList[baseVolumeIdx].imageData.getPoint(i));
            const callbackOverlap = ({ value }) => {
                total = total + 1;
                if (value >= range.lower && value <= range.upper) {
                    overlaps = overlaps + 1;
                }
            };
            total = 0;
            overlaps = 0;
            range = { lower, upper };
            let overlapTest = false;
            (0,_utilities__WEBPACK_IMPORTED_MODULE_0__.pointInShapeCallback)(imageData, () => true, callbackOverlap, overlapBounds);
            overlapTest = overlapType === 0 ? overlaps > 0 : overlaps === total;
            scalarData[i] = overlapTest ? segmentationIndex : 0;
        }
    }
    return { total, range, overlaps };
}
function _handleSameSizeVolume(scalarData, segmentationIndex, volumeInfo) {
    const { referenceValues, lower, upper } = volumeInfo;
    for (let i = 0; i < scalarData.length; i++) {
        if (scalarData[i] === segmentationIndex) {
            const value = referenceValues[i];
            scalarData[i] = value >= lower && value <= upper ? segmentationIndex : 0;
        }
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (thresholdSegmentationByRange);
//# sourceMappingURL=thresholdSegmentationByRange.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdVolumeByRange.js":
/*!************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdVolumeByRange.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js");
/* harmony import */ var _stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../stateManagement/segmentation/triggerSegmentationEvents */ "../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utilities */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js");



function thresholdVolumeByRange(segmentationVolume, thresholdVolumeInformation, options) {
    const { imageData: segmentationImageData } = segmentationVolume;
    const scalarData = segmentationVolume.getScalarData();
    const { overwrite, boundsIJK } = options;
    const overlapType = options?.overlapType || 0;
    if (overwrite) {
        for (let i = 0; i < scalarData.length; i++) {
            scalarData[i] = 0;
        }
    }
    const { baseVolumeIdx, volumeInfoList } = (0,_utilities__WEBPACK_IMPORTED_MODULE_2__.processVolumes)(segmentationVolume, thresholdVolumeInformation);
    let overlaps, total, range;
    const testOverlapRange = (volumeInfo, voxelSpacing, voxelCenter) => {
        const callbackOverlap = ({ value }) => {
            total = total + 1;
            if (value >= range.lower && value <= range.upper) {
                overlaps = overlaps + 1;
            }
        };
        const { imageData, dimensions, lower, upper } = volumeInfo;
        const overlapBounds = (0,_utilities__WEBPACK_IMPORTED_MODULE_2__.getVoxelOverlap)(imageData, dimensions, voxelSpacing, voxelCenter);
        total = 0;
        overlaps = 0;
        range = { lower, upper };
        let overlapTest = false;
        (0,_utilities__WEBPACK_IMPORTED_MODULE_0__.pointInShapeCallback)(imageData, () => true, callbackOverlap, overlapBounds);
        if (overlapType === 0) {
            overlapTest = overlaps > 0;
        }
        else if (overlapType == 1) {
            overlapTest = overlaps === total;
        }
        return overlapTest;
    };
    const testRange = (volumeInfo, pointIJK) => {
        const { imageData, referenceValues, lower, upper } = volumeInfo;
        const offset = imageData.computeOffsetIndex(pointIJK);
        const value = referenceValues[offset];
        if (value <= lower || value >= upper) {
            return false;
        }
        else {
            return true;
        }
    };
    const callback = ({ index, pointIJK, pointLPS }) => {
        let insert = volumeInfoList.length > 0;
        for (let i = 0; i < volumeInfoList.length; i++) {
            if (volumeInfoList[i].volumeSize === scalarData.length) {
                insert = testRange(volumeInfoList[i], pointIJK);
            }
            else {
                insert = testOverlapRange(volumeInfoList[i], volumeInfoList[baseVolumeIdx].spacing, pointLPS);
            }
            if (!insert) {
                break;
            }
        }
        if (insert)
            scalarData[index] = 1;
    };
    (0,_utilities__WEBPACK_IMPORTED_MODULE_0__.pointInShapeCallback)(segmentationImageData, () => true, callback, boundsIJK);
    (0,_stateManagement_segmentation_triggerSegmentationEvents__WEBPACK_IMPORTED_MODULE_1__.triggerSegmentationDataModified)(segmentationVolume.volumeId);
    return segmentationVolume;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (thresholdVolumeByRange);
//# sourceMappingURL=thresholdVolumeByRange.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/triggerSegmentationRender.js":
/*!***************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/triggerSegmentationRender.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   segmentationRenderingEngine: () => (/* binding */ segmentationRenderingEngine),
/* harmony export */   triggerSegmentationRender: () => (/* binding */ triggerSegmentationRender)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");
/* harmony import */ var _tools_displayTools_SegmentationDisplayTool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../tools/displayTools/SegmentationDisplayTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/SegmentationDisplayTool.js");




class SegmentationRenderingEngine {
    constructor() {
        this._needsRender = new Set();
        this._animationFrameSet = false;
        this._animationFrameHandle = null;
        this._renderFlaggedToolGroups = () => {
            this._throwIfDestroyed();
            const toolGroupIds = Array.from(this._needsRender.values());
            for (const toolGroupId of toolGroupIds) {
                this._triggerRender(toolGroupId);
                this._needsRender.delete(toolGroupId);
                if (this._needsRender.size === 0) {
                    this._animationFrameSet = false;
                    this._animationFrameHandle = null;
                    return;
                }
            }
        };
    }
    removeToolGroup(toolGroupId) {
        this._needsRender.delete(toolGroupId);
        if (this._needsRender.size === 0) {
            this._reset();
        }
    }
    renderToolGroupSegmentations(toolGroupId) {
        this._setToolGroupSegmentationToBeRenderedNextFrame([toolGroupId]);
    }
    _throwIfDestroyed() {
        if (this.hasBeenDestroyed) {
            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');
        }
    }
    _setToolGroupSegmentationToBeRenderedNextFrame(toolGroupIds) {
        toolGroupIds.forEach((toolGroupId) => {
            this._needsRender.add(toolGroupId);
        });
        this._render();
    }
    _render() {
        if (this._needsRender.size > 0 && this._animationFrameSet === false) {
            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedToolGroups);
            this._animationFrameSet = true;
        }
    }
    _triggerRender(toolGroupId) {
        const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_2__.getToolGroup)(toolGroupId);
        if (!toolGroup) {
            console.warn(`No tool group found with toolGroupId: ${toolGroupId}`);
            return;
        }
        const { viewportsInfo } = toolGroup;
        const viewports = [];
        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {
            const renderingEngine = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getRenderingEngine)(renderingEngineId);
            if (!renderingEngine) {
                console.warn('rendering Engine has been destroyed');
                return;
            }
            viewports.push(renderingEngine.getViewport(viewportId));
        });
        const segmentationDisplayToolInstance = toolGroup.getToolInstance(_tools_displayTools_SegmentationDisplayTool__WEBPACK_IMPORTED_MODULE_3__["default"].toolName);
        if (!segmentationDisplayToolInstance) {
            console.warn('No segmentation tool found inside', toolGroupId);
            return;
        }
        function onSegmentationRender(evt) {
            const { element, viewportId, renderingEngineId } = evt.detail;
            element.removeEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.IMAGE_RENDERED, onSegmentationRender);
            const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_2__.getToolGroupForViewport)(viewportId, renderingEngineId);
            if (!toolGroup) {
                console.warn('toolGroup has been destroyed');
                return;
            }
            const eventDetail = {
                toolGroupId: toolGroup.id,
                viewportId,
            };
            (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget, _enums__WEBPACK_IMPORTED_MODULE_1__.Events.SEGMENTATION_RENDERED, {
                ...eventDetail,
            });
        }
        viewports.forEach(({ element }) => {
            element.addEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.IMAGE_RENDERED, onSegmentationRender);
        });
        segmentationDisplayToolInstance.renderSegmentation(toolGroupId);
    }
    _reset() {
        window.cancelAnimationFrame(this._animationFrameHandle);
        this._needsRender.clear();
        this._animationFrameSet = false;
        this._animationFrameHandle = null;
    }
}
const segmentationRenderingEngine = new SegmentationRenderingEngine();
function triggerSegmentationRender(toolGroupId) {
    segmentationRenderingEngine.renderToolGroupSegmentations(toolGroupId);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (triggerSegmentationRender);
//# sourceMappingURL=triggerSegmentationRender.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js":
/*!***********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBrushToolInstances),
/* harmony export */   getVoxelOverlap: () => (/* binding */ getVoxelOverlap),
/* harmony export */   processVolumes: () => (/* binding */ processVolumes)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../store/ToolGroupManager */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/index.js");
/* harmony import */ var _tools_segmentation_BrushTool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../tools/segmentation/BrushTool */ "../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js");
/* harmony import */ var _boundingBox_getBoundingBoxAroundShape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../boundingBox/getBoundingBoxAroundShape */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js");




function getBrushToolInstances(toolGroupId) {
    const toolGroup = (0,_store_ToolGroupManager__WEBPACK_IMPORTED_MODULE_1__.getToolGroup)(toolGroupId);
    if (toolGroup === undefined) {
        return;
    }
    const toolInstances = toolGroup._toolInstances;
    if (!Object.keys(toolInstances).length) {
        return;
    }
    const brushBasedToolInstances = Object.values(toolInstances).filter((toolInstance) => toolInstance instanceof _tools_segmentation_BrushTool__WEBPACK_IMPORTED_MODULE_2__["default"]);
    return brushBasedToolInstances;
}
const equalsCheck = (a, b) => {
    return JSON.stringify(a) === JSON.stringify(b);
};
function getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter) {
    const voxelCornersWorld = [];
    for (let i = 0; i < 2; i++) {
        for (let j = 0; j < 2; j++) {
            for (let k = 0; k < 2; k++) {
                const point = voxelCenter;
                point[0] = point[0] + ((i * 2 - 1) * voxelSpacing[0]) / 2;
                point[1] = point[1] + ((j * 2 - 1) * voxelSpacing[1]) / 2;
                point[2] = point[2] + ((k * 2 - 1) * voxelSpacing[2]) / 2;
                voxelCornersWorld.push(point);
            }
        }
    }
    const voxelCornersIJK = voxelCornersWorld.map((world) => _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.transformWorldToIndex(imageData, world));
    const overlapBounds = (0,_boundingBox_getBoundingBoxAroundShape__WEBPACK_IMPORTED_MODULE_3__["default"])(voxelCornersIJK, dimensions);
    return overlapBounds;
}
function processVolumes(segmentationVolume, thresholdVolumeInformation) {
    const { spacing: segmentationSpacing, imageData: segmentationImageData } = segmentationVolume;
    const scalarData = segmentationVolume.getScalarData();
    const volumeInfoList = [];
    let baseVolumeIdx = 0;
    for (let i = 0; i < thresholdVolumeInformation.length; i++) {
        const { imageData, spacing, dimensions } = thresholdVolumeInformation[i].volume;
        const volumeSize = thresholdVolumeInformation[i].volume.getScalarData().length;
        if (volumeSize === scalarData.length &&
            equalsCheck(spacing, segmentationSpacing)) {
            baseVolumeIdx = i;
        }
        const referenceValues = imageData.getPointData().getScalars().getData();
        const lower = thresholdVolumeInformation[i].lower;
        const upper = thresholdVolumeInformation[i].upper;
        volumeInfoList.push({
            imageData,
            referenceValues,
            lower,
            upper,
            spacing,
            dimensions,
            volumeSize,
        });
    }
    return {
        volumeInfoList,
        baseVolumeIdx,
    };
}
//# sourceMappingURL=utilities.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/index.js":
/*!********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   disable: () => (/* reexport safe */ _stackPrefetch__WEBPACK_IMPORTED_MODULE_0__.disable),
/* harmony export */   enable: () => (/* reexport safe */ _stackPrefetch__WEBPACK_IMPORTED_MODULE_0__.enable),
/* harmony export */   getConfiguration: () => (/* reexport safe */ _stackPrefetch__WEBPACK_IMPORTED_MODULE_0__.getConfiguration),
/* harmony export */   setConfiguration: () => (/* reexport safe */ _stackPrefetch__WEBPACK_IMPORTED_MODULE_0__.setConfiguration)
/* harmony export */ });
/* harmony import */ var _stackPrefetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stackPrefetch */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackPrefetch.js");


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackPrefetch.js":
/*!****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/stackPrefetch.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   disable: () => (/* binding */ disable),
/* harmony export */   enable: () => (/* binding */ enable),
/* harmony export */   getConfiguration: () => (/* binding */ getConfiguration),
/* harmony export */   setConfiguration: () => (/* binding */ setConfiguration)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/state.js");


const requestType = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.RequestType.Prefetch;
const priority = 0;
const addToBeginning = true;
let configuration = {
    maxImagesToPrefetch: Infinity,
    preserveExistingPool: false,
};
let resetPrefetchTimeout;
const resetPrefetchDelay = 10;
function range(lowEnd, highEnd) {
    lowEnd = Math.round(lowEnd) || 0;
    highEnd = Math.round(highEnd) || 0;
    const arr = [];
    let c = highEnd - lowEnd + 1;
    if (c <= 0) {
        return arr;
    }
    while (c--) {
        arr[c] = highEnd--;
    }
    return arr;
}
function nearestIndex(arr, x) {
    let low = 0;
    let high = arr.length - 1;
    arr.forEach((v, idx) => {
        if (v < x) {
            low = Math.max(idx, low);
        }
        else if (v > x) {
            high = Math.min(idx, high);
        }
    });
    return { low, high };
}
function getStackData(element) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    if (!enabledElement) {
        throw new Error('stackPrefetch: element must be a valid Cornerstone enabled element');
    }
    const { viewport } = enabledElement;
    if (!(viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport)) {
        throw new Error('stackPrefetch: element must be a StackViewport, VolumeViewport stackPrefetch not yet implemented');
    }
    return {
        currentImageIdIndex: viewport.getCurrentImageIdIndex(),
        imageIds: viewport.getImageIds(),
    };
}
function prefetch(element) {
    const stackPrefetchData = (0,_state__WEBPACK_IMPORTED_MODULE_1__.getToolState)(element);
    if (!stackPrefetchData) {
        return;
    }
    const stackPrefetch = stackPrefetchData || {};
    const stack = getStackData(element);
    if (!stack || !stack.imageIds || stack.imageIds.length === 0) {
        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');
        return;
    }
    if (!stackPrefetch.indicesToRequest ||
        !stackPrefetch.indicesToRequest.length) {
        stackPrefetch.enabled = false;
    }
    if (stackPrefetch.enabled === false) {
        return;
    }
    function removeFromList(imageIdIndex) {
        const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);
        if (index > -1) {
            stackPrefetch.indicesToRequest.splice(index, 1);
        }
    }
    stackPrefetchData.indicesToRequest.sort((a, b) => a - b);
    const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();
    indicesToRequestCopy.forEach(function (imageIdIndex) {
        const imageId = stack.imageIds[imageIdIndex];
        if (!imageId) {
            return;
        }
        const imageLoadObject = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getImageLoadObject(imageId);
        if (imageLoadObject) {
            removeFromList(imageIdIndex);
        }
    });
    if (!stackPrefetch.indicesToRequest.length) {
        return;
    }
    if (!configuration.preserveExistingPool) {
        _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.imageLoadPoolManager.clearRequestStack(requestType);
    }
    const nearest = nearestIndex(stackPrefetch.indicesToRequest, stack.currentImageIdIndex);
    let imageId;
    let nextImageIdIndex;
    const preventCache = false;
    function doneCallback(image) {
        console.log('prefetch done: %s', image.imageId);
        const imageIdIndex = stack.imageIds.indexOf(image.imageId);
        removeFromList(imageIdIndex);
    }
    let lowerIndex = nearest.low;
    let higherIndex = nearest.high;
    const imageIdsToPrefetch = [];
    while (lowerIndex >= 0 ||
        higherIndex < stackPrefetch.indicesToRequest.length) {
        const currentIndex = stack.currentImageIdIndex;
        const shouldSkipLower = currentIndex - stackPrefetch.indicesToRequest[lowerIndex] >
            configuration.maxImagesToPrefetch;
        const shouldSkipHigher = stackPrefetch.indicesToRequest[higherIndex] - currentIndex >
            configuration.maxImagesToPrefetch;
        const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;
        const shouldLoadHigher = !shouldSkipHigher && higherIndex < stackPrefetch.indicesToRequest.length;
        if (!shouldLoadHigher && !shouldLoadLower) {
            break;
        }
        if (shouldLoadLower) {
            nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];
            imageId = stack.imageIds[nextImageIdIndex];
            imageIdsToPrefetch.push(imageId);
        }
        if (shouldLoadHigher) {
            nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];
            imageId = stack.imageIds[nextImageIdIndex];
            imageIdsToPrefetch.push(imageId);
        }
    }
    const requestFn = (imageId, options) => _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.imageLoader.loadAndCacheImage(imageId, options);
    const { useNorm16Texture } = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getConfiguration)().rendering;
    imageIdsToPrefetch.forEach((imageId) => {
        const options = {
            targetBuffer: {
                type: useNorm16Texture ? undefined : 'Float32Array',
            },
            preScale: {
                enabled: true,
            },
            requestType,
        };
        _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.imageLoadPoolManager.addRequest(requestFn.bind(null, imageId, options), requestType, {
            imageId,
        }, priority);
    });
}
function getPromiseRemovedHandler(element) {
    return function (e) {
        const eventData = e.detail;
        let stackData;
        try {
            stackData = getStackData(element);
        }
        catch (error) {
            return;
        }
        if (!stackData || !stackData.imageIds || stackData.imageIds.length === 0) {
            return;
        }
        const stack = stackData;
        const imageIdIndex = stack.imageIds.indexOf(eventData.imageId);
        if (imageIdIndex < 0) {
            return;
        }
        const stackPrefetchData = (0,_state__WEBPACK_IMPORTED_MODULE_1__.getToolState)(element);
        if (!stackPrefetchData ||
            !stackPrefetchData.data ||
            !stackPrefetchData.data.length) {
            return;
        }
        stackPrefetchData.indicesToRequest.push(imageIdIndex);
    };
}
function onImageUpdated(e) {
    clearTimeout(resetPrefetchTimeout);
    resetPrefetchTimeout = setTimeout(function () {
        const element = e.target;
        try {
            prefetch(element);
        }
        catch (error) {
            return;
        }
    }, resetPrefetchDelay);
}
function enable(element) {
    const stack = getStackData(element);
    if (!stack || !stack.imageIds || stack.imageIds.length === 0) {
        console.warn('CornerstoneTools.stackPrefetch: No images in stack.');
        return;
    }
    const stackPrefetchData = {
        indicesToRequest: range(0, stack.imageIds.length - 1),
        enabled: true,
        direction: 1,
    };
    const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(stack.currentImageIdIndex);
    stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);
    (0,_state__WEBPACK_IMPORTED_MODULE_1__.addToolState)(element, stackPrefetchData);
    prefetch(element);
    element.removeEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.STACK_NEW_IMAGE, onImageUpdated);
    element.addEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.STACK_NEW_IMAGE, onImageUpdated);
    const promiseRemovedHandler = getPromiseRemovedHandler(element);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.removeEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.addEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);
}
function disable(element) {
    clearTimeout(resetPrefetchTimeout);
    element.removeEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.STACK_NEW_IMAGE, onImageUpdated);
    const promiseRemovedHandler = getPromiseRemovedHandler(element);
    _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.eventTarget.removeEventListener(_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.Enums.Events.IMAGE_CACHE_IMAGE_REMOVED, promiseRemovedHandler);
    const stackPrefetchData = (0,_state__WEBPACK_IMPORTED_MODULE_1__.getToolState)(element);
    if (stackPrefetchData && stackPrefetchData.data.length) {
        stackPrefetchData.enabled = false;
        _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.imageLoadPoolManager.clearRequestStack(requestType);
    }
}
function getConfiguration() {
    return configuration;
}
function setConfiguration(config) {
    configuration = config;
}

//# sourceMappingURL=stackPrefetch.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/state.js":
/*!********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/stackPrefetch/state.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addToolState: () => (/* binding */ addToolState),
/* harmony export */   getToolState: () => (/* binding */ getToolState)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

const state = {};
function addToolState(element, data) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewportId } = enabledElement;
    state[viewportId] = data;
}
function getToolState(element) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { viewportId } = enabledElement;
    return state[viewportId];
}

//# sourceMappingURL=state.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js":
/*!*********************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _debounce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debounce */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/debounce.js");
/* harmony import */ var _isObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObject */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/isObject.js");


function throttle(func, wait, options) {
    let leading = true;
    let trailing = true;
    if (typeof func !== 'function') {
        throw new TypeError('Expected a function');
    }
    if ((0,_isObject__WEBPACK_IMPORTED_MODULE_1__["default"])(options)) {
        leading = 'leading' in options ? Boolean(options.leading) : leading;
        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;
    }
    return (0,_debounce__WEBPACK_IMPORTED_MODULE_0__["default"])(func, wait, {
        leading,
        trailing,
        maxWait: wait,
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (throttle);
//# sourceMappingURL=throttle.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js":
/*!************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   copyPoints: () => (/* binding */ copyPoints),
/* harmony export */   copyPointsList: () => (/* binding */ copyPointsList),
/* harmony export */   getDeltaDistance: () => (/* binding */ getDeltaDistance),
/* harmony export */   getDeltaDistanceBetweenIPoints: () => (/* binding */ getDeltaDistanceBetweenIPoints),
/* harmony export */   getDeltaPoints: () => (/* binding */ getDeltaPoints),
/* harmony export */   getDeltaRotation: () => (/* binding */ getDeltaRotation),
/* harmony export */   getMeanPoints: () => (/* binding */ getMeanPoints),
/* harmony export */   getMeanTouchPoints: () => (/* binding */ getMeanTouchPoints)
/* harmony export */ });
function getDeltaPoints(currentPoints, lastPoints) {
    const curr = getMeanPoints(currentPoints);
    const last = getMeanPoints(lastPoints);
    return {
        page: _subtractPoints2D(curr.page, last.page),
        client: _subtractPoints2D(curr.client, last.client),
        canvas: _subtractPoints2D(curr.canvas, last.canvas),
        world: _subtractPoints3D(curr.world, last.world),
    };
}
function getDeltaDistance(currentPoints, lastPoints) {
    const curr = getMeanPoints(currentPoints);
    const last = getMeanPoints(lastPoints);
    return {
        page: _getDistance2D(curr.page, last.page),
        client: _getDistance2D(curr.client, last.client),
        canvas: _getDistance2D(curr.canvas, last.canvas),
        world: _getDistance3D(curr.world, last.world),
    };
}
function getDeltaRotation(currentPoints, lastPoints) {
}
function getDeltaDistanceBetweenIPoints(currentPoints, lastPoints) {
    const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);
    const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);
    const deltaDistance = {
        page: currentDistance.page - lastDistance.page,
        client: currentDistance.client - lastDistance.client,
        canvas: currentDistance.canvas - lastDistance.canvas,
        world: currentDistance.world - lastDistance.world,
    };
    return deltaDistance;
}
function copyPointsList(points) {
    return JSON.parse(JSON.stringify(points));
}
function copyPoints(points) {
    return JSON.parse(JSON.stringify(points));
}
function getMeanPoints(points) {
    return points.reduce((prev, curr) => {
        return {
            page: [
                prev.page[0] + curr.page[0] / points.length,
                prev.page[1] + curr.page[1] / points.length,
            ],
            client: [
                prev.client[0] + curr.client[0] / points.length,
                prev.client[1] + curr.client[1] / points.length,
            ],
            canvas: [
                prev.canvas[0] + curr.canvas[0] / points.length,
                prev.canvas[1] + curr.canvas[1] / points.length,
            ],
            world: [
                prev.world[0] + curr.world[0] / points.length,
                prev.world[1] + curr.world[1] / points.length,
                prev.world[2] + curr.world[2] / points.length,
            ],
        };
    }, {
        page: [0, 0],
        client: [0, 0],
        canvas: [0, 0],
        world: [0, 0, 0],
    });
}
function getMeanTouchPoints(points) {
    return points.reduce((prev, curr) => {
        return {
            page: [
                prev.page[0] + curr.page[0] / points.length,
                prev.page[1] + curr.page[1] / points.length,
            ],
            client: [
                prev.client[0] + curr.client[0] / points.length,
                prev.client[1] + curr.client[1] / points.length,
            ],
            canvas: [
                prev.canvas[0] + curr.canvas[0] / points.length,
                prev.canvas[1] + curr.canvas[1] / points.length,
            ],
            world: [
                prev.world[0] + curr.world[0] / points.length,
                prev.world[1] + curr.world[1] / points.length,
                prev.world[2] + curr.world[2] / points.length,
            ],
            touch: {
                identifier: null,
                radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,
                radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,
                force: prev.touch.force + curr.touch.force / points.length,
                rotationAngle: prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,
            },
        };
    }, {
        page: [0, 0],
        client: [0, 0],
        canvas: [0, 0],
        world: [0, 0, 0],
        touch: {
            identifier: null,
            radiusX: 0,
            radiusY: 0,
            force: 0,
            rotationAngle: 0,
        },
    });
}
function _subtractPoints2D(point0, point1) {
    return [point0[0] - point1[0], point0[1] - point1[1]];
}
function _subtractPoints3D(point0, point1) {
    return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];
}
function _getMeanDistanceBetweenAllIPoints(points) {
    const pairedDistance = [];
    for (let i = 0; i < points.length; i++) {
        for (let j = 0; j < points.length; j++) {
            if (i < j) {
                pairedDistance.push({
                    page: _getDistance2D(points[i].page, points[j].page),
                    client: _getDistance2D(points[i].client, points[j].client),
                    canvas: _getDistance2D(points[i].canvas, points[j].canvas),
                    world: _getDistance3D(points[i].world, points[j].world),
                });
            }
        }
    }
    return pairedDistance.reduce((prev, curr) => {
        return {
            page: prev.page + curr.page / pairedDistance.length,
            client: prev.client + curr.client / pairedDistance.length,
            canvas: prev.canvas + curr.canvas / pairedDistance.length,
            world: prev.world + curr.world / pairedDistance.length,
        };
    }, {
        page: 0,
        client: 0,
        canvas: 0,
        world: 0,
    });
}
function _getDistance2D(point0, point1) {
    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2));
}
function _getDistance3D(point0, point1) {
    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) +
        Math.pow(point0[1] - point1[1], 2) +
        Math.pow(point0[2] - point1[2], 2));
}

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js":
/*!************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   annotationRenderingEngine: () => (/* binding */ annotationRenderingEngine),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   triggerAnnotationRender: () => (/* binding */ triggerAnnotationRender)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");
/* harmony import */ var _drawingSvg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../drawingSvg */ "../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/index.js");
/* harmony import */ var _getToolsWithModesForElement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getToolsWithModesForElement */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getToolsWithModesForElement.js");




const { Active, Passive, Enabled } = _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes;
class AnnotationRenderingEngine {
    constructor() {
        this._needsRender = new Set();
        this._animationFrameSet = false;
        this._animationFrameHandle = null;
        this._renderFlaggedViewports = () => {
            this._throwIfDestroyed();
            const elements = Array.from(this._viewportElements.values());
            for (let i = 0; i < elements.length; i++) {
                const element = elements[i];
                if (this._needsRender.has(element)) {
                    this._triggerRender(element);
                    this._needsRender.delete(element);
                    if (this._needsRender.size === 0) {
                        this._animationFrameSet = false;
                        this._animationFrameHandle = null;
                        return;
                    }
                }
            }
        };
        this._viewportElements = new Map();
    }
    addViewportElement(viewportId, element) {
        this._viewportElements.set(viewportId, element);
    }
    removeViewportElement(viewportId, element) {
        this._viewportElements.delete(viewportId);
        this._needsRender.delete(element);
        this._reset();
    }
    renderViewport(element) {
        this._setViewportsToBeRenderedNextFrame([element]);
    }
    _throwIfDestroyed() {
        if (this.hasBeenDestroyed) {
            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');
        }
    }
    _setAllViewportsToBeRenderedNextFrame() {
        const elements = [...this._viewportElements.values()];
        elements.forEach((element) => {
            this._needsRender.add(element);
        });
        this._renderFlaggedViewports();
    }
    _setViewportsToBeRenderedNextFrame(elements) {
        const elementsEnabled = [...this._viewportElements.values()];
        elements.forEach((element) => {
            if (elementsEnabled.indexOf(element) !== -1) {
                this._needsRender.add(element);
            }
        });
        this._render();
    }
    _render() {
        if (this._needsRender.size > 0 && this._animationFrameSet === false) {
            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedViewports);
            this._animationFrameSet = true;
        }
    }
    _triggerRender(element) {
        const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
        if (!enabledElement) {
            console.warn('Element has been disabled');
            return;
        }
        const renderingEngine = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getRenderingEngine)(enabledElement.renderingEngineId);
        if (!renderingEngine) {
            console.warn('rendering Engine has been destroyed');
            return;
        }
        const enabledTools = (0,_getToolsWithModesForElement__WEBPACK_IMPORTED_MODULE_3__["default"])(element, [
            Active,
            Passive,
            Enabled,
        ]);
        const { renderingEngineId, viewportId } = enabledElement;
        const eventDetail = {
            element,
            renderingEngineId,
            viewportId,
        };
        (0,_drawingSvg__WEBPACK_IMPORTED_MODULE_2__.draw)(element, (svgDrawingHelper) => {
            let anyRendered = false;
            const handleDrawSvg = (tool) => {
                if (tool.renderAnnotation) {
                    const rendered = tool.renderAnnotation(enabledElement, svgDrawingHelper);
                    anyRendered = anyRendered || rendered;
                }
            };
            enabledTools.forEach(handleDrawSvg);
            if (anyRendered) {
                (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.triggerEvent)(element, _enums__WEBPACK_IMPORTED_MODULE_1__.Events.ANNOTATION_RENDERED, { ...eventDetail });
            }
        });
    }
    _reset() {
        window.cancelAnimationFrame(this._animationFrameHandle);
        this._needsRender.clear();
        this._animationFrameSet = false;
        this._animationFrameHandle = null;
        this._setAllViewportsToBeRenderedNextFrame();
    }
}
const annotationRenderingEngine = new AnnotationRenderingEngine();
function triggerAnnotationRender(element) {
    annotationRenderingEngine.renderViewport(element);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (triggerAnnotationRender);
//# sourceMappingURL=triggerAnnotationRender.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js":
/*!**************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   triggerAnnotationRenderForViewportIds: () => (/* binding */ triggerAnnotationRenderForViewportIds)
/* harmony export */ });
/* harmony import */ var _triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./triggerAnnotationRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRender.js");

function triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender) {
    if (!viewportIdsToRender.length) {
        return;
    }
    viewportIdsToRender.forEach((viewportId) => {
        const { element } = renderingEngine.getViewport(viewportId);
        (0,_triggerAnnotationRender__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (triggerAnnotationRenderForViewportIds);
//# sourceMappingURL=triggerAnnotationRenderForViewportIds.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/index.js":
/*!***************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isViewportPreScaled: () => (/* reexport safe */ _isViewportPreScaled__WEBPACK_IMPORTED_MODULE_0__.isViewportPreScaled),
/* harmony export */   jumpToSlice: () => (/* reexport safe */ _jumpToSlice__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   jumpToWorld: () => (/* reexport safe */ _jumpToWorld__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _isViewportPreScaled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isViewportPreScaled */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js");
/* harmony import */ var _jumpToSlice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jumpToSlice */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/jumpToSlice.js");
/* harmony import */ var _jumpToWorld__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jumpToWorld */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/jumpToWorld.js");




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js":
/*!*****************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isViewportPreScaled: () => (/* binding */ isViewportPreScaled)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");

function isViewportPreScaled(viewport, targetId) {
    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.BaseVolumeViewport) {
        const volumeId = targetId.split('volumeId:')[1];
        const volume = _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.cache.getVolume(volumeId);
        return !!volume?.scaling && Object.keys(volume.scaling).length > 0;
    }
    else if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
        const { preScale } = viewport.getImageData() || {};
        return !!preScale?.scaled;
    }
    else {
        throw new Error('Viewport is not a valid type');
    }
}

//# sourceMappingURL=isViewportPreScaled.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/jumpToSlice.js":
/*!*********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/jumpToSlice.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _clip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../clip */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/clip.js");
/* harmony import */ var _scroll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scroll */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/scroll.js");



async function jumpToSlice(element, options = {}) {
    const { imageIndex, debounceLoading, volumeId } = options;
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    if (!enabledElement) {
        throw new Error('Element has been disabled');
    }
    const { viewport } = enabledElement;
    const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(viewport, debounceLoading);
    const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);
    const delta = imageIndexToJump - currentImageIndex;
    (0,_scroll__WEBPACK_IMPORTED_MODULE_2__["default"])(viewport, { delta, debounceLoading, volumeId });
}
function _getImageSliceData(viewport, debounceLoading) {
    if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.StackViewport) {
        return {
            numberOfSlices: viewport.getImageIds().length,
            imageIndex: debounceLoading
                ? viewport.getTargetImageIdIndex()
                : viewport.getCurrentImageIdIndex(),
        };
    }
    else if (viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.VolumeViewport) {
        return _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.utilities.getImageSliceDataForVolumeViewport(viewport);
    }
    else {
        throw new Error('Unsupported viewport type');
    }
}
function _getImageIndexToJump(numberOfSlices, imageIndex) {
    const lastSliceIndex = numberOfSlices - 1;
    return (0,_clip__WEBPACK_IMPORTED_MODULE_1__["default"])(imageIndex, 0, lastSliceIndex);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (jumpToSlice);
//# sourceMappingURL=jumpToSlice.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/jumpToWorld.js":
/*!*********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/jumpToWorld.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ jumpToWorld)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");


function jumpToWorld(viewport, jumpWorld) {
    if (!(viewport instanceof _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.VolumeViewport)) {
        return;
    }
    const { focalPoint } = viewport.getCamera();
    const delta = [0, 0, 0];
    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.sub(delta, jumpWorld, focalPoint);
    _applyShift(viewport, delta);
    return true;
}
function _applyShift(viewport, delta) {
    const camera = viewport.getCamera();
    const normal = camera.viewPlaneNormal;
    const dotProd = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.dot(delta, normal);
    const projectedDelta = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.fromValues(normal[0], normal[1], normal[2]);
    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.scale(projectedDelta, projectedDelta, dotProd);
    if (Math.abs(projectedDelta[0]) > 1e-3 ||
        Math.abs(projectedDelta[1]) > 1e-3 ||
        Math.abs(projectedDelta[2]) > 1e-3) {
        const newFocalPoint = [0, 0, 0];
        const newPosition = [0, 0, 0];
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.add(newFocalPoint, camera.focalPoint, projectedDelta);
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.vec3.add(newPosition, camera.position, projectedDelta);
        viewport.setCamera({
            focalPoint: newFocalPoint,
            position: newPosition,
        });
        viewport.render();
    }
}
//# sourceMappingURL=jumpToWorld.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.js":
/*!*******************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ filterViewportsWithFrameOfReferenceUID)
/* harmony export */ });
function filterViewportsWithFrameOfReferenceUID(viewports, FrameOfReferenceUID) {
    const numViewports = viewports.length;
    const viewportsWithFrameOfReferenceUID = [];
    for (let vp = 0; vp < numViewports; vp++) {
        const viewport = viewports[vp];
        if (viewport.getFrameOfReferenceUID() === FrameOfReferenceUID) {
            viewportsWithFrameOfReferenceUID.push(viewport);
        }
    }
    return viewportsWithFrameOfReferenceUID;
}
//# sourceMappingURL=filterViewportsWithFrameOfReferenceUID.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithParallelNormals.js":
/*!***************************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithParallelNormals.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   filterViewportsWithParallelNormals: () => (/* binding */ filterViewportsWithParallelNormals)
/* harmony export */ });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "../../../node_modules/gl-matrix/esm/index.js");

function filterViewportsWithParallelNormals(viewports, camera, EPS = 0.999) {
    return viewports.filter((viewport) => {
        const vpCamera = viewport.getCamera();
        const isParallel = Math.abs(gl_matrix__WEBPACK_IMPORTED_MODULE_0__.vec3.dot(vpCamera.viewPlaneNormal, camera.viewPlaneNormal)) >
            EPS;
        return isParallel;
    });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (filterViewportsWithParallelNormals);
//# sourceMappingURL=filterViewportsWithParallelNormals.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithToolEnabled.js":
/*!***********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithToolEnabled.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ filterViewportsWithToolEnabled)
/* harmony export */ });
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../store */ "../../../node_modules/@cornerstonejs/tools/dist/esm/store/index.js");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../enums */ "../../../node_modules/@cornerstonejs/tools/dist/esm/enums/index.js");


const { Active, Passive, Enabled } = _enums__WEBPACK_IMPORTED_MODULE_1__.ToolModes;
function filterViewportsWithToolEnabled(viewports, toolName) {
    const numViewports = viewports.length;
    const viewportsWithToolEnabled = [];
    for (let vp = 0; vp < numViewports; vp++) {
        const viewport = viewports[vp];
        const toolGroup = _store__WEBPACK_IMPORTED_MODULE_0__.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);
        if (!toolGroup) {
            continue;
        }
        const hasTool = _toolGroupHasActiveEnabledOrPassiveTool(toolGroup, toolName);
        if (hasTool) {
            viewportsWithToolEnabled.push(viewport);
        }
    }
    return viewportsWithToolEnabled;
}
function _toolGroupHasActiveEnabledOrPassiveTool(toolGroup, toolName) {
    const { toolOptions } = toolGroup;
    const tool = toolOptions[toolName];
    if (!tool) {
        return false;
    }
    const toolMode = tool.mode;
    return toolMode === Active || toolMode === Passive || toolMode === Enabled;
}
//# sourceMappingURL=filterViewportsWithToolEnabled.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/getViewportIdsWithToolToRender.js":
/*!***********************************************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/getViewportIdsWithToolToRender.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getViewportIdsWithToolToRender)
/* harmony export */ });
/* harmony import */ var _cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cornerstonejs/core */ "../../../node_modules/@cornerstonejs/core/dist/esm/index.js");
/* harmony import */ var _filterViewportsWithFrameOfReferenceUID__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filterViewportsWithFrameOfReferenceUID */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.js");
/* harmony import */ var _filterViewportsWithToolEnabled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filterViewportsWithToolEnabled */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithToolEnabled.js");
/* harmony import */ var _filterViewportsWithParallelNormals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filterViewportsWithParallelNormals */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithParallelNormals.js");




function getViewportIdsWithToolToRender(element, toolName, requireParallelNormals = true) {
    const enabledElement = (0,_cornerstonejs_core__WEBPACK_IMPORTED_MODULE_0__.getEnabledElement)(element);
    const { renderingEngine, FrameOfReferenceUID } = enabledElement;
    let viewports = renderingEngine.getViewports();
    viewports = (0,_filterViewportsWithFrameOfReferenceUID__WEBPACK_IMPORTED_MODULE_1__["default"])(viewports, FrameOfReferenceUID);
    viewports = (0,_filterViewportsWithToolEnabled__WEBPACK_IMPORTED_MODULE_2__["default"])(viewports, toolName);
    const viewport = renderingEngine.getViewport(enabledElement.viewportId);
    if (requireParallelNormals) {
        viewports = (0,_filterViewportsWithParallelNormals__WEBPACK_IMPORTED_MODULE_3__["default"])(viewports, viewport.getCamera());
    }
    const viewportIds = viewports.map((vp) => vp.id);
    return viewportIds;
}
//# sourceMappingURL=getViewportIdsWithToolToRender.js.map

/***/ }),

/***/ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js":
/*!**********************************************************************************************!*\
  !*** ../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   filterViewportsWithFrameOfReferenceUID: () => (/* reexport safe */ _filterViewportsWithFrameOfReferenceUID__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   filterViewportsWithParallelNormals: () => (/* reexport safe */ _filterViewportsWithParallelNormals__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   filterViewportsWithToolEnabled: () => (/* reexport safe */ _filterViewportsWithToolEnabled__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   getViewportIdsWithToolToRender: () => (/* reexport safe */ _getViewportIdsWithToolToRender__WEBPACK_IMPORTED_MODULE_2__["default"])
/* harmony export */ });
/* harmony import */ var _filterViewportsWithFrameOfReferenceUID__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filterViewportsWithFrameOfReferenceUID */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.js");
/* harmony import */ var _filterViewportsWithToolEnabled__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filterViewportsWithToolEnabled */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithToolEnabled.js");
/* harmony import */ var _getViewportIdsWithToolToRender__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getViewportIdsWithToolToRender */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/getViewportIdsWithToolToRender.js");
/* harmony import */ var _filterViewportsWithParallelNormals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./filterViewportsWithParallelNormals */ "../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewportFilters/filterViewportsWithParallelNormals.js");





//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/@kitware/vtk.js/Filters/General/AppendPolyData.js":
/*!*******************************************************************************!*\
  !*** ../../../node_modules/@kitware/vtk.js/Filters/General/AppendPolyData.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkAppendPolyData$1),
/* harmony export */   extend: () => (/* binding */ extend),
/* harmony export */   newInstance: () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "../../../node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Core/DataArray.js */ "../../../node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _Common_Core_Points_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Core/Points.js */ "../../../node_modules/@kitware/vtk.js/Common/Core/Points.js");
/* harmony import */ var _Common_DataModel_PolyData_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/DataModel/PolyData.js */ "../../../node_modules/@kitware/vtk.js/Common/DataModel/PolyData.js");
/* harmony import */ var _Common_DataModel_DataSetAttributes_Constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Common/DataModel/DataSetAttributes/Constants.js */ "../../../node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js");
/* harmony import */ var _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Common/Core/DataArray/Constants.js */ "../../../node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js");







var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro;

function offsetCellArray(typedArray, offset) {
  var currentIdx = 0;
  return typedArray.map(function (value, index) {
    if (index === currentIdx) {
      currentIdx += value + 1;
      return value;
    }

    return value + offset;
  });
}

function appendCellData(dest, src, ptOffset, cellOffset) {
  dest.set(offsetCellArray(src, ptOffset), cellOffset);
} // ----------------------------------------------------------------------------
// vtkAppendPolyData methods
// ----------------------------------------------------------------------------


function vtkAppendPolyData(publicAPI, model) {
  // Set our classname
  model.classHierarchy.push('vtkAppendPolyData');

  publicAPI.requestData = function (inData, outData) {
    // implement requestData
    var numberOfInputs = publicAPI.getNumberOfInputPorts();

    if (!numberOfInputs) {
      vtkErrorMacro('No input specified.');
      return;
    }

    if (numberOfInputs === 1) {
      // pass through filter
      outData[0] = inData[0];
      return;
    } // Allocate output


    var output = _Common_DataModel_PolyData_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    var numPts = 0;
    var pointType = 0;
    var ttype = 1;
    var firstType = 1;
    var numVerts = 0;
    var numLines = 0;
    var numStrips = 0;
    var numPolys = 0; // Field data is propagated to output only if present in all inputs

    var hasPtNormals = true; // assume present by default

    var hasPtTCoords = true;
    var hasPtScalars = true;

    for (var i = 0; i < numberOfInputs; i++) {
      var ds = inData[i];

      if (!ds) {
        // eslint-disable-next-line
        continue;
      }

      var dsNumPts = ds.getPoints().getNumberOfPoints();
      numPts += dsNumPts;
      numVerts += ds.getVerts().getNumberOfValues();
      numLines += ds.getLines().getNumberOfValues();
      numStrips += ds.getStrips().getNumberOfValues();
      numPolys += ds.getPolys().getNumberOfValues();

      if (dsNumPts) {
        if (firstType) {
          firstType = 0;
          pointType = ds.getPoints().getDataType();
        }

        ttype = ds.getPoints().getDataType();
        pointType = pointType > ttype ? pointType : ttype;
      }

      var ptD = ds.getPointData();

      if (ptD) {
        hasPtNormals = hasPtNormals && ptD.getNormals() !== null;
        hasPtTCoords = hasPtTCoords && ptD.getTCoords() !== null;
        hasPtScalars = hasPtScalars && ptD.getScalars() !== null;
      } else {
        hasPtNormals = false;
        hasPtTCoords = false;
        hasPtScalars = false;
      }
    }

    if (model.outputPointsPrecision === _Common_DataModel_DataSetAttributes_Constants_js__WEBPACK_IMPORTED_MODULE_4__.DesiredOutputPrecision.SINGLE) {
      pointType = _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_5__.VtkDataTypes.FLOAT;
    } else if (model.outputPointsPrecision === _Common_DataModel_DataSetAttributes_Constants_js__WEBPACK_IMPORTED_MODULE_4__.DesiredOutputPrecision.DOUBLE) {
      pointType = _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_5__.VtkDataTypes.DOUBLE;
    }

    var points = _Common_Core_Points_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
      dataType: pointType
    });
    points.setNumberOfPoints(numPts);
    var pointData = points.getData();
    var vertData = new Uint32Array(numVerts);
    var lineData = new Uint32Array(numLines);
    var stripData = new Uint32Array(numStrips);
    var polyData = new Uint32Array(numPolys);
    var newPtNormals = null;
    var newPtTCoords = null;
    var newPtScalars = null;
    var lds = inData[numberOfInputs - 1];

    if (hasPtNormals) {
      var dsNormals = lds.getPointData().getNormals();
      newPtNormals = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance({
        numberOfComponents: 3,
        numberOfTuples: numPts,
        size: 3 * numPts,
        dataType: dsNormals.getDataType(),
        name: dsNormals.getName()
      });
    }

    if (hasPtTCoords) {
      var dsTCoords = lds.getPointData().getTCoords();
      newPtTCoords = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance({
        numberOfComponents: 2,
        numberOfTuples: numPts,
        size: 2 * numPts,
        dataType: dsTCoords.getDataType(),
        name: dsTCoords.getName()
      });
    }

    if (hasPtScalars) {
      var dsScalars = lds.getPointData().getScalars();
      newPtScalars = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance({
        numberOfComponents: dsScalars.getNumberOfComponents(),
        numberOfTuples: numPts,
        size: numPts * dsScalars.getNumberOfComponents(),
        dataType: dsScalars.getDataType(),
        name: dsScalars.getName()
      });
    }

    numPts = 0;
    numVerts = 0;
    numLines = 0;
    numStrips = 0;
    numPolys = 0;

    for (var _i = 0; _i < numberOfInputs; _i++) {
      var _ds = inData[_i];
      pointData.set(_ds.getPoints().getData(), numPts * 3);
      appendCellData(vertData, _ds.getVerts().getData(), numPts, numVerts);
      numVerts += _ds.getVerts().getNumberOfValues();
      appendCellData(lineData, _ds.getLines().getData(), numPts, numLines);
      numLines += _ds.getLines().getNumberOfValues();
      appendCellData(stripData, _ds.getStrips().getData(), numPts, numStrips);
      numStrips += _ds.getStrips().getNumberOfValues();
      appendCellData(polyData, _ds.getPolys().getData(), numPts, numPolys);
      numPolys += _ds.getPolys().getNumberOfValues();

      var dsPD = _ds.getPointData();

      if (hasPtNormals) {
        var ptNorms = dsPD.getNormals();
        newPtNormals.getData().set(ptNorms.getData(), numPts * 3);
      }

      if (hasPtTCoords) {
        var ptTCoords = dsPD.getTCoords();
        newPtTCoords.getData().set(ptTCoords.getData(), numPts * 2);
      }

      if (hasPtScalars) {
        var ptScalars = dsPD.getScalars();
        newPtScalars.getData().set(ptScalars.getData(), numPts * newPtScalars.getNumberOfComponents());
      }

      numPts += _ds.getPoints().getNumberOfPoints();
    }

    output.setPoints(points);
    output.getVerts().setData(vertData);
    output.getLines().setData(lineData);
    output.getStrips().setData(stripData);
    output.getPolys().setData(polyData);

    if (newPtNormals) {
      output.getPointData().setNormals(newPtNormals);
    }

    if (newPtTCoords) {
      output.getPointData().setTCoords(newPtTCoords);
    }

    if (newPtScalars) {
      output.getPointData().setScalars(newPtScalars);
    }

    outData[0] = output;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  outputPointsPrecision: _Common_DataModel_DataSetAttributes_Constants_js__WEBPACK_IMPORTED_MODULE_4__.DesiredOutputPrecision.DEFAULT
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['outputPointsPrecision']); // Make this a VTK object

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model); // Also make it an algorithm with one input and one output

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].algo(publicAPI, model, 1, 1); // Object specific methods

  vtkAppendPolyData(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkAppendPolyData'); // ----------------------------------------------------------------------------

var vtkAppendPolyData$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "../../../node_modules/lodash.get/index.js":
/*!*************************************************!*\
  !*** ../../../node_modules/lodash.get/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    splice = arrayProto.splice;

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map'),
    nativeCreate = getNative(Object, 'create');

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_cornerstonejs_tools_dist_esm_index_js.js.map